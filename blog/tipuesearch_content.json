{"pages":[{"tags":"misc","title":"About","url":"http://chiamingyen.github.io/kmolab/blog/pages/about/","text":"KMOL 實驗室 KMOL Lab 為台灣國立虎尾科技大學, 機械設計工程系, 知識管理與最佳化應用實驗室, 全稱為 Knowledge Management and Optimal Utilization Laboratory (縮寫為 KMOUL 或 KMOL, 音同 CAMEL), Department of Mechanical Design Engineering, National Formosa University, Taiwan. KMOL信念 二十一世紀的科技大學, 在培育具世界觀與在地文化素養, 能適應環境並成功面對挑戰之專業人才. 所謂專業, 即具有專長, 能夠就業之謂. 所謂文化者, 因思考及概念而有之教化. 所謂素養, 即平日的涵養. Excellence is an art won by training and habituation. We do not act rightly because we have virtue or excellence, but we rather have those because we have acted rightly. We are what we repeatedly do. Excellence, then, is not an act but a habit. — Aristotle (384 BC – March 7, 322 BC) 卓越須經由訓練與習慣養成才能獲得。並非具備品德或卓越能讓人舉止得宜，反而是舉止得宜能讓人卓越。經過切身重複實作，才可體會，卓越並非一種作為，而是習慣。 — 亞理士多德 (西元前 384 年 – 西元前 322 年 3 月 7 日) 體魄康強, 精神活潑, 舉止端莊, 人格健全, 便是大學生的風度. 不倦的追求真理, 熱烈的愛護國家, 積極的造福人類, 才是大學生的職志. — 羅家倫 (1928) KMOL 標誌"},{"tags":"Courses","title":"2016 Spring Collaborative Product Design Course","url":"http://chiamingyen.github.io/kmolab/blog/2016-spring-collaborative-product-design-course.html","text":"2016 Spring 產品設計實習課程 W1 2016 Spring 協同產品設計實習: 可攜套件倉儲: https://github.com/chiamingyen/kmol2016 kmol2016 下載: https://my.pcloud.com/publink/show?code=XZH5J4ZOj9C9aomi5F1DtnuQNIHYLDO7EjX 啟動倉儲 https://github.com/2015fallhw/test , ungit: https://github.com/FredrikNoren/ungit 工具導入 網際繪圖程式庫 (與 WCM 課程共用): https://github.com/2015fallhw/arcidau Github Pages 網站: http://2015fallhw.github.io/arcidau/ Task 1: 如何求出下列圖形中的4個相切點座標? 如何自行利用程式畫出這個 2D 的輪廓圖? (or Solvespace 或 PTC Creo Parametric 或 Onshape 是如何讓使用者運用繪圖工具完成此類, 具有特定尺寸與相關約束條件的產品輪廓圖) 動機 1: 從 http://rattlecad.sourceforge.net/ 可以得知桌面下單機的客製化自行車零組件繪圖工具, 能讓使用者根據自身尺寸, 訂製各零組件, 因此若能透過網路協同, 讓產品使用者、零件設計者、標準零件供應商與零組件製造商, 共同參與某一特定產品的設計與製造, 協同者需要俱備那些條件, 打造那些系統?該如何協同? 解題規劃: 該如何求出相切點的座標?我們擁有那些工具?在近端?在遠端?採用商用套件或自由開放工具?學會之後, 這些工具能否讓我們帶出學校合法使用? 求出各相切點座標後, 該如何進行繪圖?我們擁有那些工具?採用商用套件或自由開放工具?學會之後, 這些工具能否讓我們帶出學校合法使用? 畫出所需要的輪廓圖之後, 該如何以分組協同的方式打造類似 http://rattlecad.sourceforge.net/ 的客製化產品設計工具? 協同倉儲: https://github.com/2015fallhw/2016springcd 協同倉儲對應 Github Pages 網站: http://2015fallhw.github.io/2016springcd/ 技術回顧: Git 的功能? Github Pages 的功能? Python3 的功能? http://jupyter.org/ 的功能? OpenShift 的功能? Html5 與 Canvas 的功能? http://2015fallhw.github.io/arcidau/ 所提供的功能? Vimeo 的功能? https://www.pcloud.com/ 的功能? (用來取代 copy.com) 歷年課程回顧 2015 Spring 協同產品設計實習: Wordpress: http://wordpress-2015course.rhcloud.com/?cat=3 CMSimply: http://cd-cadp.rhcloud.com/ Vimeo 教學影片: https://vimeo.com/tag:2015cd 2014 Spring 協同產品設計實習: Dokuwiki 網站 2a Github 倉儲: https://github.com/coursemdetw/2014cda 2a OpenShift 同步網站: http://2014cda-mdenfu.rhcloud.com/ (以 2014cdaproject@ 帳號負責維護) 2b Github 倉儲: https://github.com/coursemdetw/2014cdb 2b OpenShift 同步網站: http://2014cdb-mdenfu.rhcloud.com/ (以 2014cdaproject@ 帳號負責維護) 同年 C2 Github 倉儲: https://github.com/coursemdetw/2014c2 同年程式語言(二)課程網頁: http://2014c2-mdenfu.rhcloud.com/ (以 2014cdaproject@ 帳號負責維護) Vimeo 教學影片: W1-1 https://vimeo.com/87531218 W1-2 https://vimeo.com/87534543 W2-a1 https://vimeo.com/88125916 W2-b1 https://vimeo.com/88225866 W2-b2 https://vimeo.com/88229349 W2-3 https://vimeo.com/88230051 W3-a1 https://vimeo.com/88719135 W3-a2 https://vimeo.com/88720436 W3-b1 https://vimeo.com/88847174 W3-b2 https://vimeo.com/88855247 W4-a1 https://vimeo.com/89371363 W5-a1 https://vimeo.com/89371363 W5-a2 https://vimeo.com/89980644 W5-a3 https://vimeo.com/89986371 W5-b1 https://vimeo.com/90098081 W6-a1 https://vimeo.com/90607449 W6-a2 https://vimeo.com/90612598 W6-b1 https://vimeo.com/90726318 W6-b2 https://vimeo.com/90731025 W7-b1 https://vimeo.com/91490333 W7-b2 https://vimeo.com/91491493 W11-a1 https://vimeo.com/94104234 Camstudio 與 Zoomit https://vimeo.com/90818335 Video Converter https://vimeo.com/90818467 W12-a1 https://vimeo.com/95069384 W13-a1 https://vimeo.com/95823422 W13-a2 https://vimeo.com/95823554 W13-b1 https://vimeo.com/95946099 W13-b2 https://vimeo.com/95946189 W14-a1 https://vimeo.com/96546108 W14-b1 https://vimeo.com/96671856 2013 Spring 協同產品設計實習: http://blog.kmol.info/indexd65e.html?cat=8 2013 CP: http://cp-2013fall.rhcloud.com/ (以 2013fall@mde.tw 帳號控管) 2012 Spring 協同產品設計實習: http://blog.kmol.info/indexd06b.html?cat=8&paged=3 2011 Spring 協同產品設計實習: http://blog.kmol.info/index8040.html?cat=8&paged=4"},{"tags":"Courses","title":"About Lektor Content Management System","url":"http://chiamingyen.github.io/kmolab/blog/about-lektor-content-management-system.html","text":"初探 Lektor 內容管理系統, 假如它能在第1時間就支援 Python3, 應該會更棒 http://lucumr.pocoo.org/2015/12/21/introducing-lektor/ https://github.com/lektor/lektor https://github.com/lektor Lektor 的作者說, 我們與其他類似的工具都不相同: https://www.getlektor.com/docs/what/ Lektor 是靜態文件網頁 也是內容管理系統 還能當作程式框架 可以協同, 也允許同步 有人說, Lektor 很像 http://urubu.jandecaluwe.com/ , 但有更好的管理環境 https://www.getlektor.com/docs/what/ 網站的資料就放在 https://github.com/lektor/lektor-website 只不過, 目前的 Desktop 應用程式只能用在 OsX 系統, 而 Python 也只支援 2.7 版, 真是可惜! 有關目前只能支援 Python 2.7 的情形, 幾乎就與當年 Flask 推出時的情況一樣, 也許作者對於 Python 2.7 版比較熟, 可能要再等一陣子, 才能在 Python3 的環境中使用了. 所以, 現階段, 想要靜態網頁系統, 而且自外於 Pelican: https://github.com/getpelican/pelican , 只能先從 http://urubu.jandecaluwe.com/ 看起. 另外, 假如想要脫離 Python3 一些些, 可以從 https://github.com/meteor/meteor 入手."},{"tags":"Project","title":"Create an online Ethercalc site","url":"http://chiamingyen.github.io/kmolab/blog/create-an-online-ethercalc-site.html","text":"利用 OpenShift 與 Ethercalc, 自行建立一個雲端線上試算表 試算表的功能非常多元, 一旦將試算表以多人可即時更新內容的架構搬上雲端, 功能將會更加實用. https://github.com/audreyt/ethercalc 可以說是目前最符合雲端使用的試算表程式, 試算表的引擎採用通用公共授權( https://gist.github.com/audreyt/3985324 , https://www.socialtext.net/open/cpal ). Ethercalc 的實際應用非常簡單, 只要在 https://openshift.redhat.com/app/login 登記一個帳號, 然後登入後, 選擇 Add Application, 在應用程式類別選擇 Other Types 項下的 Node.js 0.10, 自行選擇可用的 Name Space 與應用程式名稱後, 在 Source Code 的欄位中填入 Ethercalc 的原始碼倉儲: https://github.com/audreyt/ethercalc.git 後, 按下 Create Application, 就可以完成 Ethercalc 網站的建立, 例如: http://ethercalc-2012c1.rhcloud.com/30wcwukfpmep (以 2012c1_mde_tw 帳號控管)."},{"tags":"Courses","title":"2016 CD course","url":"http://chiamingyen.github.io/kmolab/blog/2016-cd-course.html","text":"2016 Spring 協同產品設計實習課程規劃 MCAD 套件 Mechanical Computer Aided Design (MCAD) 套件將使用: Onshape: https://www.onshape.com/ Solvespace: http://solvespace.com/index.pl PTC Creo Parametric: http://www.ptc.com/cad/creo/parametric rattleCAD: http://rattlecad.sourceforge.net/ 零組件繪圖與設計 將以自行車設計與 3D 模型組裝作為主題 標準零件庫 http://www.mcmaster.com/ http://www.bolts-library.org/ https://b2b.partcommunity.com/community/ https://grabcad.com/library/tag/bicycle 客製化設計 https://github.com/vallettea/Bicycle http://www.atom3dp.com/ 參考資料 https://github.com/smoqadam/PyFladesk-rss-reader Planar Linkage Analysis: http://chiamingyen.github.io/kmolab_data/files/planar_linkage_analysis.pdf Fourbar Synthesis: http://chiamingyen.github.io/kmolab_data/files/fourbar_synthesis.pdf Spur Gear Design: http://chiamingyen.github.io/kmolab_data/files/spurGears.pdf Spur Gear in Creo Parametric: http://chiamingyen.github.io/kmolab_data/files/creo_spurgear.7z Design of Spur and Helical Gears Transmissions: https://github.com/efirvida/python-gearbox 自行車控制設計: https://plot.ly/ipython-notebooks/bicycle-control-design/ Architecture of Collaboration: http://chiamingyen.github.io/kmolab_data/files/architecture_of_collaboration.pdf https://github.com/Pomax/bezierjs http://bicycledesign.net/ https://en.wikipedia.org/wiki/List_of_bicycle_parts Bicycle Parts (自行車零件): Chains (鏈條): Crank (曲柄): Frame (車架): Front Derailleur (前變速器): Handle Bar (車把): Hub (花鼓): Lever (桿): Rear Derailleur (後變速器): Rear Hub and Casette (後輪花鼓與飛輪組): Seat (座墊): Wheel (車輪): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 Bicycle 自行車 Tire 輪胎 Rim 輪圈 Saddle 坐墊 Seat post 座桿 Seat post clamp 座桿束子 Rear brake 後剎車 Front brake 前剎車 Seat stay 後上叉 Chain stay 後下叉 Seat tube 座管 Top tube 上管 Down tube 下管 Freewheel / cassette Sprockets 飛輪 Rear Ends/Dropouts 後叉端 Derailleur Cable 變速導線 Rear Derailleur 後變速器 Chain 鏈條 Pedal 腳踏 Front Derailleur 前變速器 軸 axle 滾珠軸承 ball bearing 車鈴 bicycle ball 車架 bicycle frame Rear suspension 後避震 Chainwheel&cranks 大齒盤及曲柄 Valve 汽門嘴 Spoke (輪圈)幅條 Spoke Nipple (幅條)接頭 Front fork end 前叉端 Hubs 花鼓 Quick release 快拆桿 Front fork 前叉 Brake cable 剎車導線 Front crown 前叉肩蓋 Brake cable housing 剎車導線 Brake lever 剎車握把 Bar end 小手把（副把手） Grip/tape 握把套 Head tube 頭管 Handlebar 車把 Derailleur lever 變速桿 Stem 豎管 Head parts 車頭碗組 Kickstand 停車柱 Chain cover 鏈蓋 Head Light 前燈 Back mirror 後照鏡 Reflector 反光片 Luggage Carrier 貨架"},{"tags":"Courses","title":"2015 Fall CADP W16","url":"http://chiamingyen.github.io/kmolab/blog/2015-fall-cadp-w16.html","text":"根據 Nutcracker 機構 的尺寸規格, 請設法算出 Piston 零件的有效運動範圍. 計算 Piston 不發生干涉的有效行程, 可採如下方法: 實際利用 Onshape 中的組立, 移動 piston 零件, 靠目測概略決定 piston 的有效行程. (目測法, 只能得到大概的行程範圍) 利用 Solvespace 繪製 2D 約束圖, 然後利用約束點在線或圓上的方式, 以圖解法解出有效行程, 如下圖一, 圖二與圖三所示. (圖解法, 利用 Solvespace 既有的約束條件設定完成計算) 利用 Jupyter 與 Python3 的 sympy 模組, 先進行符號式推導, 然後再利用數值分析解出 piston 的有效行程, 機構各點標示如下圖四所示, 計算出 的 theta 轉角為 105.7, 如下圖五所示. (以自行編寫的 sympy 程式解題, 透過 Jupyterhub 可以有效進行協同設計運算) 除了上述的目測, 圖解與符號式結合數值分析法之外, 也可以採用 基因演算法解題 , 計算出的 theta 轉角為 105.7, 如下圖六所示. (利用演化法解題, 可以在單機運算, 也可以在 Jupyterhub 平台 上進行運算) 圖一: 利用 Solvespace 中的繪圖約束條件找出右邊的極限點距離 Onshape Piston 組立原點 0.5 圖二: 利用 Solvespace 中的繪圖約束條件找出左邊的極限點距離 Onshape Piston 組立原點 2.23 圖三: 當 piston 位於左邊極限點時, AB 轉角為 105.37 度 圖四: Jupyter 計算分析時機構各點標示圖 圖五: 利用 Jupyter 符號式結合數值分析法所得結果 圖六: 利用基因演算解題, 所得到的結果, 當 piston 位於左邊極限點時, AB 轉角為 105.7 度 若採用 deap 與 numpy 解題 (AB 轉角極限為 105.71 度): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 # 這裡採用 numpy 與 deap 模組解題, 使用 Genetic Algorithm 模式 # 解的問題為 Nutcracker 左邊 connect 轉角極限 import random import array from deap import base from deap import creator from deap import tools import numpy # for evalIntersect 函式中的 sqrt, sin, cos, pi from math import * # 1/4 最小化題目 type of problem creator . create ( \"FitnessMin\" , base . Fitness , weights = ( - 1.0 ,)) creator . create ( \"Individual\" , array . array , typecode = 'd' , \\ fitness = creator . FitnessMin ) # 2/4 initilization # 兩個變數題目 NDIM = 2 toolbox = base . Toolbox () toolbox . register ( \"attr_float\" , random . uniform , 0 , 5 ) toolbox . register ( \"individual\" , tools . initRepeat , creator . Individual , toolbox . attr_float , NDIM ) toolbox . register ( \"population\" , tools . initRepeat , list , toolbox . individual ) # 3/4 選擇 operator step3/4 toolbox . register ( \"select\" , tools . selRandom , k = 3 ) # 也可以採用下列設定 #toolbox.register(\"mate\", tools.cxTwoPoint) #toolbox.register(\"mutate\", tools.mutGaussian, mu=0, sigma=1, indpb=0.1) #toolbox.register(\"select\", tools.selTournament, tournsize=3, k=3) def evalIntersect ( individual ): t = individual [ 0 ] deg = pi / 180 theta = individual [ 1 ] * deg xtarget = 0.75 / 2 ytarget = 0.5 x = t * sqrt ( - 225 * sin ( theta ) ** 2 + 529 ) / 10 - sqrt ( - 225 * sin ( theta ) ** 2 \\ + 529 ) / 92 + 3 * cos ( theta ) / 2 y = ( - 3 * t / 2 + 123 / 92 ) * sin ( theta ) # 適應值 fitness_value = pow ( x - xtarget , 8 ) + pow ( y - ytarget , 8 ) # 指定 t 的範圍, 小於 1 大於 0, 否則給予處罰 if t > 1 : fitness_value += 1000 if t 2 * pi : fitness_value += 1000 if theta < 0 : fitness_value += 1000 return fitness_value , toolbox . register ( \"evaluate\" , evalIntersect ) # 以上到 evaluate 為止, 為定義 operators # 4/4 以下則為 Algorithms def main (): # Differential evolution parameters CR = 0.25 F = 1 MU = 300 NGEN = 200 pop = toolbox . population ( n = MU ); hof = tools . HallOfFame ( 1 ) stats = tools . Statistics ( lambda ind : ind . fitness . values ) stats . register ( \"avg\" , numpy . mean ) stats . register ( \"std\" , numpy . std ) stats . register ( \"min\" , numpy . min ) stats . register ( \"max\" , numpy . max ) # Evaluate the individuals fitnesses = toolbox . map ( toolbox . evaluate , pop ) for ind , fit in zip ( pop , fitnesses ): ind . fitness . values = fit for g in range ( 1 , NGEN ): for k , agent in enumerate ( pop ): a , b , c = toolbox . select ( pop ) y = toolbox . clone ( agent ) index = random . randrange ( NDIM ) for i , value in enumerate ( agent ): if i == index or random . random () agent . fitness : pop [ k ] = y hof . update ( pop ) print ( \"Best individual is \" , hof [ 0 ], hof [ 0 ] . fitness . values [ 0 ]) if __name__ == \"__main__\" : main () 上述課程資料與 Wordpress 網頁 上的資料內容相同, Ｗordpress 網站屬於動態的網誌, 而 http://chiamingyen.github.io/kmolab/ 則是靜態網誌系統, 採用靜態網誌的優點如下: 比較安全 比較不會過時 部署成本比較低 可在各種平台上使用 各階段改版資料均有紀錄"},{"tags":"Courses","title":"2016 Spring CD Task0","url":"http://chiamingyen.github.io/kmolab/blog/2016-spring-cd-task0.html","text":"這個實習任務的目的, 在讓學員根據分組與電腦教室座位編排的問題, 進行思考, 如何以協同方式或流程, 有效完成任務 學期伊始, 一如往常, 各班學員以每 6 人一組為原則, 在 Cadlab 電腦教室安排固定座位, 但是 2016 Spring 開始, 儘管允許學員自行編組, 但是同組學員卻希望故意錯開座位, 讓所有爾後各組的產品設計解題都能夠儘量透過資訊與通訊系統完成, 而且所有溝通流程與內容都能夠存在產品開發專案中. 首先採用 https://ethercalc.tw/ 讓所有上課學員, 以即時同步模式, 填入分組資料, 若以 2a 班級為例, 分組資料中只填入學員學號, 則可以直接從瀏覽器畫面中複製分組資料, 放入 SciTE 中, 存為 2016_cd_2a_1.txt, 若利用 ethercalc 的 clipboard 格式轉檔, 可以存為 csv 格式, 存為 2016_cd_2a_2.txt, 且從學校開課前學員選課資料, 可得選課學員學號名單, 存為 2016_cd_2a_3.txt. Task0 的任務, 就是以各班協同分組後所取得的這 3 個檔案開始, 依據下列敘述, 完成各班的 Cadlab 電腦教室座位表, 讓每一位學員都能夠知道所被分配的學期固定座位, 並在爾後上課依序入座. 任務描述: 每組以 6 人為原則, 至少 4 人, 至多 7 人 各組學員, 以學號遞增排序後, 排序第1者為組長, 負責代表該組與其他組進行溝通 各組的班級分組序號, 則依據各組組長的學號, 再進行各組比序, 以遞增方式排列, 排序第1者為第1組, 其餘依序定下各組序號組別 Cadlab 電腦教室的配置為每列 9 排, 共有 7 列, 因此若每人一台電腦排座位, 可以容納 63 名學員 固定座位命名方式, 以面對講台的最右邊為第1排, 以最靠近講台者為第1列 一旦各組依照學員學號排序定組序後, 第1組的第1名同學, 從第1排第1列開始固定座位, 接著排第二組的第1位同學, 排在第1排的第2列座位, 然後將第三組的第1位同學, 排在第1排的第3列座位, 依此類推 座位安排中, 第1排排至第七列後, 則接著排在第2排的第1列座位上, 且各組若不及 7 位學員時, 則該座位由下一組的順位同學遞補 完成座位編排後, 必須能夠轉為網頁格式, 放入各組的協同倉儲所對應的 gh-pages 網頁或 OpenShift 網頁中 可能的任務變化: 與上述編排座位的問題類似, 在產品開發過程中, 許多設計參數可能因為特定協同團隊的意見而變更 上述座位編排問題, 可能從學號遞增排序, 改為遞減排序或亂數排序 可能從原先的以排 (column) 為主 (也就是先排第1排, 之後排第2排), 改為以列 (row) 為主 (也就是先排第1列, 之後排第2列) 假如電腦教室的配置更動, 從 9 排 7 列改為其他不同配置時, 整個座位安排流程, 就必須因應改變 換言之, 假如上述問題並非採用電腦運算的方法完成, 而以人工或類比的方式進行, 不僅耗費時間, 容易出錯, 而且一旦相關原則變更, 都將重新勞師動眾一番 技術回顧: 針對上述問題, 若希望利用 Python3 進行解題, 需要運用下列相關函式、方法或模組: with open ... as http://openhome.cc/Gossip/Python/WithAs.html readlines https://docs.python.org/3.4/tutorial/inputoutput.html for ... in range https://docs.python.org/3.4/tutorial/controlflow.html?highlight=loop#for-statements len https://docs.python.org/3.4/library/functions.html?#len append https://docs.python.org/3.4/tutorial/datastructures.html split https://docs.python.org/3.4/library/stdtypes.html#str.split list https://docs.python.org/3.4/library/functions.html#func-list sorted https://docs.python.org/3.4/library/functions.html#sorted filter https://docs.python.org/3.4/library/functions.html#filter None, True, not https://docs.python.org/3.4/c-api/none.html https://docs.python.org/3.4/library/constants.html#True https://docs.python.org/3.4/reference/expressions.html#not str https://docs.python.org/3.4/library/functions.html#func-str print https://docs.python.org/3.4/library/functions.html#print g.es http://leoeditor.com/tutorial-scripting.html zip_longest https://docs.python.org/3.4/library/itertools.html#itertools.zip_longest"},{"tags":"Courses","title":"computational thinking and digitally literate","url":"http://chiamingyen.github.io/kmolab/blog/computational-thinking-and-digitally-literate.html","text":"運算思維與數位化教育下的未來 https://www.gov.uk/government/publications/national-curriculum-in-england-computing-programmes-of-study/national-curriculum-in-england-computing-programmes-of-study computational thinking and digitally literate 運算思維與數位化教育 Computing has deep links with mathematics, science and design and technology, and provides insights into both natural and artificial systems. 運算與數學、科學、設計及科技都有很緊密的關聯, 能讓我們充份了解自然或人造的系統. Computing also ensures that pupils become digitally literate – able to use, and express themselves and develop their ideas through, information and communication technology – at a level suitable for the future workplace and as active participants in a digital world. 運算同時確保學習者俱備數位認知, 能夠運用、表達並透過資訊與通訊科技開展理念, 並在未來的數位世界職場中成為積極的參與者. Aims: 運算教育的目標: can understand and apply the fundamental principles and concepts of computer science, including abstraction, logic, algorithms and data representation 能夠了解並應用電腦科學的基本原理與概念, 包括抽象、邏輯, 演算法, 以及數據表達. can analyse problems in computational terms, and have repeated practical experience of writing computer programs in order to solve such problems 能夠透過運算術語分析問題, 並且運用多重的程式編寫實務經驗, 來解決問題. can evaluate and apply information technology, including new or unfamiliar technologies, analytically to solve problems 能夠應用資訊科技, 對全新或原本並不熟悉的科技進行評量, 能夠採解析方法解決各種問題. are responsible, competent, confident and creative users of information and communication technology 成為肯負責、能勝任、具備信心與創意的資訊及通信科技使用者."},{"tags":"Courses","title":"2016 Spring Web based Content Management","url":"http://chiamingyen.github.io/kmolab/blog/2016-spring-web-based-content-management.html","text":"2016 Spring 網際內容管理 W1 2016 Spring 網際內容管理: 可攜套件倉儲: https://github.com/chiamingyen/kmol2016 kmol2016 下載: https://my.pcloud.com/publink/show?code=XZH5J4ZOj9C9aomi5F1DtnuQNIHYLDO7EjX Github 倉儲: https://github.com/2015fallhw/2016springwcm Github Pages 網站: http://2015fallhw.github.io/2016springwcm/ 網際繪圖程式庫 (與 CD 課程共用): https://github.com/2015fallhw/arcidau Github Pages 網站: http://2015fallhw.github.io/arcidau/ 結合 http://reeborg.ca/ 與 https://codemirror.net/ 還有 https://github.com/google/blockly , 我們能否自行打造類似 https://studio.code.org/hoc/2 的網站, 並且逐步建構泛用型網際 2D/3D 機械設計資源中心, 以探索、儲存與開發機械設計相關內容的網站邁進. 參考: https://github.com/josephg/Chipmunk-js https://github.com/viblo/pymunk https://www.youtube.com/user/thang010146/videos (使用 AutoDesk Inventor 建置) 機構介紹 1 (pdf) 機構介紹 2 (pdf) 機構介紹 3 (pdf) 機構介紹 4 (pdf) http://www.algodoo.com/ Linkage http://chiamingyen.github.io/linkage/ 操作步驟: 按下 c 刪除畫面所有內容 利用滑鼠左鍵, 在螢幕點出4個四連桿的4個關鍵點 利用滑鼠左鍵, 點選第一個點 ,令其變為藍色 再以滑鼠左鍵, 點選第1桿件的第二個點, 滑鼠按下後, 先不要放開, 等左手按下 Alt 後, 並讓 Alt 鍵與滑鼠左鍵同時放開, 就可以順利利用第1點與第2點建立一個連桿 利用相同方法 ,建立第2與第3可動桿 以滑鼠左鍵, 選擇第1點, 然後按下 f 鍵, 表示要固定這個點, 此時點的顏色轉為紅色, 並且釋出其對應的自由度 再用相同方法 ,固定第四點 選擇要追蹤的點, 然後按下 t (tracking) 機構的作動則依靠, 選追蹤點, 左手按住 Shift 鍵, 然後移動滑鼠位置, 讓追蹤點隨滑鼠移動, 即可留下特定點的運動軌跡. 歷年課程回顧 2015 Spring 網際內容管理: Wordpress: http://wordpress-2015course.rhcloud.com/?cat=2 CMSimply 網站 Github 倉儲: https://github.com/coursemdetw/2015wcm Gitbook: https://www.gitbook.com/book/coursemde/2015wcm Vimeo 教學影片: https://vimeo.com/tag:2015wcm"},{"tags":"Courses","title":"2015 Fall CP part 2","url":"http://chiamingyen.github.io/kmolab/blog/2015-fall-cp-part-2.html","text":"2015 Fall 計算機程式課程內容 part2 2015 Fall 計算機程式課程倉儲分別為 https://github.com/2015fallhw/2015fallcpa 與 https://github.com/2015fallhw/2015fallcpb 2015 Fall CP 課程 part2 影片摘要: CP W12 介紹從 fix.bat 的搭建到猜顏色遊戲程式的編寫 2015fallcp_b_w12_1 from 虎尾科大機械設計工程 on Vimeo . CP W15 介紹近端系統的建立與啟動, Python3 指令整理, 猜數字與猜顏色遊戲的流程圖, Brython 網頁繪圖 2015cp_w15_b1 from 虎尾科大機械設計工程 on Vimeo . CP W17 說明如何使用 Python 函式, 以及如何進行 Brython 網頁動態繪圖 2015fallcpa_w17 from 虎尾科大機械設計工程 on Vimeo . 2015fallcp_w17b from 虎尾科大機械設計工程 on Vimeo ."},{"tags":"Courses","title":"2015 Fall CP part 1","url":"http://chiamingyen.github.io/kmolab/blog/2015-fall-cp-part-1.html","text":"2015 Fall 計算機程式課程內容 part1 2015 Fall 計算機程式課程倉儲分別為 https://github.com/2015fallhw/2015fallcpa 與 https://github.com/2015fallhw/2015fallcpb 2015 Fall CP 課程 part1 影片摘要: CP W2 2015 Fall 計算機程式可攜環境介紹 2015cp_w2_1 from 虎尾科大機械設計工程 on Vimeo . 說明如何利用 python -m http.server 分享近端檔案 2015cp_w2_2 from 虎尾科大機械設計工程 on Vimeo . 介紹如何利用 fix.bat 修補 C 槽既有的可攜程式系統, 說明 SciTE 如何執行 Python3 程式, 如何利用 gh-pages 分支網頁繳交作業 2015cp_w2_3 from 虎尾科大機械設計工程 on Vimeo . 介紹如何從可攜系統的修補與啟動, 到如何利用 Github Pages 的網頁來繳交各週作業 2015cp_b_w4 from 虎尾科大機械設計工程 on Vimeo . 2015 Fall 課程工作與環境介紹 2015Fall 使用環境與工具介紹 from 虎尾科大機械設計工程 on Vimeo . 英文打字的指法練習介紹, 說明 Github 倉儲的建立使用與刪除. Github 倉儲建立, 使用與刪除 from 虎尾科大機械設計工程 on Vimeo . 介紹 Github 倉儲分支的建立與使用 Github 倉儲分支建立與使用 from 虎尾科大機械設計工程 on Vimeo . CP W3 隨身程式系統的應用再提醒 (fix.zip), Leo Editor, Pelican, Markdown 模組的安裝設定與啟動, notebook.py 中編碼的設定 2015fall_cp_w3_1 from 虎尾科大機械設計工程 on Vimeo . 2015cp_w3_b1 from 虎尾科大機械設計工程 on Vimeo . 2015cp_w3_b3 from 虎尾科大機械設計工程 on Vimeo . 2015cp_w3_b2 from 虎尾科大機械設計工程 on Vimeo . 說明工程師的工作分類, 工程與科學的相輔相成, 解釋何以人文是工程師的養份, 了解科學在探究自然現況, 工程則需面對自然挑戰, 解決人文想像與需求 2015fall_cp_w3_2 from 虎尾科大機械設計工程 on Vimeo . 說明如何利用 Github 建立倉儲, 起始倉儲, git clone 倉儲, 建立分支, 切換 gh-pages 分支, 提交 gh-pages 分支版本, 推送分支版本 2015fall_cp_w3_3 from 虎尾科大機械設計工程 on Vimeo . 說明 Python 程式執行模式, 可以採互動式執行, SciTE 環境下執行, Jupyter 網頁 noteook 環境下執行, Brython 瀏覽器中執行等 2015fall_cp_w3_4 from 虎尾科大機械設計工程 on Vimeo . CP W5 說明計算機程式作為電腦輔助與協同產品設計系列課程的先導課程, 必須在學習 Python3 程式語法的同時, 架構一個可以永續改進使用的系統 2015cp_w5_1 from 虎尾科大機械設計工程 on Vimeo . fix.zip 內容的細步流程介紹, 從 markdown 透過 Pelican 指令的執行, 轉換為放上 Github Pages 網頁的 html 檔案資料, liquid_tags 延伸程式的應用 2015cp_w5_2 from 虎尾科大機械設計工程 on Vimeo . CP W6 介紹英文教學影片的字幕所在位置, 說明如利用 VLC 在近端播放教學影片 2015cp_w6_a_1 from 虎尾科大機械設計工程 on Vimeo . 說明如何將各學員的作業整合到全班協同倉儲, 自行新增為全班倉儲的協同者 2015cp_w6_a_2 from 虎尾科大機械設計工程 on Vimeo . 2015cp_w6_b_4 from 虎尾科大機械設計工程 on Vimeo . 示範如何修正內含 git 衝突標示的 Leo Editor 檔案 2015cp_w6_a_3 from 虎尾科大機械設計工程 on Vimeo . CP W7 介紹如何建立有效率的機械設計工程師可攜程式環境 (Anaconda Python based), 學習計算機程式的概念, 認識程式設計與機械設計工程師角色間的關係 2015_cp_w7_a_1 from 虎尾科大機械設計工程 on Vimeo . 說明近端與 Jupyter 環境的 Python 程式執行, print 與 for 迴圈應用 2015_cp_w7_a_2 from 虎尾科大機械設計工程 on Vimeo . 說明如何將計算機程式的內容放到 gh-pages 網頁 2015_cp_w7_a_3 from 虎尾科大機械設計工程 on Vimeo . 說明如何利用 git reset -- hard 版本編號, 回復舊版本資料 2015fall_cp_w7_b1 from 虎尾科大機械設計工程 on Vimeo . 說明如何修補被弄亂的全班倉儲 2015fall_cp_w7_b1 from 虎尾科大機械設計工程 on Vimeo ."},{"tags":"Courses","title":"2015 Fall CADP part 2","url":"http://chiamingyen.github.io/kmolab/blog/2015-fall-cadp-part-2.html","text":"2015 Fall 電腦輔助設計實習課程內容 part2 電腦輔助設計實習課程倉儲分別為: https://github.com/2015fallhw/2015fallcadpb 與 https://github.com/2015fallhw/2015fallcadpa 2015 Fall CADP 課程 part2 影片摘要: CADP W10 利用電腦解決機械設計工程師所面臨的各種問題 電腦輔助設計主要探討工程師該如何利用電腦解決所面臨的各種問題, 這些問題存在於人的各種活動當中, 而人的活動可以從3個不同的軸向來加以探討, 也就是: 人文的軸向, 其中包括與人類思想層面有關的各種活動, 也就是文學, 宗教, 音樂與藝術等活動. 科學的軸向, 其中牽涉到人所處的自然環境, 科學家主要在利用系統方法與工具, 探究存在自然界的各種原理原則, 而工程師在解決問題時, 必須面對自然界的各項挑戰, 依據各種已知的科學方法, 從人文的角度出發, 創造各種產品與服務, 來改善人的生存環境, 提升人的生活價值. 產品與服務的軸向, 此一軸向的活動, 即是工程師以人文想像層面的內容作為養份, 面對自然環境, 以科學認知及方法, 創造各種產品與服務的項目. 電腦在工程解題所扮演的角色: 提升資訊的傳輸效能, 利用網路, Git (2005 之後), Github (2008 之後) 讓數位資訊的傳輸更有效能. 強化文字、視覺與口語的溝通效率, 以隨選或即時媒體, 讓協同成員互通想法, 闡述設計, 激發創意. 簡化數據與資料的收集與儲存, 搜索引擎與資料庫的搭配使用. 支援各種設計與運算分析所需要的軟硬體配備, CAD, CAE, 虛擬實境, 擴增實境, 平行運算等技術的支援. 支援各種層面的製造規劃與管理, CAM, Computer Aided Process Planning 等. 2015cadp_w10_1 from 虎尾科大機械設計工程 on Vimeo . 介紹可攜程式系統的搭建流程與細節 首先下載與操作系統對應的 Miniconda (使用 Python3) 利用 conda install pip 利用 pip install pelican Markdown 安裝 pelican 與 Markdown 模組 可以利用 pip uninstall leo 移除先前所安裝的 Leo Editor 模組 利用 conda install pyqt (由 conda 自行選擇可以與既有系統相容的 pyqt 版本) 2015cadp_w10_2 from 虎尾科大機械設計工程 on Vimeo . CADP W11 fix.zip 修補流程再介紹, 說明電腦輔助機械設計的目標 將隨身碟中的資料, 複製到電腦硬碟, 然後再利用 start.bat 啟動硬碟上的可攜程式系統. 2015fallcadpw11_1 from 虎尾科大機械設計工程 on Vimeo . 啟動存放在全班倉儲網頁中的分組報告 2015fallcadpw11_2 from 虎尾科大機械設計工程 on Vimeo . CADP W12 fix.bat 的詳細介紹, Leo Editor 的近端 pip install 應用 2015cadpb_w12_1 from 虎尾科大機械設計工程 on Vimeo . 利用各自 user 目錄下的 Leo Editor 檔案, 發表位於全班 gh-pages 網頁的分組報告, 以電腦輔助方法管理 reveal.js 投影片中的學員學號註記, 介紹網頁式正齒輪齒面寬輔助設計, 說明正齒輪囓合繪製與組合的靜態繪圖與動態繪圖原理 2015cadpb_w12_2 from 虎尾科大機械設計工程 on Vimeo . CADP W13 fix.bat 環境修補複習 cadpaw13_1 from 虎尾科大機械設計工程 on Vimeo . 說明如何利用各學員 user/學號 目錄下的 .leo 檔案發表分組報告, 介紹如何利用 Github pages 展示零組件的 .stl 檔案 cadpaw13_2 from 虎尾科大機械設計工程 on Vimeo . CADP W14 介紹Creo Parametric 零件轉檔方法, gh-pages 網頁上的零件展示, Binary 與 ASCII STL 檔案格式介紹 2015cadp_w14_1 from 虎尾科大機械設計工程 on Vimeo . Onshape 介紹, 開始利用 OnShape 繪製 Nutcracker 零組件 2015cadp_w14_2 from 虎尾科大機械設計工程 on Vimeo . CADP W15 說明如何利用 Onshape, 以雲端協同方式繪製 Nutcracker 零件, 組立 Nutcracker 零件 2015cadp_w15_a1 from 虎尾科大機械設計工程 on Vimeo . CADP W16 介紹 Nutcracker 在 Onshape 環境中如何進行組立, 進行各種 Onshape 組立約束條件的細部特性討論 2015fall_cadp_b_w16 from 虎尾科大機械設計工程 on Vimeo . 說明如何利用 Solvespace 分析 Nutcraker 機構的 Piston 滑動行程極限 2015fallcadp_a_w16_1 from 虎尾科大機械設計工程 on Vimeo . CADP W17 Nutcracker 機構滑動 Piston 零件的滑動行程範圍分析, 說明如何以 Solvespace 圖解法, 以 Sympy 符號及數值分析推導機構邊界直線方程式, 或採基因演算法進行分析 2015fall_cadpb_w17 from 虎尾科大機械設計工程 on Vimeo . 2015fallcadpa_w17 from 虎尾科大機械設計工程 on Vimeo ."},{"tags":"Courses","title":"2015 Fall CADP part 1","url":"http://chiamingyen.github.io/kmolab/blog/2015-fall-cadp-part-1.html","text":"2015 Fall 電腦輔助設計實習課程內容 part1 電腦輔助設計實習課程倉儲分別為: https://github.com/2015fallhw/2015fallcadpb 與 https://github.com/2015fallhw/2015fallcadpa 2015 Fall CADP 課程 part1 影片摘要: CADP W2 介紹可攜程式環境的下載與使用 此一系統包括 Python3 程式環境, Leo Editor, Jupyter, 而每週作業則利用 reveal.js 製作網頁式投影片, 利用 Pelican 產生靜態網頁, 並且讓各學員可以在個人倉儲 gh-pages 與全班倉儲 gh-pages 網頁上來呈現各階段所完成的作業內容. 2015fallcadp_w2_1 from 虎尾科大機械設計工程 on Vimeo . 利用電腦輔助方法, 善用 USB 客製化資料與 C 槽的既有隨身系統, 設法修改 C 槽啟動的 start.bat 批次檔案, 建立符合需求的可攜程式環境. 2015cadp_w2_2 from 虎尾科大機械設計工程 on Vimeo . 介紹 reveal.js 網頁式投影片的使用方法, 介紹 Github pages 倉儲分支 gh-pages 的用法. 2015cadp_w2_3 from 虎尾科大機械設計工程 on Vimeo . 複習倉儲分支之間的切換方法 (git checkout master 或 git checkout gh-pages) 2015cadp_w2_6 from 虎尾科大機械設計工程 on Vimeo . Github 倉儲中 Leo Editor 5.1 版 @clean 節點指令與 reveal.js 網頁式投影片的用法. 2015cadp_w2_reveal from 虎尾科大機械設計工程 on Vimeo . 甲班 CADP W2 可攜程式系統的建立與使用 2015cadpa_1 from 虎尾科大機械設計工程 on Vimeo . avi 影片轉 flv 格式, 以可攜式 VLC 觀看 flv 影片, 利用 python -m http.server 執行近端檔案分享 2015cp_w2_2 from 虎尾科大機械設計工程 on Vimeo . git push origin gh-pages 系列指令的應用 2015cadpa_3 from 虎尾科大機械設計工程 on Vimeo . CADP W3 Pelican 靜態網頁系統建立與分組協同, Solvespace 零件繪圖 2015_cadpa_w3_1 from 虎尾科大機械設計工程 on Vimeo . git rm 的使用, 以及 git 提交, 訊息註記與推送設定 2015_cadpa_w3_2 from 虎尾科大機械設計工程 on Vimeo . Solvespace 零件電腦輔助繪圖 2015_cadpa_w3_3 from 虎尾科大機械設計工程 on Vimeo . CADP W4 根據 What Engineers Do? 電子文件, 說明科學與工程, 自然與人文間的關係 2015fall_cadp_w4_1 from 虎尾科大機械設計工程 on Vimeo . CADP W5 從 2008 年舊資料的回顧, 說明在地化與國際化的整合, 培養有專長, 能就業, 說明文化與教育對工程師的重要影響, 以及追求卓越的本意 2015cadp_w5_1 from 虎尾科大機械設計工程 on Vimeo . zoomit.exe 在錄製電腦輔助設計說明流程上的應用, Leo Editor 與 Pelican 的使用 2015cadp_w5_1 from 虎尾科大機械設計工程 on Vimeo . 電腦輔助設計系列課程的標準執行流程, 可攜, 永續與體貼的電腦輔助設計方法 2015cadp_w5_2 from 虎尾科大機械設計工程 on Vimeo . Creo2 primer 電子書的網頁化處理 2015cadp_w5_3 from 虎尾科大機械設計工程 on Vimeo . CADP W6 啟動可攜系統, Waht Engineers Do? 與 Creo 2 Parametric Primer 資料摘要, Creo Parametric 零件繪製與組立, 開始建立全班協同 gh-pages 網頁, 自行新增為倉儲協同者, 從 git clone 開始參與全班資料協同 2015cadp_a_w6_1 from 虎尾科大機械設計工程 on Vimeo . CADP W7 學員自行新增為全班協同倉儲的協同者, 示範如何參與網頁協同資料管理 2015fall_cadp_w7_1 from 虎尾科大機械設計工程 on Vimeo . start.bat 內容的修改, 設法透過 Jupyter 執行網頁式設計分析或協同網頁資料編輯 2015fall_cadp_w7_2 from 虎尾科大機械設計工程 on Vimeo . 期中報告內容說明, Creo 2 Parametric Primer 電子書閱讀與零件繪製與零件組操作練習 2015cadp_w7_a1 from 虎尾科大機械設計工程 on Vimeo ."},{"tags":"project","title":"Kmolab 4032 projects","url":"http://chiamingyen.github.io/kmolab/blog/kmolab-4032-projects.html","text":"KMOL Lab 4032 專題初步研究方向 Github 倉儲: https://github.com/2015fallproject 403231 40323123 40323130 40323131 40323143 研究動機: 3D 印表機進行零件列印時需要時間, 假如能夠有一個網路排程機制, 可以在線上接受使用者上傳的零件檔案後, 進行批次的零件列印, 並且能夠讓使用者直接在線上追蹤觀測印表機列印情形, 將可有效提升零件列印效能. 研究標的: 一個網路排程系統, 提供使用者利用 Google 帳號登入後, 能夠上傳零件檔案, 直接在線上模擬列印規劃, 計算列印所需時間 一個 3D 印表機的網路控制系統, 能夠與上述網路排程系統結合, 接受使用者的批次列印工作 一個 3D 印表機的列印平台上載與下載 (loading and unloading) 機構, 可以配合印表機的多列印工作, 上下物料與列印完成之零件 case1: 網際 3D 印表機相關多媒體內容管理系統建置 (參考用) Implementation of a Web-based 3D Printer Related Multimedia Content Management System case2: 網際 3D 印表機批次列印管理系統案例研究 (參考用) Case Study of a Web-based 3D Batch Printing Management System 工作項目 列印一個縮小比例, 可以作動的 NutCracker 機構. 參與 kmolab 的協同網誌發表後, 每一成員每週至少必須發表一篇相關資料. 在 17.103 機器上配置 Gogs: https://gogs.io/ 與 Jupyterhub: https://github.com/jupyter/jupyterhub , 讓所有成員都能連線使用. 參考資料 http://octoprint.org/ https://github.com/AstroPrint/AstroBox https://github.com/donovan6000/M3D-Fio https://github.com/Kozea/WeasyPrint 403232 研究動機: Jupyter, Creo Parametric, Onshape 的整合應用 研究標的: Jupyter 平面機構合成 (基因演算法) Creo Parametric Pro/Web.Link 在客製化自行車設計與分析上的應用 Flask 網際程式與 Onshape 系統整合, 建立一套客製化自行車設計系統 工作項目 在 17.102 機器上配置 Gogs: https://gogs.io/ 與 Jupyterhub: https://github.com/jupyter/jupyterhub , 讓所有成員都能連線使用. 參與 kmolab 的協同網誌發表後, 每一成員每週至少必須發表一篇相關資料. 利用 Jupyterhub, 研究基因演算法在機構合成上的應用, 包括 Sympy 與 Deap 的應用. 參考資料 https://github.com/DEAP/deap https://github.com/l-liciniuslucullus/TSP-GA https://www.simscale.com http://superpowers-html5.com/ 操作系統 http://www.ubuntu.com/ http://www.debian.org/ http://www.linuxmint.com/ http://distrowatch.com/"},{"tags":"Ubuntu","title":"Mechanical Designer and IPV6","url":"http://chiamingyen.github.io/kmolab/blog/mechanical-designer-and-ipv6.html","text":"機械設計工程師該如何執行 IPV6 網路設定 隨著 IPV6 協定的逐步推展, 機械設計工程師只需要理解網路發展趨勢, 並逐步在未來幾年內將日常工作導向 IPV4 與 IPV6 共存的環境中, 期開發能夠同時支援雙協定的各式機電光資生 (機械、電子電機、光電、資訊、生物) 與人文科技整合軟硬體, 以下便是在中華電信光世代環境下, 使用雙協定並存的相關設定步驟: 以下資料引用自 http://2014fall.kmol.info/?id=410 , 說明在台灣的中華電信用戶該如何申請並設定 IPV6 連線環境. 情境說明: 當中華電信的 ADSL 用戶升級成為 ADSL2 (光世代) 時, 負責實體進入用戶家中執行設定的工作人員會自帶一個\"用戶帳號@wifi.hinet.net\" 的撥接帳號, 而通常工作人員並不會告知用戶此一帳號的密碼(照理說用戶可以在安裝時向工作人員詢問此一 @wifi.hinet.net 帳號的對應密碼), 另外用戶在申請早期與特定家用電話號碼附掛的網路線時, 會從中華電信取到一個\"用戶帳號\"與密碼, 而此一帳號密碼可以附加成為\"用戶帳號@hinet.net\" 或 \"用戶帳號@ip.hinet.net\" 進行 Modem (這裡以 ZyXEL VDSL2 P883 為例) 的撥接, 若使用者完成 IPV6 試用申請後, 利用 @hinet.net 或 @ip.hinet.net 帳號撥接後, 若用戶為非固接光世代用戶, 就可以同時從中華電信的 DHCP 伺服器取得 IPV4 與 IPV6 等兩種協定的位址. 結論就是： 每一個中華電信用戶總共有兩組可以透過 Modem (這裡以 ZyXEL VDSL2 P883 為例) 撥接進入中華電信的 DHCP 取得 IP 位址的帳號, 其中一組為升級安裝時, 工作人員帶過來的 \"用戶帳號@wifi.hinet.net\", 而另外一組則是 \"用戶帳號@hinet.net\" 或 \"用戶帳號@ip.hinet.net\" 因為筆者並未取得 \"用戶帳號@wifi.hinet.net\" 的對應密碼, 因此無法測試這兩組帳號是否撥接後可以得到相同的效果, 但是\"用戶帳號@hinet.net\" 在完成 IPV6 試用申請後 ,完成撥接即可以取得 IPV4 與 IPV6 等兩組 IP 位址. 設定 IPV4 與 IPV6 dual stack 之前: 利用 ZyXEL P883 執行撥號, 先設定 P883 為 192.168.1.1, 啟動 DHCP Server, 並且從 192.168.1.101 開始, 100 組的 IPV4 IP 提供給實體連線與 Wifi 連線使用, 以\"用戶帳號@wifi.hinet.net\" 及密碼撥接後, P883 即可發揮作用, 其中若連線電腦只有四台以內, 則可以透過實體網路線, 連接到 P883 機器後面的 Hub (集線器), 雖然這4個孔的 Hub 可以方便使用, 但是速度只有到 100M (意思就是若家裡的兩台電腦是透過 P883 內建的4個 Hub 連接, 那麼區網內的網路瓶頸就是 100M, 假如想要讓兩台電腦透過 1000M 以上的速度彼此連線, 就必須將這兩台電腦先接到一個 1000M 以上的 Hub, 再接到 P883 內建的 Hub Port). 由於在 ZyXEL P883 的設定介面中找不到 IPV6 支援的任何畫面 (在隨後的第2階段設定中, 可以知道不需要將 P883 轉到 DHCPIPV6, 機器後面的集線埠, 連線到 Windows 7 以上或 Ubuntu 14.04 都可以自行利用 PPPoE 獨立再撥號連接, 這裡所使用的 ZyXEL 軔體版本為 P883S4_TR069_20141110), 所以若以 P883 執行撥接 (利用 @wifi.hinet.net 帳號)後, 再將電腦接到 P883 的 Hub, 將無法正確透過 IPV6 協定連接到 WAN, 因此以下的 IPV6 dual stack 設定前, 必須在撥接密碼欄中輸入錯誤的密碼, 讓 P883 無法完成撥接, 而且 DHCP Server 必須關閉, 然後由連接在 P883 後 Hub 上的 Ubuntu (以 14.04 LTS 為例) 電腦執行 PPP 的撥接. Ubuntu (以 14.04 LTS 為例) 與中華電信 IPV6 環境使用 完成 IPV6 使用申請, 並接到已經設定完成的通知. 如上所述, 關閉 P883 @wifi.hinet.net 的撥接 (給錯誤密碼並存檔即可), 並且關閉 P883 DHCP Server 運作. 使用下列的 /etc/ppp/options 設定檔案 以 sudo pppoeconf 執行設定, 主要步驟在輸入\"用戶帳號@hinet.net\" 與對應密碼, 其餘一律採用內建設定, 設定結束後, 會自動修改 /etc/network/interfaces 中的內容如下(詳細的 Windows 7 與 Ubuntu 設定步驟請參考: http://www.ipv6.hinet.net/form/HiNet_IPv6_connect-setting.pdf ). /etc/ppp/options 檔案內容: 1 2 3 4 5 6 # /etc/ppp/options # asyncmap 0 crtscts +ipv6 ipv6cp-use-ipaddr # ------ 經過 sudo pppoeconf 修改後的 /etc/network/interfaces 檔案內容: 1 2 3 4 5 6 7 8 9 # The loopback network interface auto lo iface lo inet loopback auto dsl-provider iface dsl-provider inet ppp pre-up /sbin/ifconfig p10p1 up # line maintained by pppoeconf provider dsl-provider auto p10p1 iface p10p1 inet manual 其中的 p10p1 為網路卡的代號 (一般為 eth0 或 eth1), 而手動撥接的指令為 sudo pon dsl-provider (關閉的指令為 sudo poff) 經過上述設定與電腦撥接之後的 ifconfig 呈現結果: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:64 errors:0 dropped:0 overruns:0 frame:0 TX packets:64 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:4880 (16.8 KB) TX bytes:4880 (16.8 KB) p10p1 Link encap:Ethernet HWaddr aa:bb:cc:dd:ee:ff inet6 addr: fe80::d685:64ff:feba:59b/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:15665 errors:0 dropped:158 overruns:0 frame:0 TX packets:13324 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:16816888 (16.8 MB) TX bytes:16816888 (16.8 MB) Interrupt:18 ppp0 Link encap:Point-to-Point Protocol inet addr:168.168.168.168 P-t-P:168.168.168.254 Mask:255.255.255.255 UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1492 Metric:1 RX packets:2060 errors:0 dropped:0 overruns:0 frame:0 TX packets:1548 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:3 RX bytes:1681688 (1.68 MB) TX bytes:168168 (168.168 KB) ppp1 Link encap:Point-to-Point Protocol inet addr:168.168.168.18 P-t-P:168.168.168.254 Mask:255.255.255.255 inet6 addr: 2001:1688:1688:1688:1688:1688:1688:1688/64 Scope:Global inet6 addr: fe80::918:2ec2:7e3:a107/10 Scope:Link inet6 addr: 2001:1688:1688:1688:1688:1688:1168:1168/64 Scope:Global UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1492 Metric:1 RX packets:12547 errors:0 dropped:0 overruns:0 frame:0 TX packets:11592 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:3 RX bytes:18354307 (18.3 MB) TX bytes:1398413 (1.3 MB) 第2階段設定 有了上述的測試設定後(其實主要目的在取得正確的 /etc/ppp/options 設定內容, 因為在 Ubuntu 14.04 LTS 中利用 http://www.ipv6.hinet.net/form/HiNet_IPv6_connect-setting.pdf 執行設定所得到的 /etc/ppp/options 無法正確完成 Modem 撥接), 採用\"用戶帳號@hinet.net\" 進行 PPPoE 撥號的連線, 非固接的光世代連線, 已經可以同時支援 IPV4 與 IPV6 協定, 但是因為 P883 的 DHCP 與 PPPoE 都沒有啟用, 所有 WiFi 的功能就無法使用, 因此弄清楚 Windows 7 操作系統與 Ubuntu 14.04 的 PPPoE 撥號設定後, 嘗試再將 P883 機器中的 DHCP Server 與 PPPoE 撥號啟用後, 再分別利用連接到 P883 集線器的 Windows7 與 Ubuntu 14.04 各自執行 PPPoE 的撥號 (因為中華電信的非固接光世代可以同時支援 8 台 PPPoE 的撥號連線). 首先看 Ubuntu 14.04 中的 /etc/network/interfaces 檔案內容: 1 2 3 4 5 6 7 8 9 10 # The loopback network interface auto lo iface lo inet loopback # for sudo pon dsl-provider auto dsl-provider iface dsl-provider inet ppp pre-up /sbin/ifconfig p10p1 up # line maintained by pppoeconf provider dsl-provider auto p10p1 iface p10p1 inet dhcp 透過上述設定, Ubuntu 會在開機的階段, 先以 PPPoE 撥號, 然後再向 P883 以 dhcp 取得網卡對應的 IPV4 位址, 重新開機後的 ifconfig 檔案內容為: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:133 errors:0 dropped:0 overruns:0 frame:0 TX packets:133 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:9729 (9.7 KB) TX bytes:9729 (9.7 KB) p10p1 Link encap:Ethernet HWaddr aa:bb:cc:dd:ee:ff inet addr:192.168.1.106 Bcast:192.168.1.255 Mask:255.255.255.0 inet6 addr: fe80::d685:64ff:feba:59b/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:8484 errors:0 dropped:0 overruns:0 frame:0 TX packets:8165 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:2904256 (2.9 MB) TX bytes:1086876 (1.0 MB) Interrupt:18 ppp0 Link encap:Point-to-Point Protocol inet addr:168.168.168.168 P-t-P:168.168.168.254 Mask:255.255.255.255 inet6 addr: 2001:1168:1168:1168:1168:1168:1168:1168/64 Scope:Global inet6 addr: fe80::d95f:df3:bd89:1e47/10 Scope:Link inet6 addr: 2001:1168:1168:1168:1168:1168:1168:a849/64 Scope:Global UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1492 Metric:1 RX packets:7610 errors:0 dropped:0 overruns:0 frame:0 TX packets:7460 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:3 RX bytes:2612710 (2.6 MB) TX bytes:827230 (827.2 KB) 設定至此, 已經在既有的 ZyXel P883 IPV4 架構下 (一台 Windows 7 + 一台 Ubuntu 14.04 + 多台 Wifi 裝置), 順利申請中華電信的 IPV6 試用, 完成機房設定後, 自行在 P883 連線之後, 分別在 Windows 7 與 Ubuntu 14.04 以 PPPoE 進行數據機撥號連線, 達到 IPV4 與 IPV6 共存並用的環境, 當使用者希望透過瀏覽器連接到特定 IPV6 網址的網站時, 可以使用 http://[IPV6 網址] 進行連線. 最後, 為什麼在這個時段要進入 IPV6 環境? 隨著 IPV4 網址的消耗殆盡, 有些主機或裝置未來只會有 IPV6 位址, 若不透過 IPV6 協定, 無法連接這些主機或裝置. IPV6 是一條不得不轉進的道路, 愈早涉入, 愈能對於具有未來性的各項軟硬體需求, 作最好的準備. 當許多客戶被迫使用 IPV6 環境後, 有些條件較 IPV4 安全, 但是在點對點的連線下, 可能產生更大的安全危害, 愈早因應, 愈可能降低損害. 目前階段使用 IPV4/IPV6 並存, 可能產生的問題: 連接純 IPV4 的網站, 可能速度反而會較慢 (例如: OpenShift 上的網站, 或 Amazon 平台上的網站). 連接支援 IPV6 的網站, 可能速度會較快 (例如: Youtube 或各項 Google 所提供的服務) 因為讓 double stack 支援的 IPV4 直接曝露在 WAN 上, 若沒有強而有效的防火牆保護, 或者沒有定期更新系統安全修補, 可能會比較容易受到駭客攻擊或利用."},{"tags":"Alumni","title":"Alumni interaction","url":"http://chiamingyen.github.io/kmolab/blog/alumni-interaction.html","text":"主動尋找校友互動 如何尋找校友? 如何互動？ 如何延續價值? 先建立自己的領英網頁 在 https://www.linkedin.com/ 登錄帳號後, 填入個人相關專業資料, 之後將會不定期收到機器寄出的 cold mail, 一般而言, 可以無需理會這些 cold mail, 暫且不管這些電子郵件看起來像是人或機器寫的, 你都必須知道, 建立領英帳號的目的, 是要利用它, 而不是被它利用, 所以絕對要對這些網路上的冷信件, 保持冷靜, 儘量不要回應, 可以直接刪除. 先建立自己的 about.me 網頁 在 https://about.me/ 建立帳號的態度, 應該要與領英一樣, 用它而不要被利用. 意思就是說, 只要在上面提供並更新與個人相關的專業資料, 並在申請學校或找工作的時候發揮其用處, 其他時候, 就該讓它晾在那裡, 不要多費心或浪費時間. 先每天早睡早起, 持續運動 主要的目的在時時刻刻保持覺照, 讓自己每天都精神飽滿, 可以應付課業或工作所需. 找虎尾及雲林縣附近的校友, 一起參加活動 每年都有慢跑活動, 可以找幾個身邊的好朋友, 每年參加, 並且利用網誌紀錄訓練與參賽的過程, 自然就會碰到許多志同道合的朋友與系友. 藉由各屆校友的資料整理, 利用網路進行互動 利用各種機會, 向過去的校友或系友請益, 這些前輩已經浸入社會多年, 擁有各式寶貴的經驗, 假如他們願意花一點時間與後進分享, 那就真是太棒了!"},{"tags":"CADlab","title":"2016 CAD Lab","url":"http://chiamingyen.github.io/kmolab/blog/2016-cad-lab.html","text":"2016 電腦輔助設計室規劃 採購電腦規格與開機磁區規劃 intel Core i7 電腦 63+4 台 - 四台電腦將充作 IPV4/IPV6 相容的 Squid 代理伺服器 防寫保護卡 - 打算使用目前既有的硬碟防寫卡 開機磁區 第1磁區: 64位元 Windows 10 (一般必須安裝的套件) 第2磁區: 64位元 Windows 10 (以無需安裝的綠色套件為主) 第3磁區: Ubuntu Server 加上 ubuntu-desktop 介面 舊電腦分配 淘汰下來的舊電腦分配與應用 網路設置 (以下設置為舊資料, 僅供參考) 目前電腦輔助設計室採 DHCP 換成 140.130.17.82 後連到學校主幹, 理論上設負載平衡的代理主機可以共享網路頻寬, 擷取網路資料的速度會比較快. 代理主機(理論上使用 140.130.17.3 作為 dns server, proxy 採 proxy.mde.nfu.edu.tw 速度最快): proxy.mde.nfu.edu.tw:3128 或 proxy.mde.tw: 3128 或 proxy.kmol.info:3128 問題在於 DNS 伺服器是否可以正確執行任務, 將代理主機符號名稱換成多台 Proxy 的 IP? 學校的 DNS 伺服器: 140.130.1.2 與 140.130.1.20 系上的 DNS 伺服器: 140.130.17.3 中華電信的 DNS 伺服器: 168.95.1.1 DNS 設定優先順序: 系上優先, 再來是學校, 最後才是中華電信. 查驗 DNS 是否正常運作: nslookup 更換 dns server 為 168.95.1.1 server 168.95.1.1 網路設定步驟: 優先使用代理主機\"自動偵測設定\", 系統將會透過 Web Proxy Auto-Discovery Protocol 自動搜尋可用的代理主機, 若連線不正常則進行以下手動設置. 目前的 DNS 伺服器設為哪一台?是否可以正常工作, 可以使用的 DNS 伺服器: 140.130.17.3, 140.130.1.2, 140.130.1.20 與 168.95.1.1 首先設為 140.130.17.3, 利用 nslookup 指令測試是否正常運作, 若不正常則依序改設其他 DNS 伺服器. 此設定的目的在確定可以透過 DNS 伺服器正確將 proxy.mde.tw 轉換為一系列的伺服器群組 IP 若 DNS 伺服器設定與運作正常, 則可以將代理主機設為 proxy.mde.tw:3128 假如 DNS 完全無法運作, 那麼 proxy.mde.tw:3128 由下列 IP 協同分擔運作, 使用者可以自行選擇任何一台作為 Proxy, 埠號都是 3128: IPV6: 2001:288:6004:17::2 2001:288:6004:17::4 2001:288:6004:17::9 2001:288:6004:17::17 2001:288:6004:17::22 2001:288:6004:17::23 IPV4: 140.130.17.2 140.130.17.4 140.130.17.9 140.130.17.17 140.130.17.22 140.130.17.23 假如要查驗目前網路連線情形, 可以檢視 系上即時網路連線圖 以上為 CAD Lab 透過 IPV4 協定使用 DHCP 與 NAT 的模式下, 有關代理主機的設定流程. 若 CAD LAb 所有電腦透過純 IPV6 協定上網, 則必須設定 DNS 與 Proxy 才能讓瀏覽器連網. 優先設系上的 DNS 伺服器: 2001:288:6004:17::3 若系上 DNS 伺服器反應不正常則設學校的 DNS 伺服器: 2001:288:6004:1::2 (另外一台應為: 2001:288:6004:1::20) 若系上與學校 DSN 伺服器反應不正常, 則設中華電信 DNS 伺服器: 2001:b000:168::1 與 2001:b000:168::2 proxy server 設為: proxy.mde.tw:3128"},{"tags":"Courses","title":"2016 WCM course","url":"http://chiamingyen.github.io/kmolab/blog/2016-wcm-course.html","text":"2016 Spring 網際內容管理課程規劃 github pages 上的靜態網頁系統 Github pages, Leo Editor 與 Pelican site builder html 與 Javascript (Brython based) Python3 的動態網頁 (Flask 與 SQLite based) OpenShift Web Console: https://www.openshift.com 與近端 Flask: http://flask.pocoo.org based 網站程式開發 參考資料 https://github.com/embik/bloks https://github.com/peterhudec/authomatic https://github.com/sigmavirus24/github3.py"},{"tags":"Ubuntu","title":"About 17.101 server","url":"http://chiamingyen.github.io/kmolab/blog/about-17101-server.html","text":"Ubuntu 伺服器 設定 介紹 17.101 機器的設定與使用 ubuntu-desktop 這一台 HP 伺服器, 原本安裝 Ubuntu Server 操作系統, 然後再加裝 desktop gui 介面相關套件: sudo apt-get install ubuntu-desktop nginx 與 uwsgi 之後因為卸除 Python3 相關的所有套件, 導致單機桌面無法登入, 所有介面操作, 只能透過網路, 以 X Windows 連線. 目前 17.101 總計啟動 IPV4 與 IPV6 網路設定. /etc/network/interfaces 設定檔案: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 auto lo iface lo inet loopback auto em1 iface em1 inet static address 140.130.17.101 netmask 255.255.255.0 network 140.130.17.0 broadcast 140.130.17.255 gateway 140.130.17.254 dns-nameservers 140.130.1.2 168.95.1.1 dns-search mde.nfu.edu.tw iface em1 inet6 static address 2001:288:6004:17::101 netmask 64 gateway 2001:288:6004:17::254 dns-nameservers 2001:288:6004:1::2 2001:b000:168::1 17.101 還安裝了 Nginx 與 uwsgi, 分別在 port 80 與 88 執行 CMSimply, 並在 https://140.130.17.101:9443 安裝 Jupyterhub, 只是 IPv6 模式下的 Jupyterhub 還無法使用. squid proxy 伺服器 利用 sudo apt-get install squid, 安裝 squid proxy server. 設定檔案位於 /etc/squid3/squid.conf 每次修改設定檔案後, 利用 sudo service squid3 restart, 重新啟動. 參考的設定檔案: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 acl cad_lab src 140.130.17.0/24 acl cad_lab src 2001:288:6004:17::/64 acl SSL_ports port 443 acl Safe_ports port 80 # http acl Safe_ports port 88 #acl Safe_ports port 21 # ftp acl SSL_ports port 8443 acl Safe_ports port 8443 acl SSL_ports port 9443 acl Safe_ports port 9443 acl SSL_ports port 22 acl Safe_ports port 22 acl Safe_ports port 443 # https acl Safe_ports port 1025-65535 # unregistered ports acl Safe_ports port 280 # http-mgmt acl Safe_ports port 488 # gss-http acl Safe_ports port 591 # filemaker acl Safe_ports port 777 # multiling http acl CONNECT method CONNECT # Deny requests to certain unsafe ports http_access deny !Safe_ports # Deny CONNECT to other than secure SSL ports http_access deny CONNECT !SSL_ports http_access allow cad_lab http_access deny all # Only allow cachemgr access from localhost http_access allow localhost manager http_access deny manager #http_access allow localnet http_access allow localhost # And finally deny all other access to this proxy http_access deny all # Squid normally listens to port 3128 http_port 3128 #cache_dir ufs /var/spool/squid3 100 16 256 icp_port 3130 icp_access allow all cache_dir ufs /var/spool/squid3 2000 16 256 cache_peer 140.130.17.2 sibling 3128 3130 cache_peer 140.130.17.4 sibling 3128 3130 cache_peer 140.130.17.9 sibling 3128 3130 cache_peer 140.130.17.22 sibling 3128 3130 cache_peer 140.130.17.23 sibling 3128 3130 # # Add any of your own refresh_pattern entries above these. # refresh_pattern &#94;ftp: 1440 20% 10080 refresh_pattern &#94;gopher: 1440 0% 1440 refresh_pattern -i (/cgi-bin/|\\?) 0 0% 0 refresh_pattern (Release|Packages(.gz)*)$ 0 20% 2880 refresh_pattern . 0 20% 4320 當 Ubuntu 在純 IPV6 環境時, 希望使用 IVP6 Git proxy 設定時, 可以利用: git config --global http.proxy http://[IPV6 位址]:埠號 例如: git config -- global http.proxy http://[2001:168:168::168]:3128 至於 python pip3 在純 IPV6 環境下, 也必須設定 proxy 才能正確運作: ~.pip/pip.conf 內容 1 2 [global] proxy = http://your.proxy.domain.name:3128 假如要解除 git proxy 設定: 1 2 git config --global --unset http.proxy git config --global --unset https.proxy"},{"tags":"project","title":"Kmolab initialized","url":"http://chiamingyen.github.io/kmolab/blog/kmolab-initialized.html","text":"KMOL Lab 啟用 Github pages 靜態網頁 二十一世紀是電腦網路與人工智慧充分整合的世代, Kmolab 一直以來對於人才的培育, 始終強調必須充份了解電腦的基本運作, 實際應用網路架構提升設計效能, 並且採用演化分析方法來發揮電腦的高速運算能力. 然而這些理念的落實, 必須從電腦的操作系統安裝設定開始, 進而納入 IPV4 與 IPV6 網路協定架構整合, 並且每一成員都有能力運用近端、 廣域主機與雲端主機上的各項軟硬體資源, 將知識管理與最佳化應用的精神納入產品的設計開發, 才能真正融入知識經濟與國際協同的趨勢. 首先以安裝設定 Ubuntu Server 開始. 安裝 Ubuntu Server 基本系統安裝 從 https://wiki.ubuntu.com/LTS , 可以了解各 Ubuntu 版次的產品生命週期, 就現在這個時間點來說, Ubuntu 14.04 的生命週期最長, 因此選擇安裝 14.04 的 Server 版本. 步驟一, 就是從 http://www.ubuntu.com/download/server 下載 Ubuntu Server 14.04 版本的 iso 檔案, 然後燒錄到 DVD 光碟上, 然後用此光碟開機執行安裝. 假如電腦並沒有 DVD 光碟機, 而只有早期的 CD Rom 光碟機, 可以下載 https://help.ubuntu.com/community/Installation/MinimalCD , 然後燒錄到 CD 片, 並且將網路線接上電腦的網路插槽, Ubuntu 就會透過網路線取得大部分的安裝資料, 順利完成安裝, 唯一必須注意的則是, 若此電腦位於內部網路, 通常必須要設定 proxy Server 才能順利從外部電腦取回安裝所需的資料. 步驟二, 一旦電腦接受 Ubuntu 14.04 的光碟開機之後, 隨後的安裝必須設定網路連線與管理者帳號密碼, 並且通常直接選擇安裝 OpenSSL 套件, 以便讓電腦可以透過 ssh 進行連線. 步驟三, IPV4 與與 IPV6 網路設定, /etc/network/interfaces 檔案內容: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # This file describes the network interfaces available on your system # and how to activate them. For more information, see interfaces(5). # The loopback network interface auto lo iface lo inet loopback # The primary network interface auto eth0 iface eth0 inet static address 140.130.17.17 netmask 255.255.255.0 network 140.130.17.0 broadcast 140.130.17.255 gateway 140.130.17.254 # dns-* options are implemented by the resolvconf package, if installed dns-nameservers 140.130.1.2 140.130.17.3 168.95.1.1 dns-search mde.nfu.edu.tw # The IPv6 based entries for the primary network interface iface eth0 inet6 static address 2001:288:6004:17::17 netmask 64 gateway 2001:288:6004:17::254 dns-nameservers 2001:288:6004:1::2 2001:b000:168::1 # for internal ip setup auto eth1 iface eth1 inet dhcp 步驟四, 利用 sudo apt-get update 與 sudo apt-get upgrade 更新並升級上一改版後可能已經釋出的版本更新. 步驟五, 利用 sudo apt-get install ubuntu-desktop, 安裝 ubuntu-desktop, 主要目的在讓初學者可以利用 desktop 所提供的互動介面進行操作, 而非僅透過 command shell 執行操作. 步驟六, 利用 sudo apt-get install gcin, 安裝 gcin, 切換語系, 讓使用者可以利用各種輸入法輸入中文 (安裝後 ctrl+alt+6 可以切換成詞音輸入法). 步驟七, 安裝 pip3, PyQt 與 Leo Editor. sudo apt-get install python3-pip sudo apt-get install python3-pyqt4 sudo pip3 install https://github.com/leo-editor/leo-editor/archive/master.zip 上述三項模組安裝完成後, 以 leo& 開啟 Leo Editor. 步驟八, 利用 sudo apt-get install git, 安裝 git client 工具. 步驟九, 安裝 Wine, 可以直接在 Ubuntu 環境中, 執行部份的 Windows 程式. sudo add-apt-repository ppa:ubuntu-wine/ppa sudo apt-get update sudo apt-get install wine1.7 步驟十, 利用 sudo apt-get install squid, 安裝 squid proxy server. 設定檔案位於 /etc/squid3/squid.conf 每次修改設定檔案後, 利用 sudo service squid3 restart, 重新啟動. squid3 參考設定: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 acl cad_lab src 140.130.17.0/24 acl cad_lab src 2001:288:6004:17::/64 acl SSL_ports port 443 acl Safe_ports port 80 # http acl Safe_ports port 88 #acl Safe_ports port 21 # ftp acl SSL_ports port 8443 acl Safe_ports port 8443 acl SSL_ports port 9443 acl Safe_ports port 9443 acl SSL_ports port 22 acl Safe_ports port 22 acl Safe_ports port 443 # https acl Safe_ports port 1025-65535 # unregistered ports acl Safe_ports port 280 # http-mgmt acl Safe_ports port 488 # gss-http acl Safe_ports port 591 # filemaker acl Safe_ports port 777 # multiling http acl CONNECT method CONNECT # Deny requests to certain unsafe ports http_access deny !Safe_ports # Deny CONNECT to other than secure SSL ports http_access deny CONNECT !SSL_ports http_access allow cad_lab http_access deny all # Only allow cachemgr access from localhost http_access allow localhost manager http_access deny manager #http_access allow localnet http_access allow localhost # And finally deny all other access to this proxy http_access deny all # Squid normally listens to port 3128 http_port 3128 #cache_dir ufs /var/spool/squid3 100 16 256 icp_port 3130 icp_access allow all cache_dir ufs /var/spool/squid3 2000 16 256 cache_peer 140.130.17.2 sibling 3128 3130 cache_peer 140.130.17.4 sibling 3128 3130 cache_peer 140.130.17.9 sibling 3128 3130 cache_peer 140.130.17.22 sibling 3128 3130 cache_peer 140.130.17.23 sibling 3128 3130 # # Add any of your own refresh_pattern entries above these. # refresh_pattern &#94;ftp: 1440 20% 10080 refresh_pattern &#94;gopher: 1440 0% 1440 refresh_pattern -i (/cgi-bin/|\\?) 0 0% 0 refresh_pattern (Release|Packages(.gz)*)$ 0 20% 2880 refresh_pattern . 0 20% 4320 新增其他管理者與一般用戶帳號 新增一般用戶 (假設新帳號為 username): sudo adduser username 過程中會先詢問允許執行 sudo 指令的帳號對應密碼, 然後再輸入兩次 username 的對應密碼 將一般用戶轉為管理者用戶: sudo visudo 將 username 納為可以執行 sudo 的帳號 其中以上下鍵將游標移到管理者帳號設定區, 根據 %admin 行所提示的格式輸入, 先將要轉為管理者的 username 帳號放在第1區, 接著輸入允許執行 sudo 的權限, 之後再利用 Ctrl+o 存檔, 存檔後該用戶即可生效成為系統的管理者. 安裝 nginx sudo apt-get update sudo apt-get install nginx 在 Ubuntu 安裝 nginx 後: nginx 安裝在: /etc/nginx nginx 設定檔案: /etc/nginx/nginx.conf 網站根目錄: /usr/share/nginx/html 內建的設定檔案: /etc/nginx/sites-available/default 安裝 Leo Editor 安裝 pip3 sudo apt-get install python3-pip 安裝 pyqt4 1 sudo apt–get install python3–pyqt4 選擇 Leo Editor 版本程式進行安裝 1 sudo pip3 install https://github.com/leo-editor/leo-editor/archive/broke-abbrev.zip 執行 Leo Editor leo& 安裝 CMSimply sudo pip3 install cherrypy git clone cmsimply 原始碼後, 可以利用 python3 application 在 127.0.0.7:8080 執行 安裝 google-chrome sudo apt-get install libxss1 libappindicator1 libindicator7 wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb sudo dpkg -i google-chrome*.deb 手動安裝 PyQt4 先安裝 sip sudo wget http://sourceforge.net/projects/pyqt/files/sip/sip-4.16.9/sip-4.16.9.tar.gz sudo tar -xvf sip-4.16.9.tar.gz cd sip-4.16.9 sudo python3 configure.py sudo make sudo make install 再安裝 PyQt4 sudo wget http://downloads.sourceforge.net/project/pyqt/PyQt4/PyQt-4.11.4/PyQt-x11-gpl-4.11.4.tar.gz sudo tar -xvf PyQt-x11-gpl-4.11.4.tar.gz cd PyQt-x11-gpl-4.11.4 sudo python3 configure.py sudo make sudo make install 手動安裝 Python 3.4.3 註: 在 Ubuntu 1503382 錯誤尚未解決之前, 必須手動移除 Python3, 然後手動安裝 Python 3.4.3 以及 pip3 之後, 才能安裝 uwsgi 模組. 安裝 Python 之前, 先安裝 sqlite3 與 libsqlite3-dev (否則 Python 無法建立 sqlite3 模組) sudo apt-get install sqlite3 libsqlite3-dev 再安裝 Python 3.4.3 sudo apt-get install libssl-dev openssl cd /opt sudo wget python.org/ftp/python/3.4.3/Python-3.4.3.tgz sudo tar -xzvf Python-3.4.3.tgz cd Python-3.4.3 sudo ./configure sudo make sudo make install python3 安裝 pip3 sudo wget https://pypi.python.org/packages/source/p/pip/pip-7.1.2.tar.gz sudo tar -xvf pip-7.1.2.tar.gz cd pip-7.1.2 sudo python3 setup.py install 安裝 uwsgi sudo pip3 install uwsgi 移除 nginx 只保留舊的設定檔案, 其餘移除 sudo apt-get remove nginx nginx-common 將所有與 nginx 有關的資料, 全數移除 sudo apt-get purge nginx nginx-common 移除用不到的相依套件 sudo apt-get autoremove 設定 nginx 與 uwsgi sudo apt-get install nginx 內定 nginx 安裝目錄: /etc/nginx nginx 設定檔案: /etc/nginx/nginx.conf 網站根目錄: /usr/share/nginx/html 內建的設定檔案: /etc/nginx/sites-available/default 與 nginx 結合的 default 設定檔: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 server { listen 80 default_server ; listen [ :: ] : 80 default_server ipv6only = on ; listen 443 ssl ; location / static { alias / home / yen / cmsimply / wsgi / static / ; } location / { include uwsgi_params ; uwsgi_pass 127 . 0 . 0 . 1 : 8080 ; } server_name localhost ; #ssl on ; ssl_certificate / etc / nginx / ssl / nginx .crt ; ssl_certificate_key / etc / nginx / ssl / nginx .key ; ssl_session_timeout 5m ; ssl_protocols SSLv3 TLSv1 TLSv1 .1 TLSv1 .2 ; ssl_ciphers \"HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES\" ; ssl_prefer_server_ciphers on ; try_files $ uri $ uri / = 404 ; } uwsgi_params 檔案: 1 2 3 4 5 6 7 8 9 10 11 12 13 uwsgi_param QUERY_STRING $ query_string ; uwsgi_param REQUEST_METHOD $ request_method ; uwsgi_param CONTENT_TYPE $ content_type ; uwsgi_param CONTENT_LENGTH $ content_length ; uwsgi_param REQUEST_URI $ request_uri ; uwsgi_param PATH_INFO $ document_uri ; uwsgi_param DOCUMENT_ROOT $ document_root ; uwsgi_param SERVER_PROTOCOL $ server_protocol ; uwsgi_param REMOTE_ADDR $ remote_addr ; uwsgi_param REMOTE_PORT $ remote_port ; uwsgi_param SERVER_ADDR $ server_addr ; uwsgi_param SERVER_PORT $ server_port ; uwsgi_param SERVER_NAME $ server_name ; 位於 /etc/init 下的 uwsgi.conf 檔案設定: 1 2 3 4 5 6 7 description \"uwsgi for cmsimply\" start on runlevel [2345] stop on runlevel [06] respawn exec uwsgi --master --processes 4 --die-on-term --socket :8080 --chdir /home/yen/cmsimply/wsgi --wsgi-file /home/yen/cmsimply/wsgi/application 在 Python wsgi cherrypy 程式中的啟動: application = cherrypy.Application(root, config = application_conf) 重新啟動 nginx: sudo service nginx restart 重新啟動 uwsgi: sudo service uwsgi restart uwsgi 啟動多個 Python 程式 利用 nginx 與 uwsgi 啟動多個 Python 應用程式: 必須採用 uwsgi Emperor 啟動模式設定: /etc/init/uwsgi.conf 檔案內容: 1 2 3 4 5 6 7 8 9 10 11 12 # Emperor uwsgi script description \"uwsgi Emperor\" start on runlevel [2345] stop on runlevel [06] respawn # 以下為以 user id yen 與 user group yen 執行單一 Python 應用程式的 Upstart 設定 # exec uwsgi --master --processes 4 --die-on-term --uid yen --gid yen --socket :8080 --chdir /home/yen/cmsimply/wsgi --wsgi-file /home/yen/cmsimply/wsgi/application # 以下為以 yen:yen 執行多個 Python 應用程式的設定, uwsgi --emperor 會進入 /home/yen/uwsgi_ini 目錄執行所有的 .ini 應用程式設定 exec uwsgi --uid yen --gid yen --emperor /home/yen/uwsgi_ini /home/yen/uwsgi_ini 目錄中有 uwsgi.ini 與 uwsgi2.ini 設定檔, 分別用來啟動 /home/yen/cmsimply/wsgi/application 與 /home/yen/cmsimply2/wsgi/application uwsgi.ini 內容: 1 2 3 4 5 6 [uwsgi] socket = :8080 processes = 4 master = true chdir = /home/yen/cmsimply/wsgi wsgi-file = /home/yen/cmsimply/wsgi/application uwsgi2.ini 內容: 1 2 3 4 5 6 [uwsgi] socket = :8081 processes = 4 master = true chdir = /home/yen/cmsimply2/wsgi wsgi-file = /home/yen/cmsimply2/wsgi/application nginx 位於 sites-enabled 目錄下的 default 設定檔: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 server { listen 80 default_server ; listen [ :: ] : 80 default_server ipv6only = on ; listen 443 ssl ; listen [ :: ] : 443 ssl ipv6only = on ; location / static { alias / home / yen / cmsimply / wsgi / static / ; } location / { include uwsgi_params ; uwsgi_pass 127 . 0 . 0 . 1 : 8080 ; } server_name localhost ; #ssl on ; ssl_certificate / etc / nginx / ssl / nginx .crt ; ssl_certificate_key / etc / nginx / ssl / nginx .key ; ssl_session_timeout 5m ; ssl_protocols SSLv3 TLSv1 TLSv1 .1 TLSv1 .2 ; ssl_ciphers \"HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES\" ; ssl_prefer_server_ciphers on ; try_files $ uri $ uri / = 404 ; } server { listen 88 default_server ; listen [ :: ] : 88 default_server ipv6only = on ; listen 8443 ssl ; listen [ :: ] : 8443 ssl ipv6only = on ; location / static { alias / home / yen / cmsimply2 / wsgi / static / ; } location / { include uwsgi_params ; uwsgi_pass 127 . 0 . 0 . 1 : 8081 ; } server_name localhost ; #ssl on ; ssl_certificate / etc / nginx / ssl / nginx .crt ; ssl_certificate_key / etc / nginx / ssl / nginx .key ; ssl_session_timeout 5m ; ssl_protocols SSLv3 TLSv1 TLSv1 .1 TLSv1 .2 ; ssl_ciphers \"HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES\" ; ssl_prefer_server_ciphers on ; try_files $ uri $ uri / = 404 ; } 重新啟動 nginx: sudo service nginx restart 重新啟動 uwsgi: sudo service uwsgi restart 按照上述設定完成的測試用主機: /home/yen/cmsimply 程式執行: IPV6 網址: http://[2001:288:6004:17::101] https://[2001:288:6004:17::101] IPV4 網址: http://140.130.17.101 https://140.130.17.101 /home/yen/cmsimply2 程式執行: IPV6 網址: http://[2001:288:6004:17::101]:88 https://[2001:288:6004:17::101]:8443 http://140.130.17.101:88 https://140.130.17.101:8443 純 IPV6 ssh 從只有 IPV6 網址的電腦要 ssh 到另一台 IPV6 電腦: ssh -6 帳號@IPV6 位址 例如: ssh -6 account@2001:288:6004:1::1 安裝 Jupyterhub sudo apt-get install npm nodejs-legacy sudo npm install -g configurable-http-proxy sudo pip3 install jupyterhub sudo pip3 install IPython sudo pip3 install \"ipython[notebook]\" 以 SSL 啟動 : 先建立 key 與 certificate: sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout jupyterhub.key -out jupyterhub.crt jupyterhub –ip 10.0.1.2 –port 443 –ssl-key jupyterhub.key –ssl-cert jupyterhub.cert 或不指定 IP jupyterhub –port 9443 –ssl-key my_ssl.key –ssl-cert my_ssl.cert 之後則可以 https://jupyterIP:9443 連線 putty 與 x windows SSH 設定 X11 ->X11 forwarding 勾選 Enable X11 forwarding X display location: 填入 localhost:0 若在 Windows 環境, 希望能夠將其他電腦上的 X window 畫面顯示在近端, 必須先啟動 xming for Windows http://sourceforge.net/projects/xming/ github 倉儲協同流程 每一位成員在倉儲 users 目錄下各自擁有一個維護資料的 user.leo 檔案 每位成員可以利用 git clone 方式, 將遠端現有的資料倉儲放入近端硬碟中 在 content 目錄下, 以用戶名稱+日期的方式建立 .md 檔案, 若在近端測試, 可以利用 local-pelican 按鈕產生靜態網頁 若在推送過程發現遠端有新的版本資料, 則必須透過 git pull origin gh-pages 的方式拉下資料後, 嘗試進行自動合併. 若無共同編輯的 .md 檔案, 則通常可以利用 gh-pages-pelican 按鈕建立遠端使用的靜態文件檔. 若各內容檢查無誤, 則可以推送到遠端. Openshift 網站 隨身裝置啟動後的 home/.ssh/id_rsa 中的 OpenSSH 私鑰與 OpenShift 帳號上 settings 中的公鑰對應, 如此方具備在近端複製程式碼的權限. 安裝 Beautifulsoup4 由於 kmolab 靜態網誌中的 tipue_search plugin 需要 bs4, 因此必須透過 sudo apt-get install python3-bs4 安裝."},{"tags":"Python","title":"Genetic Algorithm in Python","url":"http://chiamingyen.github.io/kmolab/blog/genetic-algorithm-in-python.html","text":"利用 Python 實現基因演算 利用\"Genetic Algorithm in python jupyter\" 查詢, 得到如下的相關連結: https://github.com/DEAP/deap , Deap 1.0.2 Genetic Algorithm notebook Kalman and Bayesian Filters in Python Elements of Evoluationary Algorithms , related Course , Evolutionary Computation with IPython https://github.com/jakevdp/JSAnimation https://github.com/garethflowers/vscode-portable https://github.com/dmahugh/crawlerino http://paraschopra.com/sourcecode/GP/ https://github.com/cpmech/CIVL4250py/tree/master/2015 https://github.com/remiomosowon/pyeasyga https://github.com/yati-sagade/Genetic-Algorithm-Demo 開始: http://lethain.com/genetic-algorithms-cool-name-damn-simple/ , trying to create a list of N numbers that equal X when summed together. Each suggested solution for a genetic algorithm is referred to as an individual. In our current problem, each list of N numbers is an individual. 1 2 3 4 5 6 7 8 9 10 from random import randint def individual ( length , min , max ): 'Create a member of the population.' return [ randint ( min , max ) for x in range ( length ) ] ''' individual(5,0,100) [79, 0, 20, 47, 40] individual(5,0,100) [64, 1, 25, 84, 87] ''' The collection of all individuals is referred to as our population. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def population ( count , length , min , max ): \"\"\" Create a number of individuals (i.e. a population). count: the number of individuals in the population length: the number of values per individual min: the min possible value in an individual's list of values max: the max possible value in an individual's list of values \"\"\" return [ individual ( length , min , max ) for x in range ( count ) ] ''' population(3,5,0,100) [[51, 55, 73, 0, 80], [3, 47, 18, 65, 55], [17, 64, 77, 43, 48]] ''' Next we need a way to judge the how effective each solution is; to judge the fitness of each individual. Predictably enough, we call this the fitness function. For our problem, we want the fitness to be a function of the distance between the sum of an individuals numbers and the target number X. We can implement the fitness function as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from operator import add def fitness ( individual , target ): \"\"\" Determine the fitness of an individual. Lower is better. individual: the individual to evaluate target: the sum of numbers that individuals are aiming for \"\"\" sum = reduce ( add , individual , 0 ) return abs ( target - sum ) ''' x = individual(5,0,100) fitness(x, 200) 165 ''' Personally, I'd prefer to have a high fitness score correlate to a fit individual rather than the current implementation where a perfectly fit individual has a fitness of 0, and the higher the worse. Ah well, regardless, keep that detail in mind while following this code.http://paraschopra.com/sourcecode/GP/index.php It's also helpful to create a function that will determine a population's average fitness. 1 2 3 4 5 6 7 8 9 10 def grade ( pop , target ): 'Find average fitness for a population.' summed = reduce ( add , ( fitness ( x , target ) for x in pop ), 0 ) return summed / ( len ( pop ) * 1.0 ) ''' x = population(3,5,0,100) target = 200 grade(x, target) 116 ''' Now we just need a way evolve our population; to advance the population from one generation to the next. Evolution This is the secret sauce of genetic algorithms, where secret means fairly obvious, and sauce means sauce. Consider a population of elk which are ruthlessly hunted by a pack of wolves. With each generation the weakest are eaten by the wolves, and then the strongest elk reproduce and have children. Abstract those ideas a bit, and we can implement the evolution mechanism. For each generation we'll take a portion of the best performing individuals as judged by our fitness function. These high-performers will be the parents of the next generation. We'll also randomly select some lesser performing individuals to be parents, because we want to promote genetic diversity. Abandoning the metaphor, one of the dangers of optimization algorithms is getting stuck at a local maximum and consequently being unable to find the real maximum. By including some individuals who are not performing as well, we decrease our likelihood of getting stuck. Breed together parents to repopulate the population to its desired size (if you take the top 20 individuals in a population of 100, then you'd need to create 80 new children via breeding). In our case, breeding is pretty basic: take the first N/2 digits from the father and the last N/2 digits from the mother. 1 2 3 4 5 6 7 father = [ 1 , 2 , 3 , 4 , 5 , 6 ] mother = [ 10 , 20 , 30 , 40 , 50 , 60 ] child = father [: 3 ] + mother [ 3 :] print ( child ) ''' [1,2,3,40,50,60] ''' It's okay to have one parent breed multiple times, but one parent should never be both the father and mother of a child. Merge together the parents and children to constitute the next generation's population. Finally we mutate a small random portion of the population. What this means is to have a probability of randomly modifying each individual. 1 2 3 4 5 6 from random import random , randint chance_to_mutate = 0.01 for i in population : if chance_to_mutate > random (): place_to_modify = randint ( 0 , len ( i )) i [ place_to_modify ] = randint ( min ( i ), max ( i )) This--just like taking individuals who are not performing particularly well--is to encourage genetic diversity, i.e. avoid getting stuck at local maxima. Putting it all together, the code to evolve a generation can be implemented like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def evolve ( pop , target , retain = 0.2 , random_select = 0.05 , mutate = 0.01 ): graded = [ ( fitness ( x , target ), x ) for x in pop ] graded = [ x [ 1 ] for x in sorted ( graded )] retain_length = int ( len ( graded ) * retain ) parents = graded [: retain_length ] # randomly add other individuals to promote genetic diversity for individual in graded [ retain_length :]: if random_select > random (): parents . append ( individual ) # mutate some individuals for individual in parents : if mutate > random (): pos_to_mutate = randint ( 0 , len ( individual ) - 1 ) # this mutation is not ideal, because it # restricts the range of possible values, # but the function is unaware of the min/max # values used to create the individuals, individual [ pos_to_mutate ] = randint ( min ( individual ), max ( individual )) # crossover parents to create children parents_length = len ( parents ) desired_length = len ( pop ) - parents_length children = [] while len ( children ) < desired_length : male = randint ( 0 , parents_length - 1 ) female = randint ( 0 , parents_length - 1 ) if male != female : male = parents [ male ] female = parents [ female ] half = len ( male ) / 2 child = male [: half ] + female [ half :] children . append ( child ) parents . extend ( children ) return parents Now we've written all the pieces of a genetic algorithm, and we just have to try it out and see if it works. Testing It Out Here is a simple way to use the code we've written: 1 2 3 4 5 6 7 8 9 10 11 12 target = 371 p_count = 100 i_length = 5 i_min = 0 i_max = 100 p = population ( p_count , i_length , i_min , i_max ) fitness_history = [ grade ( p , target ),] for i in range ( 100 ): p = evolve ( p , target ) fitness_history . append ( grade ( p , target )) for datum in fitness_history : print ( datum ) Running that code, you'll get to watch as generations' fitness gradually (but non-deterministically) approach zero. The output of one of my runs looked like this: With 20% survival (plus an additional 5% of other individuals) and 1% mutation, it only took nine generations to reach a perfect solution. Then the algorithm joyfully runs in circles for as long as you'll let the mutations continue But this is a good feeling right? If it only took us half an hour to solve a problem of this magnitude, imagine what we could do with a day. A genetic algorithm for optimizing your Apache2 configuration file for number of children processes? Easy as pie. There are a nearly endless variety of techniques for and variations of genetic algorithms, but all of them rest on this straight forward foundation. We'll look more at those sometime in the future, but for now you know enough to go out and throw together something interesting. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 \"\"\" # Example usage from genetic import * target = 371 p_count = 100 i_length = 6 i_min = 0 i_max = 100 p = population(p_count, i_length, i_min, i_max) fitness_history = [grade(p, target),] for i in range(100): p = evolve(p, target) fitness_history.append(grade(p, target)) for datum in fitness_history: print(datum) \"\"\" from random import randint , random from operator import add def individual ( length , min , max ): 'Create a member of the population.' return [ randint ( min , max ) for x in range ( length ) ] def population ( count , length , min , max ): \"\"\" Create a number of individuals (i.e. a population). count: the number of individuals in the population length: the number of values per individual min: the minimum possible value in an individual's list of values max: the maximum possible value in an individual's list of values \"\"\" return [ individual ( length , min , max ) for x in xrange ( count ) ] def fitness ( individual , target ): \"\"\" Determine the fitness of an individual. Higher is better. individual: the individual to evaluate target: the target number individuals are aiming for \"\"\" sum = reduce ( add , individual , 0 ) return abs ( target - sum ) def grade ( pop , target ): 'Find average fitness for a population.' summed = reduce ( add , ( fitness ( x , target ) for x in pop )) return summed / ( len ( pop ) * 1.0 ) def evolve ( pop , target , retain = 0.2 , random_select = 0.05 , mutate = 0.01 ): graded = [ ( fitness ( x , target ), x ) for x in pop ] graded = [ x [ 1 ] for x in sorted ( graded )] retain_length = int ( len ( graded ) * retain ) parents = graded [: retain_length ] # randomly add other individuals to # promote genetic diversity for individual in graded [ retain_length :]: if random_select > random (): parents . append ( individual ) # mutate some individuals for individual in parents : if mutate > random (): pos_to_mutate = randint ( 0 , len ( individual ) - 1 ) # this mutation is not ideal, because it # restricts the range of possible values, # but the function is unaware of the min/max # values used to create the individuals, individual [ pos_to_mutate ] = randint ( min ( individual ), max ( individual )) # crossover parents to create children parents_length = len ( parents ) desired_length = len ( pop ) - parents_length children = [] while len ( children ) < desired_length : male = randint ( 0 , parents_length - 1 ) female = randint ( 0 , parents_length - 1 ) if male != female : male = parents [ male ] female = parents [ female ] half = len ( male ) / 2 child = male [: half ] + female [ half :] children . append ( child ) parents . extend ( children ) return parents 在 Ubuntu 安裝 numpy 與 scipy for python3, 但 scipy 無法運作 sudo apt-get install python3-numpy python3-scipy 必須先安裝下列程式庫 install python development packages and g++ apt-get install -y python3-dev g++ install dependencies for scipy apt-get install -y libblas-dev liblapack-dev gfortran 然後再 sudo -H pip3 install scipy 以下則為 binary coded Genetic Algorithm in Python3: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 #encoding=utf8 # genetic.py # import random import operator # for Intersect from math import * MAXIMIZE , MINIMIZE = 11 , 22 class Individual : # 染色體先設為 None chromosome = None # 得分也先設為 None score = None # Here the size of var depends on var_number print # var 變數的元素個數取決於 var_number 的個數 (即變數個數) var = [] # 表示適應值變數個數有兩個 var_number = 2 #先將 var 數列中元素都設為 0 for i in range ( var_number ): var . append ( 0 ) # 等位基因表示各基因可選的內容, 這裡表示不是 0 就是 1 alleles = ( 0 , 1 ) # 2**10 = 32*32 = 1024, 表示若用十個 binary 位數來表示整數, 可以表示從 0 到 1023 的數值大小 # 若也用另外 十個 binary 位數來表示小數值, 則也是 0 到 1023 的數值表示能力, # 而再加一個表示正負的代表 binary 位數, 每一個變數需要 21 個 binary numbers # 以下為參數可負數時的編碼考量 #前10為小數,後10為整數,第21則為正負號 #0~9表示小數,10~19表示整數,而指標第20則表示第一數的正號或負號,若為0則表示正,若為1表示負號. #21~30表示第二數的小數部分,31~40則表示第二數的整數部分,第41指標則表示第二數的正號或負號 #42~51表示第三數的小數部分,52~61則表示第二數的整數部分,第62指標則表示第三數的正號或負號 # -1023 ~ 1023 #length = 21*var_number,若接受負數參數,則必須同步修改 20->21 # 因為這裡只接受正的變數值, 所以每一個變數需要 20 個 binary 位數 length = 20 * var_number seperator = '' optimization = MINIMIZE def __init__ ( self , chromosome = None ): self . chromosome = chromosome or self . _makechromosome () self . score = None # set during evaluation ''' bitwise operators (binary left shift): The left operands value is moved left by the number of bits specified by the right operand. x << y Returns x with the bits shifted to the left by y places (and new bits on the right-hand-side are zeros). This is the same as multiplying x by 2**y. ''' # 根據染色體各位元的值轉為 10 進位值 def _getvar ( self , chromosome = None ): # x 起始值設為 0 x = 0 for i in range ( 0 , self . var_number ): # 先根據前 20 個位元值, 透過 binary left shift 轉為 10 進位之後, 再轉為對應小數 for j in range ( i * 20 , i * 20 + 10 ): x += self . chromosome [ j ] << ( j - ( i * 20 )) # 因為前 20 個 binary 數, 負責 10 進位數的小數點後 3 個位數, 只要轉為 10 進位值之後, 若大於 999, 則僅取 999, # 再除以 1000, 可以得到 .999 表示 .999 為最大的小數表示數, 不要因為大於 1000 後若除以 1000 將進位到整數, 會與整數有交互影響 if ( x > 999 ): x = 999 x /= 1000. # 整數部份 0 ~ 1023 的表示範圍則沒有問題, 利用 bitwise 轉換後, 直接取整數值 for j in range ( i * 20 + 10 , i * 20 + 20 ): x += self . chromosome [ j ] << ( j - ( i * 20 + 10 )) self . var [ i ] = x return self . var ''' for -1023 ~ 1023,當設計變數可以接受負值時使用,每一變數使用21個 bit strings #for design variable -1023 ~1023 for i in range(self.var_number): x = 0 for j in range(i*21, i*21+10): x += self.chromosome[j]<<(j-(i*21)) if (x>999): x = 999 x /= 1000. for j in range(i*(21)+10, i*(21)+20): x += self.chromosome[j]<<(j-(i*21+10)) # 各變數範圍第 21 位數若為 1, 則表示該數為負數 if(self.chromosome[i*(21)+20] == 1): self.var[i] = -x else: self.var[i] = x # 讓 x 再設回原值 0 表示內定各變數為正數 x = 0 return self.var ''' # 建立染色體 def _makechromosome ( self ): \"makes a chromosome from randomly selected alleles.\" return [ random . choice ( self . alleles ) for gene in range ( self . length )] # 計算適應值 def evaluate ( self , optimum = None ): \"this method MUST be overridden to evaluate individual fitness score.\" pass # 交配方法 def crossover ( self , other ): \"override this method to use your preferred crossover method.\" return self . _twopoint ( other ) # 突變方法 def mutate ( self , gene ): \"override this method to use your preferred mutation method.\" self . _pick ( gene ) # sample mutation method def _pick ( self , gene ): \"chooses a random allele to replace this gene's allele.\" self . chromosome [ gene ] = random . choice ( self . alleles ) # sample crossover method def _twopoint ( self , other ): \"creates offspring via two-point crossover between mates.\" left , right = self . _pickpivots () def mate ( p0 , p1 ): chromosome = p0 . chromosome [:] # 交配時,以p0的基因為基礎(複製整個 p0 的染色體內容 chromosome [ left : right ] = p1 . chromosome [ left : right ] # 接續上一個 p0 的染色體內容,將索引 left 至 right 的內容,替換成 p1 的基因 child = p0 . __class__ ( chromosome ) child . _repair ( p0 , p1 ) return child return mate ( self , other ), mate ( other , self ) # some crossover helpers ... def _repair ( self , parent1 , parent2 ): \"override this method, if necessary, to fix duplicated genes.\" pass def _pickpivots ( self ): left = random . randrange ( 1 , self . length - 2 ) right = random . randrange ( left , self . length - 1 ) return left , right # # other methods # def __repr__ ( self ): \"returns string representation of self\" ''' return '<%s chromosome=\"%s\" score=%s var=%s>' % \\ (self.__class__.__name__, self.seperator.join(map(str,self.chromosome)), self.score,self._getvar(self.chromosome)) ''' return '< %s score= %s var= %s >' % \\ ( self . __class__ . __name__ , self . score , self . _getvar ( self . chromosome )) # since the __cmp__ special function is gone use the __lt__ in stead # use the expression (a > b) - (a < b) as the equivalent for cmp(a, b) #def __cmp__(self, other): # these are for python 3 def __cmp__ ( self , other ): if self . optimization == MINIMIZE : #return cmp(self.score, other.score) return ( self . score > other . score ) - ( self . score < other . score ) else : # MAXIMIZE #return cmp(other.score, self.score) return ( other . score > self . score ) - ( other . score < self . score ) def __lt__ ( self , other ): return self . __cmp__ ( other ) < 0 def __le__ ( self , other ): return self . __cmp__ ( other ) <= 0 def __gt__ ( self , other ): return self . __cmp__ ( other ) > 0 def __ge__ ( self , other ): return self . __cmp__ ( other ) >= 0 def copy ( self ): twin = self . __class__ ( self . chromosome [:]) twin . score = self . score return twin class Environment ( object ): x = [ 0 ] y = [ 0 ] def __init__ ( self , kind , population = None , size = 100 , maxgenerations = 100 , crossover_rate = 0.90 , mutation_rate = 0.07 , optimum = None ): self . kind = kind self . size = size self . optimum = optimum self . population = population or self . _makepopulation () for individual in self . population : individual . evaluate ( self . optimum ) self . crossover_rate = crossover_rate self . mutation_rate = mutation_rate self . maxgenerations = maxgenerations self . generation = 0 self . report () def _makepopulation ( self ): return [ self . kind () for individual in range ( self . size )] def run ( self ): while not self . _goal (): self . step () def _goal ( self ): return self . generation > self . maxgenerations or \\ self . best . score == self . optimum def step ( self ): # this sort is not working with python 3.0, modification is needed self . population . sort () self . _crossover () self . generation += 1 self . report () self . x . append ( self . generation ) # 設定為只附加所選定範圍的值,這裡只取大於或等於 0 的 score 值 if self . best . score <= 5 : self . y . append ( self . best . score ) else : self . y . append ( 5 ) def _crossover ( self ): next_population = [ self . best . copy ()] while len ( next_population ) < self . size : mate1 = self . _select () if random . random () < self . crossover_rate : mate2 = self . _select () offspring = mate1 . crossover ( mate2 ) else : offspring = [ mate1 . copy ()] for individual in offspring : self . _mutate ( individual ) individual . evaluate ( self . optimum ) next_population . append ( individual ) self . population = next_population [: self . size ] def _select ( self ): \"override this to use your preferred selection method\" return self . _tournament () def _mutate ( self , individual ): for gene in range ( individual . length ): if random . random () < self . mutation_rate : individual . mutate ( gene ) # # sample selection method # def _tournament ( self , size = 8 , choosebest = 0.90 ): competitors = [ random . choice ( self . population ) for i in range ( size )] competitors . sort () if random . random () < choosebest : return competitors [ 0 ] else : return random . choice ( competitors [ 1 :]) def best (): doc = \"individual with best fitness score in population.\" def fget ( self ): return self . population [ 0 ] return locals () best = property ( ** best ()) def report ( self ): ''' print (\"=\"*70) print (\"generation: \", self.generation) print (\"best: \", self.best) ''' g . es ( \"=\" * 70 ) g . es ( \"generation: \" , self . generation ) g . es ( \"best: \" , self . best ) # 以上為 genetic.py 目前將兩者結合在一起 #encoding=utf8 # volume.py - useage example # # the fittest individual will have a chromosome consisting of 40 '1's # # #import genetic class Volume ( Individual ): optimization = MAXIMIZE def evaluate ( self , optimum = None ): SURFACE = 80 # self.score is the fitness value self . _getvar ( self . chromosome ) x = self . var [ 0 ] y = self . var [ 1 ] z = ( SURFACE - x * y ) / ( 2. * ( x + y )) fitness_value = x * y * z self . score = fitness_value def mutate ( self , gene ): self . chromosome [ gene ] = not self . chromosome [ gene ] # bit flip class Intersect ( Individual ): optimization = MINIMIZE def evaluate ( self , optimum = None ): # self.score is the fitness value self . _getvar ( self . chromosome ) t = self . var [ 0 ] deg = pi / 180 theta = self . var [ 1 ] * deg xtarget = 0.75 / 2 ytarget = 0.5 x = t * sqrt ( - 225 * sin ( theta ) ** 2 + 529 ) / 10 - sqrt ( - 225 * sin ( theta ) ** 2 + 529 ) / 92 + 3 * cos ( theta ) / 2 y = ( - 3 * t / 2 + 123 / 92 ) * sin ( theta ) # 適應值 fitness_value = pow ( x - xtarget , 8 ) + pow ( y - ytarget , 8 ) # 指定 t 的範圍, 小於 1 大於 0, 否則給予處罰 if t > 1 : fitness_value += 1000 if t < 0 : fitness_value += 1000 # 指定 theta 的範圍, 小於 2pi 大於 0, 否則給予處罰 if theta > 2 * pi : fitness_value += 1000 if theta < 0 : fitness_value += 1000 self . score = fitness_value def mutate ( self , gene ): self . chromosome [ gene ] = not self . chromosome [ gene ] # bit flip if __name__ == \"__main__\" : #env = Environment(Volume, size=500, maxgenerations=100) env = Environment ( Intersect , size = 500 , maxgenerations = 100 ) env . run () ~~~python"},{"tags":"Project","title":"Leo Editor 安裝","url":"http://chiamingyen.github.io/kmolab/blog/leo-editor-an-zhuang.html","text":"Leo Editor 的執行需要 Python3, PyQt 與 Leo Editor 程式碼 Leo Editor 安裝 Windows: 安裝 Python3: https://www.python.org/downloads/ 安裝 PyQt: https://www.riverbankcomputing.com/software/pyqt/download 取得 Leo Editor 程式碼: https://github.com/leo-editor/leo-editor 啟動程式 (launchLeo.py 檔案): 1 2 3 4 5 6 7 8 9 #!Y:\\IDE\\Python33\\python.exe # launchLeo \"\"\" Leo launcher script A minimal script to launch leo. \"\"\" import leo.core.runLeo leo . core . runLeo . run () python.exe launchLeo.py Ubuntu: 先解除舊版的 Leo Editor: sudo pip3 uninstall leo 再安裝最新版 Leo Editor: sudo pip3 install https://github.com/leo-editor/leo-editor/archive/master.zip 啟動: leo& Leo 程式方法 1 g . es ( 'Hello World!' ) 利用 Ctrl+b 執行 內建變數: c, g 與 p c 是包含程式碼內容的命令變數 (commander) c 命令變數是定義在 leoCommands.py 中的指令類別案例, 透過 c 可以擷取 Leo 的原始碼與所有大綱資料. g 變數則是 Leo 的 leo.core.leoGlobals 模組. c: The commander of the present outline. g: The leo.core.leoGlobals module. p: The presently selected position, c.p. g.es 是 Leo 的列印函式 (echo string). p 則是定義在 leoNodes.py 中表示目前所選擇節點的位置類別所建立的案例. p.v 則是 vnode 物件, vnode 是在 Leo 大綱中包含所有永久資料. vnodes 是定義在 leoNodes.py 中由 vnode 類別所建立的案例. 每一個 vnode 代表所在大綱節點的所有資料. 1 2 for p in c . all_positions (): print ( ' ' * p . level () + p . h )"},{"tags":"Project","title":"Brython 平面齒輪動態模擬","url":"http://chiamingyen.github.io/kmolab/blog/brython-ping-mian-chi-lun-dong-tai-mo-ni.html","text":"利用 Brython 模擬平面齒輪旋轉. window.onload=function(){ brython(1); } Bezier 曲線與滑鼠: from browser import window from javascript import JSConstructor cango = JSConstructor(window.Cango2D) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea\") x1, y1 = 40, 20 cx1, cy1 = 90, 120 x2, y2 = 120, 100 cx2, cy2 = 130, 20 cx3, cy3 = 150, 120 x3, y3 = 180, 60 def dragC1(mousePos): global cx1, cy1 cx1 = mousePos.x cy1 = mousePos.y drawCurve() def dragC2(mousePos): global cx2, cy2 cx2 = mousePos.x cy2 = mousePos.y drawCurve() def dragC3(mousePos): global cx3, cy3 cx3 = mousePos.x cy3 = mousePos.y drawCurve() def drawCurve(): # curve change shape so it must be re-draw each time # draw a quadratic bezier from x1,y2 to x2,y2 qbez = obj2d(['M', x1, y1, 'Q', cx1, cy1, x2, y2], \"PATH\", { \"strokeColor\":'blue'}) cbez = obj2d(['M', x2, y2, 'C', cx2, cy2, cx3, cy3, x3, y3], \"PATH\", { \"strokeColor\":'green'}) # show lines to control point L1 = obj2d(['M', x1, y1, 'L', cx1, cy1, x2, y2], \"PATH\", { \"strokeColor\":\"rgba(0, 0, 0, 0.2)\", \"dashed\":[4]}) # semi-transparent gray L2 = obj2d(['M', x2, y2, 'L', cx2, cy2], \"PATH\", { \"strokeColor\":\"rgba(0, 0, 0, 0.2)\", \"dashed\":[4]}) L3 = obj2d(['M', x3, y3, 'L', cx3, cy3], \"PATH\", { \"strokeColor\":\"rgba(0, 0, 0, 0.2)\", \"dashed\":[4]}) # draw draggable control pointsCangoAnimation-3v01.js c1.transform.reset() c1.transform.translate(cx1, cy1) c2.transform.reset() c2.transform.translate(cx2, cy2) c3.transform.reset() c3.transform.translate(cx3, cy3) grp = cgo.createGroup2D(qbez, cbez, L1, L2, L3, c1, c2, c3) cgo.renderFrame(grp) cgo.clearCanvas(\"lightyellow\") cgo.setWorldCoords(0, 0, 200) # draggable control points c1 = obj2d(shapedefs.circle(4), \"SHAPE\", {\"fillColor\":'red'}) c1.enableDrag(None, dragC1, None) c2 = c1.dup() c2.enableDrag(None, dragC2, None) c3 = c1.dup() c3.enableDrag(None, dragC3, None) drawCurve(); 使用 Cango 畫齒輪輪廓: # 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容 from browser import document as doc # 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換 from browser import window # 針對 Javascript 既有的物件, 則必須透過 JSConstructor 轉換 from javascript import JSConstructor import math # 主要用來取得畫布大小 canvas = doc[\"gear1\"] # 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx #ctx = canvas.getContext(\"2d\") # 針對類別的轉換, 將 Cango.js 中的 Cango 物件轉為 Python cango 物件 cango = JSConstructor(window.Cango) # 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換 shapedefs = window.shapeDefs # 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形 # in CangoAnimation.js #interpolate1 = window.interpolate # Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件 cobj = JSConstructor(window.Cobj) creategeartooth = JSConstructor(window.createGearTooth) # 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id=\"gear1\" 的 canvas 上 cgo = cango(\"gear1\") ###################################### # 畫正齒輪輪廓 ##################################### # n 為齒數 n = 17 # pa 為壓力角 pa = 25 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth m = 0.8*canvas.width/n # pr 為節圓半徑 pr = n*m/2 # gear Pitch radius # generate gear data = creategeartooth(m, n, pa) # Brython 程式中的 print 會將資料印在 Browser 的 console 區 #print(data) ''' data 印出來為: M 代表 Move to, L 代表 Line to, C 代表 Curve to 參考: https://www.w3.org/TR/SVG11/paths.html 齒輪函式庫: http://cadlab.mde.tw/post/js/gearUtils.js ['M', 213.42546567394663, -26.249132721692735, 'L', 216.4771485764625, -26.59457489332413, 'C', 218.01364355836117, -26.670135871173535, 222.6241377296874, -26.675359459917235, 230.33407980945245, -24.786115738049222, 239.516053270179, -22.484881644156854, 252.57720520079252, -17.521220042103984, 268.1953141424361, -6.908892817203213, 'A', 268.2352941176471, 268.2352941176471, 0, 0, 1, 268.1953141424361, 6.908892817203213, 'C', 252.57720520079252, 17.521220042103984, 239.516053270179, 22.484881644156854, 230.33407980945245, 24.786115738049222, 222.6241377296874, 26.675359459917235, 218.01364355836117, 26.670135871173535, 216.4771485764625, 26.59457489332413, 'L', 213.42546567394663, 26.249132721692735, 'A', 10.588235294117652, 10.588235294117652, 0, 0, 0, 201.7022692356982, 34.938415176795026, 'A', 204.70588235294116, 204.70588235294116, 0, 0, 1, 200.70297598253308, 40.28416192067229, 'A', 10.588235294117652, 10.588235294117652, 0, 0, 0, 208.49560022899982, 52.62158351789785] ''' gearTooth = cobj(data, \"SHAPE\", { \"fillColor\":\"#ddd0dd\", \"border\": True, \"strokeColor\": \"#606060\" }) gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中 gear = gearTooth.dup() # gear 為單一齒的輪廓資料 #cgo.render(gearTooth) # 利用單齒輪廓旋轉, 產生整個正齒輪外形 for i in range(1, n): # 將 gearTooth 中的資料複製到 newTooth newTooth = gearTooth.dup() # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear newTooth.rotate(360*i/n) # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號 gear.appendPath(newTooth, True) # trim move command = True # 建立軸孔 # add axle hole, hr 為 hole radius hr = 0.6*pr # diameter of gear shaft shaft = cobj(shapedefs.circle(hr), \"PATH\") shaft.revWinding() gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path cx = canvas.width/2 cy = canvas.height/2 gear.translate(cx, cy) # render 繪出靜態正齒輪輪廓 cgo.render(gear) ''' def initGear(opts): timeline.nextState.x = opts.cx timeline.nextState.y = opts.cy # 進行動態模擬 cgo.animate(gear, initGear, interpolate1, {\"cx\":canvas.width/2, \"cy\":canvas.height/2, \"rot\":[0, 360], \"duration\": 90000, # 0.666 rpm \"loop\": 'loop'}) ''' 以下為四連桿模擬: #要注意 javascript 轉 python 語法差異 #document.getElementById -> document[] #module Math -> math #Math.PI -> math.pi #abs -> fabs #array 可用 list代替 import math import time from browser import document as doc from browser import timer class Coord(object): def __init__(self,x,y): self.x = x self.y = y def __sub__(self,other): # This allows you to substract vectors return Coord(self.x-other.x,self.y-other.y) def __repr__(self): # Used to get human readable coordinates when printing return \"Coord(%f,%f)\"%(self.x,self.y) def length(self): # Returns the length of the vector return math.sqrt(self.x**2 + self.y**2) def angle(self): # Returns the vector's angle return math.atan2(self.y,self.x) def normalize(coord): return Coord( coord.x/coord.length(), coord.y/coord.length() ) def perpendicular(coord): # Shifts the angle by pi/2 and calculate the coordinates # using the original vector length return Coord( coord.length()*math.cos(coord.angle()+math.pi/2), coord.length()*math.sin(coord.angle()+math.pi/2) ) # 點類別 class Point(object): # 起始方法 def __init__(self, x, y): self.x = x self.y = y # 繪製方法 def drawMe(self, g, r): self.g = g self.r = r self.g.save() self.g.moveTo(self.x,self.y) self.g.beginPath() # 根據 r 半徑繪製一個圓代表點的所在位置 self.g.arc(self.x, self.y, self.r, 0, 2*math.pi, True) self.g.moveTo(self.x,self.y) self.g.lineTo(self.x+self.r, self.y) self.g.moveTo(self.x, self.y) self.g.lineTo(self.x-self.r, self.y) self.g.moveTo(self.x, self.y) self.g.lineTo(self.x, self.y+self.r) self.g.moveTo(self.x, self.y) self.g.lineTo(self.x, self.y-self.r) self.g.restore() self.g.stroke() # 加入 Eq 方法 def Eq(self, pt): self.x = pt.x self.y = pt.y # 加入 setPoint 方法 def setPoint(self, px, py): self.x = px self.y = py # 加上 distance(pt) 方法, 計算點到 pt 的距離 def distance(self, pt): self.pt = pt x = self.x - self.pt.x y = self.y - self.pt.y return math.sqrt(x * x + y * y) # 利用文字標示點的座標位置 def tag(self, g): self.g = g self.g.beginPath() self.g.fillText(\"%d, %d\"%(self.x, self.y),self.x, self.y) self.g.stroke() # Line 類別物件 class Line(object): # 起始方法 def __init__(self, p1, p2): self.p1 = p1 self.p2 = p2 # 直線的第一點, 設為線尾 self.Tail = self.p1 # 直線組成的第二點, 設為線頭 self.Head = self.p2 # 直線的長度屬性 self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2)) # setPP 以指定頭尾座標點來定義直線 def setPP(self, p1, p2): self.p1 = p1 self.p2 = p2 self.Tail = self.p1 self.Head = self.p2 self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2)) # setRT 方法 for Line, 應該已經確定 Tail 點, 然後以 r, t 作為設定 Head 的參考 def setRT(self, r, t): self.r = r self.t = t x = self.r * math.cos(self.t) y = self.r * math.sin(self.t) self.Tail.Eq(self.p1) self.Head.setPoint(self.Tail.x + x,self.Tail.y + y) # getR 方法 for Line def getR(self): # x 分量與 y 分量 x = self.p1.x - self.p2.x y = self.p1.y - self.p2.y return math.sqrt(x * x + y * y) # 根據定義 atan2(y,x), 表示 (x,y) 與 正 x 軸之間的夾角, 介於 pi 與 -pi 間 def getT(self): x = self.p2.x - self.p1.x y = self.p2.y - self.p1.y if (math.fabs(x) < math.pow(10,-100)): if(y < 0.0): return (-math.pi/2) else: return (math.pi/2) else: return math.atan2(y, x) # setTail 方法 for Line def setTail(self, pt): self.pt = pt self.Tail.Eq(pt) self.Head.setPoint(self.pt.x + self.x, self.pt.y + self.y) # getHead 方法 for Line def getHead(self): return self.Head def getTail(self): return self.Tail def drawMe(self, g): self.g = g self.g.beginPath() self.g.moveTo(self.p1.x,self.p1.y) self.g.lineTo(self.p2.x,self.p2.y) self.g.stroke() def test(self): return (\"this is pure test to Inherit\") class Link(Line): def __init__(self, p1, p2): self.p1 = p1 self.p2 = p2 self.length = math.sqrt(math.pow((self.p2.x - self.p1.x), 2) + math.pow((self.p2.y - self.p1.y), 2)) #g context def drawMe(self, g): self.g = g hole = 5 radius = 10 length = self.getR() # alert(length) # 儲存先前的繪圖狀態 self.g.save() self.g.translate(self.p1.x,self.p1.y) #alert(str(self.p1.x)+\",\"+str(self.p1.y)) #self.g.rotate(-((math.pi/2)-self.getT())) self.g.rotate(-math.pi*0.5 + self.getT()) #alert(str(self.getT())) #self.g.rotate(10*math.pi/180) #this.g.rotate(-(Math.PI/2-this.getT())); # 必須配合畫在 y 軸上的 Link, 進行座標轉換, 也可以改為畫在 x 軸上... self.g.beginPath() self.g.moveTo(0,0) self.g.arc(0, 0, hole, 0, 2*math.pi, True) self.g.stroke() self.g.moveTo(0,length) self.g.beginPath() self.g.arc(0,length, hole, 0, 2*math.pi, True) self.g.stroke() self.g.moveTo(0,0) self.g.beginPath() self.g.arc(0,0, radius, 0, math.pi, True) self.g.moveTo(0+radius,0) self.g.lineTo(0+radius,0+length) self.g.stroke() self.g.moveTo(0,0+length) self.g.beginPath() self.g.arc(0, 0+length, radius, math.pi, 0, True) self.g.moveTo(0-radius,0+length) self.g.lineTo(0-radius,0) self.g.stroke() self.g.restore() self.g.beginPath() self.g.fillStyle = \"red\" self.g.font = \"bold 18px sans-serif\" self.g.fillText(\"%d, %d\"%(self.p2.x, self.p2.y),self.p2.x, self.p2.y) self.g.stroke() self.g.restore() class Triangle(object): def __init__(self, p1, p2, p3): self.p1 = p1 self.p2 = p2 self.p3 = p3 def getLenp3(self): p1 = self.p1 ret = p1.distance(self.p2) return ret def getLenp1(self): p2 = self.p2 ret = p2.distance(self.p3) return ret def getLenp2(self): p1 = self.p1 ret = p1.distance(self.p3) return ret # 角度 def getAp1(self): ret = math.acos(((self.getLenp2() * self.getLenp2() + self.getLenp3() * self.getLenp3()) - self.getLenp1() * self.getLenp1()) / (2* self.getLenp2() * self.getLenp3())) return ret # def getAp2(self): ret =math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp3() * self.getLenp3()) - self.getLenp2() * self.getLenp2()) / (2* self.getLenp1() * self.getLenp3())) return ret def getAp3(self): ret = math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp2() * self.getLenp2()) - self.getLenp3() * self.getLenp3()) / (2* self.getLenp1() * self.getLenp2())) return ret def drawMe(self, g): self.g = g r = 5 # 繪出三個頂點 self.p1.drawMe(self.g,r) self.p2.drawMe(self.g,r) self.p3.drawMe(self.g,r) line1 = Line(self.p1,self.p2) line2 = Line(self.p1,self.p3) line3 = Line(self.p2,self.p3) # 繪出三邊線 line1.drawMe(self.g) line2.drawMe(self.g) line3.drawMe(self.g) # ends Triangle def # 透過三個邊長定義三角形 def setSSS(self, lenp3, lenp1, lenp2): self.lenp3 = lenp3 self.lenp1 = lenp1 self.lenp2 = lenp2 self.ap1 = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2* self.lenp2 * self.lenp3)) self.ap2 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2* self.lenp1 * self.lenp3)) self.ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2* self.lenp1 * self.lenp2)) # 透過兩個邊長與夾角定義三角形 def setSAS(self, lenp3, ap2, lenp1): self.lenp3 = lenp3 self.ap2 = ap2 self.lenp1 = lenp1 self.lenp2 = math.sqrt((self.lenp3 * self.lenp3 + self.lenp1 * self.lenp1) - 2* self.lenp3 * self.lenp1 * math.cos(self.ap2)) #等於 SSS(AB, BC, CA) def setSaSS(self, lenp2, lenp3, lenp1): self.lenp2 = lenp2 self.lenp3 = lenp3 self.lenp1 = lenp1 if(self.lenp1 > (self.lenp2 + self.lenp3)): #<CAB 夾角為 180 度, 三點共線且 A 介於 BC 之間 ret = math.pi else : # <CAB 夾角為 0, 三點共線且 A 不在 BC 之間 if((self.lenp1 < (self.lenp2 - self.lenp3)) or (self.lenp1 < (self.lenp3 - self.lenp2))): ret = 0.0 else : # 透過餘絃定理求出夾角 <CAB ret = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2 * self.lenp2 * self.lenp3)) return ret # 取得三角形的三個邊長值 def getSSS(self): temp = [] temp.append( self.getLenp1() ) temp.append( self.getLenp2() ) temp.append( self.getLenp3() ) return temp # 取得三角形的三個角度值 def getAAA(self): temp = [] temp.append( self.getAp1() ) temp.append( self.getAp2() ) temp.append( self.getAp3() ) return temp # 取得三角形的三個角度與三個邊長 def getASASAS(self): temp = [] temp.append(self.getAp1()) temp.append(self.getLenp1()) temp.append(self.getAp2()) temp.append(self.getLenp2()) temp.append(self.getAp3()) temp.append(self.getLenp3()) return temp #2P 2L return mid P def setPPSS(self, p1, p3, lenp1, lenp3): temp = [] self.p1 = p1 self.p3 = p3 self.lenp1 = lenp1 self.lenp3 = lenp3 #bp3 is the angle beside p3 point, cp3 is the angle for line23, p2 is the output line31 = Line(p3, p1) self.lenp2 = line31.getR() #self.lenp2 = self.p3.distance(self.p1) #這裡是求角3 ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2 * self.lenp1 * self.lenp2)) #ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2 * self.lenp1 * self.lenp3)) bp3 = line31.getT() cp3 = bp3 - ap3 temp.append(p3.x + self.lenp1*math.cos(cp3))#p2.x temp.append(p3.y + self.lenp1*math.sin(cp3))#p2.y return temp def tag(g, p): None midpt = Point(0, 0) tippt = Point(0, 0) contour = [] # 執行繪圖流程, 注意 x, y 為 global variables def draw(): global theta, midpt, oldpt context.clearRect(0, 0, canvas.width, canvas.height) line1.drawMe(context) line2.drawMe(context) line3.drawMe(context) #triangle1.drawMe(context) #triangle2.drawMe(context) theta += dx p2.x = p1.x + line1.length*math.cos(theta*degree) p2.y = p1.y - line1.length*math.sin(theta*degree) p3.x, p3.y = triangle2.setPPSS(p2,p4,link2_len,link3_len) # 計算垂直單位向量 a = Coord(p3.x, p3.y) b = Coord(p2.x, p2.y) normal = perpendicular(normalize(a-b)) midpt.x = (p2.x + p3.x)/2 midpt.y = (p2.y + p3.y)/2 tippt.x = midpt.x + 150*normal.x tippt.y = midpt.y + 150*normal.y if theta < 360: contour.append((tippt.x, tippt.y)) context.beginPath() context.moveTo(midpt.x, midpt.y) context.lineTo(tippt.x, tippt.y) # 利用 fillRect 繪製一個長寬各 1 單位的正方形 for i in range(len(contour)): context.fillRect(contour[i][0], contour[i][1], 1, 1) context.stroke() p1.tag(context) # 以上為相關函式物件的定義區 # 全域變數 # 幾何位置輸入變數 x=10 y=10 r=10 # 畫布與繪圖內容 # 其他輸入變數 theta = 0 degree = math.pi/180.0 dx = 2 dy = 4 #set p1.p2.p3.p4 position p1 = Point(150,100) p2 = Point(150,200) p3 = Point(300,300) p4 = Point(350,100) #accord position create link line1 = Link(p1,p2) line2 = Link(p2,p3) line3 = Link(p3,p4) line4 = Link(p1,p4) line5 = Link(p2,p4) link2_len = p2.distance(p3) link3_len = p3.distance(p4) #link2_len = line1.getR() #link3_len = line3.getR() #alert(str(link2_len)+','+str(link3_len)) triangle1 = Triangle(p1,p2,p4) triangle2 = Triangle(p2,p3,p4) # 視窗載入時執行內容 # 繪圖畫布設定 canvas = doc[\"fourbar\"] context = canvas.getContext(\"2d\") # 座標轉換, 移動 canvas.height 並且 y 座標變號, 也就是將原點座標移到畫面左下角 context.translate(0,canvas.height) context.scale(1,-1) #以間隔 10 micro seconds 重複呼叫 draw() #time.set_interval(draw,20) timer.set_interval(draw,10)"},{"tags":"Project","title":"機械設計工程師的設計模擬與實作","url":"http://chiamingyen.github.io/kmolab/blog/ji-jie-she-ji-gong-cheng-shi-de-she-ji-mo-ni-yu-shi-zuo.html","text":"先利用 Brython 模擬重力啟動機械時鐘所需的齒輪組, 然後在 Onshape 進行零組件設計繪圖, 最後再用 3D 印表機將零件印出並組裝測試. 先以 Brython 畫一個時鐘: window.onload=function(){ brython(1); } # 導入 browser 模組中的 document, 並設為 doc 變數 from browser import document as doc # 導入數學模組 import math # 導入 datetime 模組 import datetime # 導入 browser 中的計時器, 建立動畫用 import browser.timer # 準備繪圖畫布 canvas = doc[\"plotarea\"] ctx = canvas.getContext(\"2d\") # 利用畫布高度計算時鐘半徑 radius = canvas.height / 2 # 座標移到畫布正中心 ctx.translate(radius, radius) # 實際繪圓的半徑縮小 10% radius = radius * 0.90 # 設計繪時鐘的函式 def drawClock(): # 繪鐘表面 drawFace(ctx, radius) # 繪數字 drawNumbers(ctx, radius) # 繪時針分針與秒針 drawTime(ctx, radius) # 設計繪時鐘表面函式 def drawFace(ctx, radius): # 這裡先全部以白色覆蓋表面範圍 ctx.beginPath() ctx.arc(0, 0, radius, 0, 2*math.pi) ctx.fillStyle = 'white' ctx.fill() # 利用漸層色繪製時鐘表面外框 grad = ctx.createRadialGradient(0,0,radius*0.95, 0,0,radius*1.05) grad.addColorStop(0, '#333') grad.addColorStop(0.5, 'white') grad.addColorStop(1, '#333') ctx.strokeStyle = grad ctx.lineWidth = radius*0.1 ctx.stroke() # 至此完成漸層色外框繪圖 # 以下繪製正中心的 10% 半徑小黑點 ctx.beginPath() ctx.arc(0, 0, radius*0.1, 0, 2*math.pi) ctx.fillStyle = '#333' ctx.fill() # 設計繪製數字函式 def drawNumbers(ctx, radius): # 以半徑的比例決定字元大小, 計算符點數後, 轉為整數後, 再轉為字串 ctx.font = str(int(radius*0.15)) + \"px arial\" ctx.textBaseline=\"middle\" ctx.textAlign=\"center\" for num in range(1, 13): ang = num * math.pi / 6 ctx.rotate(ang) ctx.translate(0, -radius*0.85) ctx.rotate(-ang) ctx.fillText(str(num), 0, 0) ctx.rotate(ang) ctx.translate(0, radius*0.85) ctx.rotate(-ang) def drawTime(ctx, radius): now = datetime.datetime.now() # 一小時有 60 分鐘, 有 3600 秒, #一小時的角度單位為 360/12, 且度為 math.pi/180 #所以 hour 的時數必須乘上 360/12, 再乘上 math.pi/180, 等於 math.pi/6 hour = (now.hour%12 + now.minute/60 + now.second/3600)*math.pi/6 drawHand(ctx, hour, radius*0.5, radius*0.07) #一分鐘有 60 秒, 且一分鐘的角度單位為 360/60, 且度為 math.pi/180 #所以分鐘數必須乘上 360/60, 再乘上 math.pi/180, 等於 math.pi/30 minute=(now.minute + now.second/60)*math.pi/30 drawHand(ctx, minute, radius*0.8, radius*0.07) #秒鐘與分鐘相同, 秒鐘數必須乘上 math.pi/30 second=(now.second*math.pi/30) drawHand(ctx, second, radius*0.9, radius*0.02) def drawHand(ctx, pos, length, width): ctx.beginPath() ctx.lineWidth = width ctx.lineCap = \"round\" ctx.moveTo(0,0) ctx.rotate(pos) ctx.lineTo(0, -length) ctx.stroke() ctx.rotate(-pos) # 每 1000 個 milliseconds 呼叫執行一次 drawClock 函式 (也就是每秒執行一次) browser.timer.set_interval(drawClock, 1000) 以下為利用 Brython 畫時鐘的程式碼: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 <!-- 導入 Brython 函式庫 --> <script type= \"text/javascript\" src= \"http://brython.info/src/brython_dist.js\" ></script> <!-- window 導入後, 啟動 brython() --> <script> window . onload = function (){ brython ( 1 ); } </script> <!-- 建立畫布 --> <canvas id= \"plotarea\" width= \"400\" height= \"400\" style= \"background-color:#333\" ></canvas> <!-- 開始執行 Brython 繪圖 --> <script type= \"text/python3\" > # 導入 browser 模組中的 document , 並設為 doc 變數 from browser import document as doc # 導入數學模組 import math # 導入 datetime 模組 import datetime # 導入 browser 中的計時器 , 建立動畫用 import browser . timer # 準備繪圖畫布 canvas = doc [ \"plotarea\" ] ctx = canvas . getContext ( \"2d\" ) # 利用畫布高度計算時鐘半徑 radius = canvas . height / 2 # 座標移到畫布正中心 ctx . translate ( radius , radius ) # 實際繪圓的半徑縮小 10 % radius = radius * 0.90 # 設計繪時鐘的函式 def drawClock () : # 繪鐘表面 drawFace ( ctx , radius ) # 繪數字 drawNumbers ( ctx , radius ) # 繪時針分針與秒針 drawTime ( ctx , radius ) # 設計繪時鐘表面函式 def drawFace ( ctx , radius ) : # 這裡先全部以白色覆蓋表面範圍 ctx . beginPath () ctx . arc ( 0 , 0 , radius , 0 , 2 * math . pi ) ctx . fillStyle = 'white' ctx . fill () # 利用漸層色繪製時鐘表面外框 grad = ctx . createRadialGradient ( 0 , 0 , radius * 0.95 , 0 , 0 , radius * 1.05 ) grad . addColorStop ( 0 , '#333' ) grad . addColorStop ( 0.5 , 'white' ) grad . addColorStop ( 1 , '#333' ) ctx . strokeStyle = grad ctx . lineWidth = radius * 0.1 ctx . stroke () # 至此完成漸層色外框繪圖 # 以下繪製正中心的 10 % 半徑小黑點 ctx . beginPath () ctx . arc ( 0 , 0 , radius * 0.1 , 0 , 2 * math . pi ) ctx . fillStyle = '#333' ctx . fill () # 設計繪製數字函式 def drawNumbers ( ctx , radius ) : # 以半徑的比例決定字元大小 , 計算符點數後 , 轉為整數後 , 再轉為字串 ctx . font = str ( int ( radius * 0.15 )) + \"px arial\" ctx . textBaseline = \"middle\" ctx . textAlign = \"center\" for num in range ( 1 , 13 ) : ang = num * math . pi / 6 ctx . rotate ( ang ) ctx . translate ( 0 , - radius * 0.85 ) ctx . rotate ( - ang ) ctx . fillText ( str ( num ), 0 , 0 ) ctx . rotate ( ang ) ctx . translate ( 0 , radius * 0.85 ) ctx . rotate ( - ang ) def drawTime ( ctx , radius ) : now = datetime . datetime . now () # 一小時有 60 分鐘 , 有 3600 秒 , # 一小時的角度單位為 360 / 12 , 且度為 math . pi / 180 # 所以 hour 的時數必須乘上 360 / 12 , 再乘上 math . pi / 180 , 等於 math . pi / 6 hour = ( now . hour % 12 + now . minute / 60 + now . second / 3600 ) * math . pi / 6 drawHand ( ctx , hour , radius * 0.5 , radius * 0.07 ) # 一分鐘有 60 秒 , 且一分鐘的角度單位為 360 / 60 , 且度為 math . pi / 180 # 所以分鐘數必須乘上 360 / 60 , 再乘上 math . pi / 180 , 等於 math . pi / 30 minute = ( now . minute + now . second / 60 ) * math . pi / 30 drawHand ( ctx , minute , radius * 0.8 , radius * 0.07 ) # 秒鐘與分鐘相同 , 秒鐘數必須乘上 math . pi / 30 second = ( now . second * math . pi / 30 ) drawHand ( ctx , second , radius * 0.9 , radius * 0.02 ) def drawHand ( ctx , pos , length , width ) : ctx . beginPath () ctx . lineWidth = width ctx . lineCap = \"round\" ctx . moveTo ( 0 , 0 ) ctx . rotate ( pos ) ctx . lineTo ( 0 , - length ) ctx . stroke () ctx . rotate ( - pos ) # 每 1000 個 milliseconds 呼叫執行一次 drawClock 函式 ( 也就是每秒執行一次 ) browser . timer . set_interval ( drawClock , 1000 ) </script> 在 Jupyter 利用 SVG 繪製正齒輪輪廓: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 # source: https://gist.github.com/gever/8643175 import math import os from IPython.display import SVG import svgwrite # gear parameters outer_d = 500.0 tooth_ht = 40.0 # addendum + dedendum (aka, top land radius - root circle) tooth_ct = 20 face_pct = 0.2 # how much narrower the face pitch is than the circular thickness axle_d = 50 # derived parameters inner_d = outer_d - tooth_ht # colors important to the laser cutter LC_CUT = svgwrite . rgb ( 255 , 0 , 0 ) LC_SCORE = svgwrite . rgb ( 0 , 0 , 255 ) LC_ETCH = svgwrite . rgb ( 0 , 0 , 0 ) LC_NONE = svgwrite . rgb ( 255 , 255 , 255 ) # derived constants outer_circ = outer_d * math . pi outer_r = outer_d / 2.0 inner_r = outer_r - tooth_ht addendum = tooth_ht / 2.0 addendum_r = outer_r - addendum circular_pitch = ( 2.0 * math . pi ) / tooth_ct circular_thickness = circular_pitch / 2.0 theta_face = circular_thickness * face_pct # bevel pitch delta in radians # clear out the contents of the old file, get ready to make a new one filename = 'gear_ %d .svg' % ( tooth_ct ) if os . access ( filename , os . R_OK ): os . remove ( filename ) # start the drawing dwg = svgwrite . Drawing ( filename , profile = 'tiny' ) group = dwg . g () # generate points that describe the gear profile pts = [] for t in range ( tooth_ct ): theta_1 = circular_pitch * t # begining of tooth and gap theta_ct = theta_1 + circular_thickness # circular thickness (of tooth) theta_2 = circular_pitch * ( t + 1 ) # begining of next tooth pts . append ( ( math . cos ( theta_1 ) * addendum_r , math . sin ( theta_1 ) * addendum_r ) ) # begining of face leading up to top land pts . append ( ( math . cos ( theta_1 + theta_face ) * outer_r , math . sin ( theta_1 + theta_face ) * outer_r ) ) # begining of top land pts . append ( ( math . cos ( theta_ct - theta_face ) * outer_r , math . sin ( theta_ct - theta_face ) * outer_r ) ) # end of top land pts . append ( ( math . cos ( theta_ct ) * addendum_r , math . sin ( theta_ct ) * addendum_r ) ) # end of face coming down from top land pts . append ( ( math . cos ( theta_ct ) * inner_r , math . sin ( theta_ct ) * inner_r ) ) # begining of bottom land pts . append ( ( math . cos ( theta_2 ) * inner_r , math . sin ( theta_2 ) * inner_r ) ) # end of bottom land # mark the first tooth if t == 0 : circle = dwg . circle ( center = pts [ 0 ], r = tooth_ht / 4 , stroke = LC_SCORE , fill = LC_NONE ) group . add ( circle ) group . add ( dwg . polygon ( pts , stroke = LC_CUT , fill = LC_NONE ) ) group . translate ( outer_d , outer_d / 2.0 ) # make a hole for the axle # TODO: calculate the number of steps in axle polygon based on circumference of axle a_pts = [] for i in range ( 50 ): t = i * (( math . pi * 2 ) / 50 ) a_pts . append ( ( math . cos ( t ) * axle_d / 2.0 , math . sin ( t ) * axle_d / 2.0 ) ) group . add ( dwg . polygon ( a_pts , stroke = LC_CUT , fill = LC_NONE ) ) dwg . add ( group ) # dwg.add(dwg.text('Test', insert=(0, 0.2), fill='red')) # dwg.save() # show it SVG ( data = dwg . tostring ()) 利用 Brython 繪製漸開線正齒輪輪廓圖: # 導入 browser 模組中的 document, 並設為 doc 變數 from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx, midy, midx, midy-rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(n): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) # 準備在 id=\"gear1\" 的 canvas 中繪圖 canvas = doc[\"gear1\"] ctx = canvas.getContext(\"2d\") x = (canvas.width)/2 y = (canvas.height)/2 r = 0.8*(canvas.width/2) # 齒數 n = 53 # 壓力角 pa = 20 Spur(ctx).Gear(x, y, r, n, pa, \"blue\") 以下為單一正齒輪輪廓繪圖程式碼: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 <!-- 建立正齒輪畫布 --> <canvas id= \"gear1\" width= \"400\" height= \"400\" style= \"background-color:#FFF\" ></canvas> <!-- 開始執行 Brython 繪圖 --> <script type= \"text/python3\" > # 導入 browser 模組中的 document , 並設為 doc 變數 from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math . pi / 180 . # 定義 Spur 類別 class Spur ( object ) : def __init__ ( self , ctx ) : self . ctx = ctx def create_line ( self , x1 , y1 , x2 , y2 , width = 3 , fill = \"red\" ) : self . ctx . beginPath () self . ctx . lineWidth = width self . ctx . moveTo ( x1 , y1 ) self . ctx . lineTo ( x2 , y2 ) self . ctx . strokeStyle = fill self . ctx . stroke () # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑 , n 為齒數 # pa 為壓力角 ( deg ) # rot 為旋轉角 ( deg ) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正 , 因為 base circle 與齒根圓大小必須進行判斷 def Gear ( self , midx , midy , rp , n = 20 , pa = 20 , color = \"black\" ) : # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線 , 由圓心到節圓 y 軸頂點畫一直線 self . create_line ( midx , midy , midx , midy - rp ) # 畫出 rp 圓 , 畫圓函式尚未定義 # create_oval ( midx - rp , midy - rp , midx + rp , midy + rp , width = 2 ) # a 為模數 ( 代表公制中齒的大小 ), 模數為節圓直徑 ( 稱為節徑 ) 除以齒數 # 模數也就是齒冠大小 a = 2 * rp / n # d 為齒根大小 , 為模數的 1.157 或 1.25 倍 , 這裡採 1.25 倍 d = 2.5 * rp / n # ra 為齒輪的外圍半徑 ra = rp + a # 畫出 ra 圓 , 畫圓函式尚未定義 # create_oval ( midx - ra , midy - ra , midx + ra , midy + ra , width = 1 ) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb = rp * math . cos ( pa * deg ) # 畫出 rb 圓 ( 基圓 ), 畫圓函式尚未定義 # create_oval ( midx - rb , midy - rb , midx + rb , midy + rb , width = 1 ) # rd 為齒根圓半徑 rd = rp - d # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd # 畫出 rd 圓 ( 齒根圓 ), 畫圓函式尚未定義 # create_oval ( midx - rd , midy - rd , midx + rd , midy + rd , width = 1 ) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd if rd > rb : dr = ( ra - rd ) / imax else : dr = ( ra - rb ) / imax # tan ( pa * deg ) - pa * deg 為漸開線函數 sigma = math . pi / ( 2 * n ) + math . tan ( pa * deg ) - pa * deg for j in range ( n ) : ang =- 2 . * j * math . pi / n + sigma ang2 = 2 . * j * math . pi / n + sigma lxd = midx + rd * math . sin ( ang2 - 2 . * math . pi / n ) lyd = midy - rd * math . cos ( ang2 - 2 . * math . pi / n ) for i in range ( imax + 1 ) : # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd if rd > rb : r = rd + i * dr else : r = rb + i * dr theta = math . sqrt (( r * r ) / ( rb * rb ) - 1 .) alpha = theta - math . atan ( theta ) xpt = r * math . sin ( alpha - ang ) ypt = r * math . cos ( alpha - ang ) xd = rd * math . sin ( - ang ) yd = rd * math . cos ( - ang ) # i = 0 時 , 繪線起點由齒根圓上的點 , 作為起點 if ( i == 0 ) : last_x = midx + xd last_y = midy - yd # 由左側齒根圓作為起點 , 除第一點 ( xd , yd ) 齒根圓上的起點外 , 其餘的 ( xpt , ypt ) 則為漸開線上的分段點 self . create_line (( midx + xpt ),( midy - ypt ),( last_x ),( last_y ), fill = color ) # 最後一點 , 則為齒頂圓 if ( i == imax ) : lfx = midx + xpt lfy = midy - ypt last_x = midx + xpt last_y = midy - ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標 , lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self . create_line (( lxd ),( lyd ),( midx + xd ),( midy - yd ), fill = color ) for i in range ( imax + 1 ) : # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd if rd > rb : r = rd + i * dr else : r = rb + i * dr theta = math . sqrt (( r * r ) / ( rb * rb ) - 1 .) alpha = theta - math . atan ( theta ) xpt = r * math . sin ( ang2 - alpha ) ypt = r * math . cos ( ang2 - alpha ) xd = rd * math . sin ( ang2 ) yd = rd * math . cos ( ang2 ) # i = 0 時 , 繪線起點由齒根圓上的點 , 作為起點 if ( i == 0 ) : last_x = midx + xd last_y = midy - yd # 由右側齒根圓作為起點 , 除第一點 ( xd , yd ) 齒根圓上的起點外 , 其餘的 ( xpt , ypt ) 則為漸開線上的分段點 self . create_line (( midx + xpt ),( midy - ypt ),( last_x ),( last_y ), fill = color ) # 最後一點 , 則為齒頂圓 if ( i == imax ) : rfx = midx + xpt rfy = midy - ypt last_x = midx + xpt last_y = midy - ypt # lfx 為齒頂圓上的左側 x 座標 , lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self . create_line ( lfx , lfy , rfx , rfy , fill = color ) # 準備在 id = \"gear1\" 的 canvas 中繪圖 canvas = doc [ \"gear1\" ] ctx = canvas . getContext ( \"2d\" ) x = ( canvas . width ) / 2 y = ( canvas . height ) / 2 r = 0.8 * ( canvas . width / 2 ) # 齒數 n = 53 # 壓力角 pa = 20 Spur ( ctx ). Gear ( x , y , r , n , pa , \"blue\" ) </script> 以下則繪製三個齒輪囓合圖: # 導入 browser 模組中的 document, 並設為 doc 變數 from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx, midy, midx, midy-rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(n): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) # 準備在 id=\"gear2\" 的 canvas 中繪圖 canvas = doc[\"gear2\"] ctx = canvas.getContext(\"2d\") # 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角 # 壓力角 pa 單位為角度 pa = 20 # 第1齒輪齒數 n_g1 = 17 # 第2齒輪齒數 n_g2 = 11 # 第3齒輪齒數 n_g3 = 13 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 m = (0.8*canvas.width)/(n_g1+n_g2+n_g3) # 根據模數 m, 計算各齒輪的節圓半徑 rp_g1 = m*n_g1/2 rp_g2 = m*n_g2/2 rp_g3 = m*n_g3/2 #單一正齒輪繪圖呼叫格式 Spur(ctx).Gear(x, y, r, n, pa, \"blue\") # 開始繪製囓合齒輪輪廓 # 繪圖第1齒輪的圓心座標, 因為希望繪圖佔去 canvas.width 的 80%, 所以兩邊各預留 10% 距離 x_g1 = canvas.width*0.1+rp_g1 # y 方向繪圖區域上方預留 canvas.height 的 20% y_g1 = canvas.height*0.2+rp_g1 # 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同 x_g2 = x_g1 + rp_g1 + rp_g2 y_g2 = y_g1 # 第3齒輪的圓心座標 x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3 y_g3 = y_g1 # 將第1齒輪順時鐘轉 90 度, 也就是 math.pi/2 # 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖 ctx.save() # translate to the origin of second gear ctx.translate(x_g1, y_g1) # rotate to engage ctx.rotate(math.pi/2) # put it back ctx.translate(-x_g1, -y_g1) # 繪製第一個齒輪輪廓 Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, \"blue\") ctx.restore() # 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合 ctx.save() # translate to the origin of second gear ctx.translate(x_g2, y_g2) # rotate to engage ctx.rotate(-math.pi/2-math.pi/n_g2) # put it back ctx.translate(-x_g2, -y_g2) Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, \"black\") ctx.restore() # 將第3齒輪逆時鐘轉 90 度之後, 再往回轉第2齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合 ctx.save() # translate to the origin of second gear ctx.translate(x_g3, y_g3) # rotate to engage # math.pi+math.pi/n_g2 為第2齒輪從順時鐘轉 90 度之後, 必須配合目前的標記線所作的齒輪 2 轉動角度, 要轉換到齒輪3 的轉動角度 # 必須乘上兩齒輪齒數的比例, 若齒輪2 大, 則齒輪3 會轉動較快 # 第1個 -math.pi/2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度 # -math.pi/n_g3 則是第3齒與第2齒定位線重合後, 必須再逆時鐘多轉一齒的轉角, 以便進行囓合 # (math.pi+math.pi/n_g2)*n_g2/n_g3 則是第2齒原定位線為順時鐘轉動 90 度, # 但是第2齒輪為了與第1齒輪囓合, 已經距離定位線, 多轉了 180 度, 再加上第2齒輪的一齒角度, 因為要帶動第3齒輪定位, # 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角, 因此乘上 n_g2/n_g3 ctx.rotate(-math.pi/2-math.pi/n_g3+(math.pi+math.pi/n_g2)*n_g2/n_g3) # put it back ctx.translate(-x_g3, -y_g3) Spur(ctx).Gear(x_g3, y_g3, rp_g3, n_g3, pa, \"red\") ctx.restore() 以下為3個齒輪囓合繪圖程式碼建立正齒輪畫布 --> <canvas id= \"gear2\" width= \"800\" height= \"400\" style= \"background-color:#FFF\" ></canvas> <!-- 開始執行 Brython 繪圖 --> <script type= \"text/python3\" > # 導入 browser 模組中的 document , 並設為 doc 變數 from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math . pi / 180 . # 定義 Spur 類別 class Spur ( object ) : def __init__ ( self , ctx ) : self . ctx = ctx def create_line ( self , x1 , y1 , x2 , y2 , width = 3 , fill = \"red\" ) : self . ctx . beginPath () self . ctx . lineWidth = width self . ctx . moveTo ( x1 , y1 ) self . ctx . lineTo ( x2 , y2 ) self . ctx . strokeStyle = fill self . ctx . stroke () # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑 , n 為齒數 # pa 為壓力角 ( deg ) # rot 為旋轉角 ( deg ) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正 , 因為 base circle 與齒根圓大小必須進行判斷 def Gear ( self , midx , midy , rp , n = 20 , pa = 20 , color = \"black\" ) : # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線 , 由圓心到節圓 y 軸頂點畫一直線 self . create_line ( midx , midy , midx , midy - rp ) # 畫出 rp 圓 , 畫圓函式尚未定義 # create_oval ( midx - rp , midy - rp , midx + rp , midy + rp , width = 2 ) # a 為模數 ( 代表公制中齒的大小 ), 模數為節圓直徑 ( 稱為節徑 ) 除以齒數 # 模數也就是齒冠大小 a = 2 * rp / n # d 為齒根大小 , 為模數的 1.157 或 1.25 倍 , 這裡採 1.25 倍 d = 2.5 * rp / n # ra 為齒輪的外圍半徑 ra = rp + a # 畫出 ra 圓 , 畫圓函式尚未定義 # create_oval ( midx - ra , midy - ra , midx + ra , midy + ra , width = 1 ) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb = rp * math . cos ( pa * deg ) # 畫出 rb 圓 ( 基圓 ), 畫圓函式尚未定義 # create_oval ( midx - rb , midy - rb , midx + rb , midy + rb , width = 1 ) # rd 為齒根圓半徑 rd = rp - d # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd # 畫出 rd 圓 ( 齒根圓 ), 畫圓函式尚未定義 # create_oval ( midx - rd , midy - rd , midx + rd , midy + rd , width = 1 ) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd if rd > rb : dr = ( ra - rd ) / imax else : dr = ( ra - rb ) / imax # tan ( pa * deg ) - pa * deg 為漸開線函數 sigma = math . pi / ( 2 * n ) + math . tan ( pa * deg ) - pa * deg for j in range ( n ) : ang =- 2 . * j * math . pi / n + sigma ang2 = 2 . * j * math . pi / n + sigma lxd = midx + rd * math . sin ( ang2 - 2 . * math . pi / n ) lyd = midy - rd * math . cos ( ang2 - 2 . * math . pi / n ) for i in range ( imax + 1 ) : # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd if rd > rb : r = rd + i * dr else : r = rb + i * dr theta = math . sqrt (( r * r ) / ( rb * rb ) - 1 .) alpha = theta - math . atan ( theta ) xpt = r * math . sin ( alpha - ang ) ypt = r * math . cos ( alpha - ang ) xd = rd * math . sin ( - ang ) 重力啟動機械時鐘所需的齒輪組 , 然後在 Onshape 進行零組件設計繪圖 , 最後再用 3 D 印表機將零件印出並組裝測試 . yd = rd * math . cos ( - ang ) # i = 0 時 , 繪線起點由齒根圓上的點 , 作為起點 if ( i == 0 ) : last_x = midx + xd last_y = midy - yd # 由左側齒根圓作為起點 , 除第一點 ( xd , yd ) 齒根圓上的起點外 , 其餘的 ( xpt , ypt ) 則為漸開線上的分段點 self . create_line (( midx + xpt ),( midy - ypt ),( last_x ),( last_y ), fill = color ) # 最後一點 , 則為齒頂圓 if ( i == imax ) : lfx = midx + xpt lfy = midy - ypt last_x = midx + xpt last_y = midy - ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標 , lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self . create_line (( lxd ),( lyd ),( midx + xd ),( midy - yd ), fill = color ) for i in range ( imax + 1 ) : # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd if rd > rb : r = rd + i * dr else : r = rb + i * dr theta = math . sqrt (( r * r ) / ( rb * rb ) - 1 .) alpha = theta - math . atan ( theta ) xpt = r * math . sin ( ang2 - alpha ) ypt = r * math . cos ( ang2 - alpha ) xd = rd * math . sin ( ang2 ) yd = rd * math . cos ( ang2 ) # i = 0 時 , 繪線起點由齒根圓上的點 , 作為起點 if ( i == 0 ) : last_x = midx + xd last_y = midy - yd # 由右側齒根圓作為起點 , 除第一點 ( xd , yd ) 齒根圓上的起點外 , 其餘的 ( xpt , ypt ) 則為漸開線上的分段點 self . create_line (( midx + xpt ),( midy - ypt ),( last_x ),( last_y ), fill = color ) # 最後一點 , 則為齒頂圓 if ( i == imax ) : rfx = midx + xpt rfy = midy - ypt last_x = midx + xpt last_y = midy - ypt # lfx 為齒頂圓上的左側 x 座標 , lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self . create_line ( lfx , lfy , rfx , rfy , fill = color ) # 準備在 id = \"gear2\" 的 canvas 中繪圖 canvas = doc [ \"gear2\" ] ctx = canvas . getContext ( \"2d\" ) # 模數決定齒的尺寸大小 , 囓合齒輪組必須有相同的模重力啟動機械時鐘所需的齒輪組 , 然後在 Onshape 進行零組件設計繪圖 , 最後再用 3 D 印表機將零件印出並組裝測試 . 數與壓力角 # 壓力角 pa 單位為角度 pa = 20 # 第1齒輪齒數 n_g1 = 17 # 第2齒輪齒數 n_g2 = 11 # 第3齒輪齒數 n_g3 = 13 # m 為模數 , 根據畫布的寬度 , 計算適合的模數大小 m = ( 0.8 * canvas . width ) / ( n_g1 + n_g2 + n_g3 ) # 根據模數 m , 計算各齒輪的節圓半徑 rp_g1 = m * n_g1 / 2 rp_g2 = m * n_g2 / 2 rp_g3 = m * n_g3 / 2 # 單一正齒輪繪圖呼叫格式 Spur ( ctx ). Gear ( x , y , r , n , pa , \"blue\" ) # 開始繪製囓合齒輪輪廓 # 繪圖第1齒輪的圓心座標 , 因為希望繪圖佔去 canvas . width 的 80 % , 所以兩邊各預留 10 % 距離 x_g1 = canvas . width * 0.1 + rp_g1 # y 方向繪圖區域上方預留 canvas . height 的 20 % y_g1 = canvas . height * 0.2 + rp_g1 # 第2齒輪的圓心座標 , 假設排列成水平 , 表示各齒輪圓心 y 座標相同 x_g2 = x_g1 + rp_g1 + rp_g2 y_g2 = y_g1 # 第3齒輪的圓心座標 x_g3 = x_g1 + rp_g1 + 2 * rp_g2 + rp_g3 y_g3 = y_g1 # 將第1齒輪順時鐘轉 90 度 , 也就是 math . pi / 2 # 使用 ctx . save () 與 ctx . restore () 以確保各齒輪以相對座標進行旋轉繪圖 ctx . save () # translate to the origin of second gear ctx . translate ( x_g1 , y_g1 ) # rotate to engage ctx . rotate ( math . pi / 2 ) # put it back ctx . translate ( - x_g1 , - y_g1 ) # 繪製第一個齒輪輪廓 Spur ( ctx ). Gear ( x_g1 , y_g1 , rp_g1 , n_g1 , pa , \"blue\" ) ctx . restore () # 將第2齒輪逆時鐘轉 90 度之後 , 再多轉一齒 , 以便與第1齒輪進行囓合 ctx . save () # translate to the origin of second gear ctx . translate ( x_g2 , y_g2 ) # rotate to engage ctx . rotate ( - math . pi / 2 - math . pi / n_g2 ) # put it back ctx . translate ( - x_g2 , - y_g2 ) Spur ( ctx ). Gear ( x_g2 , y_g2 , rp_g2 , n_g2 , pa , \"black\" ) ctx . restore () # 將第3齒輪逆時鐘轉 90 度之後 , 再往回轉第2齒輪定位帶動轉角 , 然後再逆時鐘多轉一齒 , 以便與第2齒輪進行囓合 ctx . save () # translate to the origin of second gear ctx . translate ( x_g3 , y_g3 ) # rotate to engage # math . pi + math . pi / n_g2 為第2齒輪從順時鐘轉 90 度之後 , 必須配合目前的標記線所作的齒輪 2 轉動角度 , 要轉換到齒輪3 的轉動角度 # 必須乘上兩齒輪齒數的比例 , 若齒輪2 大 , 則齒輪3 會轉動較快 # 第1個 - math . pi / 2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度 # - math . pi / n_g3 則是第3齒與第2齒定位線重合後 , 必須再逆時鐘多轉一齒的轉角 , 以便進行囓合 # ( math . pi + math . pi / n_g2 ) * n_g2 / n_g3 則是第2齒原定位線為順時鐘轉動 90 度 , # 但是第2齒輪為了與第1齒輪囓合 , 已經距離定位線 , 多轉了 180 度 , 再加上第2齒輪的一齒角度 , 因為要帶動第3齒輪定位 , # 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角 , 因此乘上 n_g2 / n_g3 ctx . rotate ( - math . pi / 2 - math . pi / n_g3 + ( math . pi + math . pi / n_g2 ) * n_g2 / n_g3 ) # put it back ctx . translate ( - x_g3 , - y_g3 ) Spur ( ctx ). Gear ( x_g3 , y_g3 , rp_g3 , n_g3 , pa , \"red\" ) ctx . restore () </script> 參考資料: 3D printed mechanical clock: http://www.thingiverse.com/thing:328569 Mechanical engineering: http://diyhpl.us/~bryan/papers2/wikipedia-mechanical-engineering.pdf Pendulum marble clock: http://www.youtube.com/watch?v=UHBHCsrqYMw Walking animal: http://www.thingiverse.com/thing:1212665 Perseverance: http://www.thingiverse.com/thing:348489 Robotic arm: http://www.thingiverse.com/thing:1015238 Toyota cylinder engine: http://www.thingiverse.com/thing:644933 Gear generator: http://geargenerator.com/ Optimal robot trajectory: https://gist.github.com/pierre-haessig/9808480 Simple GP for aircraft optimization: https://gist.github.com/bqpd/6845968"},{"tags":"Project","title":"Brython and Amber languages","url":"http://chiamingyen.github.io/kmolab/blog/brython-and-amber-languages.html","text":"看到 Brython 與 Amber 等利用 Javascript 實作的網際程式系統, 就應該不難理解, 即便 Javascript 程式終究無可避免, 但是 Python 與 Smalltalk 的魅力依舊讓人難以忘懷. Brython: https://github.com/brython-dev/brython 讓程式師可以直接在 html 網頁中以 Python3 的語法編寫程式, 然後轉為 Javascript 在網頁上運行, 而相同的原理, Amber: https://github.com/amber-smalltalk/amber 則更進一步, 以 Amber 寫 Amber, 讓程式師可以在網頁上寫 Smalltalk 語法, 然後轉成網頁上能夠運行的程式片斷. 學 Python3 的資源很多, 但是想學 Smailtalk, 也有不少的免費資源: http://seaside.gemtalksystems.com/tutorial/chapter08.pdf https://ccrma.stanford.edu/workshops/cm2007/topics/smalltalk/ArtAndScienceOfSmalltalk.pdf http://sdmeta.gforge.inria.fr/FreeBooks/WithStyle/SmalltalkWithStyle.pdf http://live.exept.de/doc/books/JoyOfST/JoyOfST.pdf https://www.gnu.org/software/smalltalk/manual/html_node/"},{"tags":"Ubuntu","title":"近端 Jupyterhub 電腦主機設定","url":"http://chiamingyen.github.io/kmolab/blog/jin-duan-jupyterhub-dian-nao-zhu-ji-she-ding.html","text":"利用4台 HP 小型電腦練習近端伺服主機的設定與操作, 這裡安裝設定 Jupyterhub. http://101.mde.tw 就是其中的一台 HP 小型伺服主機 . Jupyterhub 安裝 sudo apt-get install npm nodejs-legacy sudo npm install -g configurable-http-proxy sudo pip3 install jupyterhub sudo pip3 install IPython 以 SSL 啟動 : 先建立 key 與 certificate: sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout jupyterhub.key -out jupyterhub.crt jupyterhub --ip 10.0.1.2 --port 443 --ssl-key jupyterhub.key --ssl-cert jupyterhub.cert 或不指定 IP jupyterhub --port 9443 --ssl-key my_ssl.key --ssl-cert my_ssl.cert 之後則可以 https://jupyterIP:9443 連線 jupyter_config.py 設定檔 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 # jupyterhub_config.py # jupyterhub -f /path/to/jupyterhub_config.py c = get_config () import os pjoin = os . path . join runtime_dir = os . path . join ( '/srv/jupyterhub' ) ssl_dir = pjoin ( runtime_dir , 'ssl' ) if not os . path . exists ( ssl_dir ): os . makedirs ( ssl_dir ) # https on :9443 c . JupyterHub . port = 9443 c . JupyterHub . ssl_key = pjoin ( ssl_dir , 'nginx.key' ) c . JupyterHub . ssl_cert = pjoin ( ssl_dir , 'nginx.crt' ) # put the JupyterHub cookie secret and state db # in /var/run/jupyterhub c . JupyterHub . cookie_secret_file = pjoin ( runtime_dir , 'cookie_secret' ) c . JupyterHub . db_url = pjoin ( runtime_dir , 'jupyterhub.sqlite' ) # or `--db=/path/to/jupyterhub.sqlite` on the command-line # put the log file in /var/log c . JupyterHub . log_file = '/var/log/jupyterhub.log' # use GitHub OAuthenticator for local users ''' c.JupyterHub.authenticator_class = 'oauthenticator.LocalGitHubOAuthenticator' c.GitHubOAuthenticator.oauth_callback_url = os.environ['OAUTH_CALLBACK_URL'] # create system users that don't exist yet c.LocalAuthenticator.create_system_users = True ''' # specify users and admin c . Authenticator . whitelist = { 'user1' , 'user2' } c . Authenticator . admin_users = { 'user1' , 'user2' } # start single-user notebook servers in ~/assignments, # with ~/assignments/Welcome.ipynb as the default landing page # this config could also be put in # /etc/ipython/ipython_notebook_config.py #c.Spawner.notebook_dir = '~/tmp' #c.Spawner.args = ['--NotebookApp.default_url=/notebooks/Welcome.ipynb'] 將 Jupyterhub 設為開機啟動 將下列檔案存成 /etc/init.d/jupyterhub 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 #! /bin/sh ### BEGIN INIT INFO # Provides: jupyterhub # Required-Start: $remote_fs $syslog # Required-Stop: $remote_fs $syslog # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: Start jupyterhub # Description: This file should be used to construct $ sudo chmod +x /etc/init.d/jupyterhub # Create a default config to /etc/jupyterhub/jupyterhub_config.py $ sudo jupyterhub --generate-config -f /etc/jupyterhub/jupyterhub_config.py # Start jupyterhub $ sudo service jupyterhub start # Stop jupyterhub $ sudo service jupyterhub stop # Start jupyterhub on boot $ sudo update-rc.d jupyterhub defaults # Or use rcconf to manage services http://manpages.ubuntu.com/manpages/natty/man8/rcconf.8.html $ sudo rcconfscripts to be # placed in /etc/init.d. ### END INIT INFO # Author: Alisue <lambdalisue@hashnote.net> # # Please remove the \"Author\" lines above and replace them # with your own name if you copy and modify this script. # Do NOT \"set -e\" # PATH should only include /usr/* if it runs after the mountnfs.sh script PATH = /sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin DESC = \"Multi-user server for Jupyter notebooks\" NAME = jupyterhub DAEMON = /usr/local/bin/jupyterhub DAEMON_ARGS = \"--config=/etc/jupyterhub/jupyterhub_config.py\" PIDFILE = /var/run/ $NAME .pid SCRIPTNAME = /etc/init.d/ $NAME # Exit if the package is not installed [ -x \" $DAEMON \" ] || exit 0 # Read configuration variable file if it is present [ -r /etc/default/ $NAME ] && . /etc/default/ $NAME # Load the VERBOSE setting and other rcS variables . /lib/init/vars.sh # Define LSB log_* functions. # Depend on lsb-base (>= 3.2-14) to ensure that this file is present # and status_of_proc is working. . /lib/lsb/init-functions # # Function that starts the daemon/service # do_start () { # Return # 0 if daemon has been started # 1 if daemon was already running # 2 if daemon could not be started start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \\ || return 1 start-stop-daemon --start --background --make-pidfile --quiet --pidfile $PIDFILE --exec $DAEMON -- \\ $DAEMON_ARGS \\ || return 2 # Add code here, if necessary, that waits for the process to be ready # to handle requests from services started subsequently which depend # on this one. As a last resort, sleep for some time. } # # Function that stops the daemon/service # do_stop () { # Return # 0 if daemon has been stopped # 1 if daemon was already stopped # 2 if daemon could not be stopped # other if a failure occurred start-stop-daemon --stop --quiet --retry = TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME RETVAL = \" $? \" [ \" $RETVAL \" = 2 ] && return 2 # Wait for children to finish too if this is a daemon that forks # and if the daemon is only ever run from this initscript. # If the above conditions are not satisfied then add some other code # that waits for the process to drop all resources that could be # needed by services started subsequently. A last resort is to # sleep for some time. start-stop-daemon --stop --quiet --oknodo --retry = 0/30/KILL/5 --exec $DAEMON [ \" $? \" = 2 ] && return 2 # Many daemons don't delete their pidfiles when they exit. rm -f $PIDFILE return \" $RETVAL \" } # # Function that sends a SIGHUP to the daemon/service # do_reload () { # # If the daemon can reload its configuration without # restarting (for example, when it is sent a SIGHUP), # then implement that here. # start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME return 0 } case \" $1 \" in start ) [ \" $VERBOSE \" ! = no ] && log_daemon_msg \"Starting $DESC \" \" $NAME \" do_start case \" $? \" in 0 | 1 ) [ \" $VERBOSE \" ! = no ] && log_end_msg 0 ;; 2 ) [ \" $VERBOSE \" ! = no ] && log_end_msg 1 ;; esac ;; stop ) [ \" $VERBOSE \" ! = no ] && log_daemon_msg \"Stopping $DESC \" \" $NAME \" do_stop case \" $? \" in 0 | 1 ) [ \" $VERBOSE \" ! = no ] && log_end_msg 0 ;; 2 ) [ \" $VERBOSE \" ! = no ] && log_end_msg 1 ;; esac ;; status ) status_of_proc \" $DAEMON \" \" $NAME \" && exit 0 || exit $? ;; #reload|force-reload) # # If do_reload() is not implemented then leave this commented out # and leave 'force-reload' as an alias for 'restart'. # #log_daemon_msg \"Reloading $DESC\" \"$NAME\" #do_reload #log_end_msg $? #;; restart | force-reload ) # # If the \"reload\" option is implemented then remove the # 'force-reload' alias # log_daemon_msg \"Restarting $DESC \" \" $NAME \" do_stop case \" $? \" in 0 | 1 ) do_start case \" $? \" in 0 ) log_end_msg 0 ;; 1 ) log_end_msg 1 ;; # Old process is still running * ) log_end_msg 1 ;; # Failed to start esac ;; * ) # Failed to stop log_end_msg 1 ;; esac ;; * ) #echo \"Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}\" >&2 echo \"Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}\" > & 2 exit 3 ;; esac : 接著執行下列設定, 讓電腦開機時就能啟動 jupyterhub 服務. 1 2 3 4 5 6 7 8 9 10 11 $ sudo chmod +x /etc/init.d/jupyterhub # Create a default config to /etc/jupyterhub/jupyterhub_config.py $ sudo jupyterhub --generate-config -f /etc/jupyterhub/jupyterhub_config.py # Start jupyterhub $ sudo service jupyterhub start # Stop jupyterhub $ sudo service jupyterhub stop # Start jupyterhub on boot $ sudo update-rc.d jupyterhub defaults # Or use rcconf to manage services http://manpages.ubuntu.com/manpages/natty/man8/rcconf.8.html $ sudo rcconf"},{"tags":"Python","title":"Pelican setup","url":"http://chiamingyen.github.io/kmolab/blog/pelican-setup.html","text":"Pelican 靜態網頁系統架構與設定 近端與遠端設定上的考量 本網站系統採用 Pelican 將一系列 .md 檔案轉換成靜態網頁, Github 倉儲位於 https://github.com/chiamingyen/kmolab/tree/gh-pages , 由於考量到近端與遠端 Disqus 與 Tipue search 在設定上的差異, 因此透過 Leo Editor 設置了近端與遠端等兩套配置. 以下將簡要說明此兩套配置設定的差異, 首先是 Leo Editor 執行 pelican 轉檔指令按鈕的差異: 遠端按鈕: 1 2 3 import os os . system ( \"pelican content -o blog -s publishconf.py\" ) g . es ( \"admin pelican 執行完畢\" ) 表示所有 .md 檔案位於 content 目錄下, 而輸出的 html 檔案則位於 blog 目錄下, 所採用的設定檔案為 publishconf.py , 其中兩端的共同設定則透過 Python 的模組導入 pelicanconf.py 檔案. 至於近端的按鈕則為: 1 2 3 import os os . system ( \"pelican content -o blog -s local_publishconf.py\" ) g . es ( \"admin pelican 近端執行完畢\" ) 與遠端按鈕的差別在於, 採用了 local_publishconf.py 設定檔案. 若再仔細觀查遠端設定 publishconf.py 與近端設定 pelicanconf.py , 就會發現遠端使用的 SITEURL 為絕對路徑, 其中放入網站的符號名稱網址, 而近端的 SITEURL 則採用相對目錄. 其次, 兩端的 THEME 設定也分別使用不同目錄下的 theme 檔案, 主要原因在於 Tipue search 的遠端網站搜尋建議採用 json 模式 (網站關鍵字放在 tipuesearch_content.json), 而近端則建議使用 static 模式 (網站關鍵字放在 tipuesearch_content.js), 儘管經過測試, 其實在遠端採用 static 模式也可以正確查詢, 但在此仍然遵循 Tipue search 的建議, 分成近端與遠端兩種不同設定得方式產生靜態網頁. 至於 DISQUS_SITENAME 的設定, 在近端無需啟動, 但在遠端時, 一般會建議採用絕對網址的設定, 比較不會出錯, 因此, 即使在實際測試中, 有時相對路徑的設定, 一旦放到遠端 gh-pages 有時仍會正確產生對應的 Disqus 表單, 但是本站仍然不厭其煩, 將近端與遠端的設定方別開來, 或許在未來 Tipue search 或 Disque 版本更新之後, 比較不會出錯. 網站多媒體檔案考量 本網站目前將圖檔存在 copy dot com, 而影片檔案則存在 Vimeo, 雖然目前 copy dot com 提供一個帳號可以有 15 GB 的免費資料儲存空間, 但是這樣的服務能夠持續多久, 實在不可預期, 因此一旦 copy dot com 公告要停止免費帳號服務, 本網站各文章連結的圖檔將會失效, 因此目前的規劃如下: 將圖檔放在 copy dot com 的原因是在最小化 gh-pages 倉儲的容量, 若協同者需要 git clone 資料, 可以節省許多時間 為了保險起見, 本網站仍需定期利用程式, 抓下本網站的所有圖檔, 並且以異地備份與多系統儲存的方式暫存, 一旦 copy dot com 公告即將停止服務, 就必須透過轉檔程式, 處理本網站的所有 .md 檔案, 將 copy dot com 的圖檔連結改為相對 images 目錄連結或其他相關連結, 以延續本網站系統的內容與功能 由於影片檔案較大, 我們只好希望 Vimeo 可以一直存活下去, 或者將相同的影片檔案存一份到 Youtube, 當作備份 上述所謂的網站圖擋下載程式: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 # 配合 pelican site, 將上傳到 copy dot com 的圖檔, 逐一下載到 images 目錄 # 主要的考量在於若 copy.com 不再提供服務, 近端或替代遠端的網頁必須要能夠修改後持續運作 # 除了下載必要的圖檔外, 還需要逐一修改所有 .md 檔案, 將 https://copy dot com 字串換成 images 目錄名稱 from urllib.request import urlopen from urllib.parse import urlsplit # 利用 bs4 解讀 html 內容 from bs4 import BeautifulSoup import os urlList = [] # 以遞迴方式搜尋圖檔的 url # level 0 為根 URL def downloadImages ( url , level ): print ( url ) global urlList # 避免納入重複的 URL if url in urlList : return urlList . append ( url ) try : urlContent = urlopen ( url ) . read () except : return soup = BeautifulSoup ( urlContent ) # 利用 bs4 搜尋 img 標註後, 檢查是否位於 copy dot com, 若是則下載該圖檔 imgTags = soup . findAll ( 'img' ) for imgTag in imgTags : imgUrl = imgTag [ 'src' ] try : # 記得將 dot 改為 . if \"copy dot com\" not in imgUrl : continue else : imgData = urlopen ( imgUrl ) . read () fileName = os . path . basename ( urlsplit ( imgUrl )[ 2 ]) output = open ( \"images/\" + fileName , 'wb' ) output . write ( imgData ) output . close () except : pass # 若頁面有 anchor 標註則納入進行遞迴搜尋 if level > 0 : linkTags = soup . findAll ( 'a' ) if len ( linkTags ) > 0 : for linkTag in linkTags : try : linkUrl = linkTag [ 'href' ] downloadImages ( linkUrl , level - 1 ) except : pass # 若執行目錄下無 images 目錄則在此建立 images 目錄 if not os . path . exists ( \"images\" ): os . makedirs ( \"images\" ) # 執行遞迴圖檔搜尋與下載 downloadImages ( 'http://cadlab.mde.tw/' , 1 ) 至於要配合 images 目錄運作的轉檔程式與設定: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 這個程式將原先寫在各 .md 檔案中的 copy dot com 圖檔的連結內容, 全部換成 images/ import os replacement = \"\"\"images/\"\"\" for dname , dirs , files in os . walk ( \"cadlab\" ): for fname in files : if \".md\" in fname : if \"page\" in dname : # 因為 page 目錄下的圖檔連結, 需要多跳兩層才能擷取 images 目錄中的圖檔 replacement = \"../../\" + replacement fpath = os . path . join ( dname , fname ) with open ( fpath , 'rt' ) as f : s = f . read () # 以下記得要將 dot 改為 . s = s . replace ( \"https://copy dot com/\" , replacement ) with open ( fpath , \"w\" ) as f : f . write ( s ) 為了與上述兩個程式運作配合, 還需要增加一個 pelican 的設定項目: 1 STATIC_PATHS = ['images'] 此一設定的配合, 需要將第1個下載網站所有存到 images 的圖檔目錄, 複製到 content 目錄下, 也就是與所有 .md 檔案放在一起, 然後經過這個靜態路徑的設定, pelican 就會在轉檔時, 將此目錄複製到 blog 目錄下, 這時無論是在之後的近端或遠端, 所有經過 pelican 轉出的 html 檔案, 都可以順利連結到所有對應的圖檔. Pelican templae 設定 假如使用 https://github.com/DandyDev/pelican-bootstrap3 template, 則可將 Set SHOW_ARTICLE_AUTHOR 設為 True, 就可以在每篇文章中顯示作者. SHOW_ARTICLE_CATEGORY 則用來顯示類別. SHOW_DATE_MODIFIED 則可顯示文章修改的日期."},{"tags":"cadlab","title":"Custom domain for Github pages","url":"http://chiamingyen.github.io/kmolab/blog/custom-domain-for-github-pages.html","text":"如何設定 Github pages 網頁符號名稱綁定 這裡要舉的例子為 http://cadlab.mde.tw 網站的網址設定. Github pages 是一種靜態頁面網站的服務系統, 使用者可以自選網站綁定的符號名稱, 例如: https://github.com/cad-lab/blog 是一個已經將 default branch 設為 gh-pages 分支的倉儲, 這個網站可以透過 http://cad-lab.github.io/blog/ 呼叫. 但是目前已經透過設定將網址綁定到 http://cadlab.mde.tw , 想要完成這樣的設定, 步驟如下: 使用者擁有 domain name, 且可以透過 DNS 設定管理, 將網站與網址綁定, 在這裡網址 domain name 為 mde.tw 在 https://github.com/cad-lab/blog 倉儲中的根目錄, 增加一個檔案名稱為 CNAME, 且內容為 cadlab.mde.tw 的 檔案 登入到 https://github.com/cad-lab/blog 倉儲, 利用 Settings->Branches, 將 Default branch 設為 gh-pages 分支 (原先內定 Default branch 為 Master) 接著到 DNS 伺服器設定, 將 cad-lab.github.io 網址以 CNAME 類別, 設為與 cadlab.mde.tw 網址綁定, 這裡必須注意的是, Github 會自行將 cad-lab.github.io/blog 跳轉到 cadlab.mde.tw 完成設定後, Github 就會將 http://cadlab.mde.tw 的連結呼叫與設定 default 分支的 gh-pages http://cad-lab.github.io/blog 進行跳轉, 也就是當使用者以瀏覽器連到 http://cadlab.mde.tw 時, 其實資料來自 http://cad-lab.github.io/blog 由於 http://cadlab.mde.tw 網站採用 Pelican 靜態網誌系統進行轉檔, 因此原先 SITEURL 設為 SITEURL = 'http://cad-lab.github.io/blog/post' 必須配合改為 SITEURL = 'http://cadlab.mde.tw/post'"},{"tags":"Courses","title":"2015 Fall Final Schedule","url":"http://chiamingyen.github.io/kmolab/blog/2015-fall-final-schedule.html","text":"2015 Fall 學期成績評分時程規劃 最後資料改版期限: 2016.01.20 (星期三) 24:00 評分流程: 從各班個人連結頁面中 ( 2a , 2b , 1a , 1b ), 進入各學員在各班倉儲中對應的 個人 gh-pages 網頁 從上述頁面右下方的 Blogroll 中 最下方 連結 (名稱為\"學號 個人網頁\"), 進入學員個人單獨的 gh-pages 網頁 根據上述兩個頁面中的資料, 配合各課程的講授內容, 依據 投影片 , 操作影片 以及頁面上的其他 相關檔案資料 評分. 從各班的協同網頁中, 各組所公佈的分組報告中的 投影片 , 操作影片 以及頁面上的其他 相關檔案資料 評分. cadp 課程另外將參酌學員所完成的 Solvespace 零件檔案 , Creo Parametric 零組件檔案 , Onshape 零組件檔案評分. 2015 Fall 電腦輔助設計實習課程甲班: cadpa 倉儲: https://github.com/2015fallhw/2015fallcadpa cadpa 網頁: http://2015fallhw.github.io/2015fallcadpa 個人連結: https://github.com/2015fallhw/2015fallcadpa/wiki 2015 Fall 電腦輔助設計實習課程乙班: cadpb 倉儲: https://github.com/2015fallhw/2015fallcadpb cadpb 網頁: http://2015fallhw.github.io/2015fallcadpb 個人連結: https://github.com/2015fallhw/2015fallcadpb/wiki 2015 Fall 計算機程式課程甲班: cpa 倉儲: https://github.com/2015fallhw/2015fallcpa cpa 網頁: http://2015fallhw.github.io/2015fallcpa 個人連結: https://github.com/2015fallhw/2015fallcpa/wiki 2015 Fall 計算機程式課程乙班: cpb 倉儲: https://github.com/2015fallhw/2015fallcpb cpb 網頁: http://2015fallhw.github.io/2015fallcpb 個人連結: https://github.com/2015fallhw/2015fallcpb/wiki"},{"tags":"project","title":"Kmolab user 文章套稿","url":"http://chiamingyen.github.io/kmolab/blog/kmolab-user-wen-zhang-tao-gao.html","text":"這裡可以放入文章的摘要內容 文章標題 這裡開始文章內容 文章內放入超文件的連結: http://chiamingyen.github.io/kmolab 文章子標題 文章內放入圖片: 引入程式碼 1 2 3 4 5 6 7 8 9 10 import math # Pythagoras Theorem def hypotenuse ( side1 , side2 ): return math . sqrt ( math . pow ( side1 , 2 ) + math . pow ( side2 , 2 )) side1 = 3 side2 = 4 h = hypotenuse ( side1 , side2 ) print ( a right triangle with side1 = \", side1, \" and side2 = \", side2, \" the hypotenuse is : \", h)"}]}