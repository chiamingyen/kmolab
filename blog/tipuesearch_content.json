{"pages":[{"title":"About","url":"http://chiamingyen.github.io/kmolab/blog/pages/about/","text":"KMOL 實驗室 KMOL Lab 為台灣國立虎尾科技大學, 機械設計工程系, 知識管理與最佳化應用實驗室, 全稱為 Knowledge Management and Optimal Utilization Laboratory (縮寫為 KMOUL 或 KMOL, 音同 CAMEL), Department of Mechanical Design Engineering, National Formosa University, Taiwan. KMOL信念 二十一世紀的科技大學, 在培育具世界觀與在地文化素養, 能適應環境並成功面對挑戰之專業人才. 所謂專業, 即具有專長, 能夠就業之謂. 所謂文化者, 因思考及概念而有之教化. 所謂素養, 即平日的涵養. Excellence is an art won by training and habituation. We do not act rightly because we have virtue or excellence, but we rather have those because we have acted rightly. We are what we repeatedly do. Excellence, then, is not an act but a habit. — Aristotle (384 BC – March 7, 322 BC) 卓越須經由訓練與習慣養成才能獲得。並非具備品德或卓越能讓人舉止得宜，反而是舉止得宜能讓人卓越。經過切身重複實作，才可體會，卓越並非一種作為，而是習慣。 — 亞理士多德 (西元前 384 年 – 西元前 322 年 3 月 7 日) 體魄康強, 精神活潑, 舉止端莊, 人格健全, 便是大學生的風度. 不倦的追求真理, 熱烈的愛護國家, 積極的造福人類, 才是大學生的職志. — 羅家倫 (1928) KMOL 標誌","tags":"misc"},{"title":"2015 Fall Final Schedule","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/11/2015-fall-final-schedule/","text":"2015 Fall 學期成績評分時程規劃 最後資料改版期限: 2016.01.20 (星期三) 24:00 評分流程: 從各班個人連結頁面中 ( 2a , 2b , 1a , 1b ), 進入各學員在各班倉儲中對應的 個人 gh-pages 網頁 從上述頁面右下方的 Blogroll 中 最下方 連結, 進入學員個人單獨的 gh-pages 網頁 根據上述兩個頁面中的資料, 配合各課程的講授內容, 依據 投影片 , 操作影片 以及頁面上的其他 相關檔案資料 評分. 從各班的協同網頁中, 各組所公佈的分組報告中的 投影片 , 操作影片 以及頁面上的其他 相關檔案資料 評分. cadp 課程另外將參酌學員所完成的 Solvespace 零件檔案 , Creo Parametric 零組件檔案 , Onshape 零組件檔案評分. 2015 Fall 電腦輔助設計實習課程甲班: cadpa 倉儲: https://github.com/2015fallhw/2015fallcadpa cadpa 網頁: http://2015fallhw.github.io/2015fallcadpa 個人連結: https://github.com/2015fallhw/2015fallcadpa/wiki 2015 Fall 電腦輔助設計實習課程乙班: cadpb 倉儲: https://github.com/2015fallhw/2015fallcadpb cadpb 網頁: http://2015fallhw.github.io/2015fallcadpb 個人連結: https://github.com/2015fallhw/2015fallcadpb/wiki 2015 Fall 計算機程式課程甲班: cpa 倉儲: https://github.com/2015fallhw/2015fallcpa cpa 網頁: http://2015fallhw.github.io/2015fallcpa 個人連結: https://github.com/2015fallhw/2015fallcpa/wiki 2015 Fall 計算機程式課程乙班: cpb 倉儲: https://github.com/2015fallhw/2015fallcpb cpb 網頁: http://2015fallhw.github.io/2015fallcpb 個人連結: https://github.com/2015fallhw/2015fallcpb/wiki","tags":"Courses"},{"title":"2015 Fall CP part 2","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/11/2015-fall-cp-part-2/","text":"2015 Fall 計算機程式課程內容 part2 2015 Fall 計算機程式課程倉儲分別為 https://github.com/2015fallhw/2015fallcpa 與 https://github.com/2015fallhw/2015fallcpb 2015 Fall CP 課程 part2 影片摘要: CP W12 介紹從 fix.bat 的搭建到猜顏色遊戲程式的編寫 2015fallcp_b_w12_1 from 虎尾科大機械設計工程 on Vimeo . CP W15 介紹近端系統的建立與啟動, Python3 指令整理, 猜數字與猜顏色遊戲的流程圖, Brython 網頁繪圖 2015cp_w15_b1 from 虎尾科大機械設計工程 on Vimeo . CP W17 說明如何使用 Python 函式, 以及如何進行 Brython 網頁動態繪圖 2015fallcpa_w17 from 虎尾科大機械設計工程 on Vimeo . 2015fallcp_w17b from 虎尾科大機械設計工程 on Vimeo .","tags":"Courses"},{"title":"2015 Fall CP part 1","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/11/2015-fall-cp-part-1/","text":"2015 Fall 計算機程式課程內容 part1 2015 Fall 計算機程式課程倉儲分別為 https://github.com/2015fallhw/2015fallcpa 與 https://github.com/2015fallhw/2015fallcpb 2015 Fall CP 課程 part1 影片摘要: CP W2 2015 Fall 計算機程式可攜環境介紹 2015cp_w2_1 from 虎尾科大機械設計工程 on Vimeo . 說明如何利用 python -m http.server 分享近端檔案 2015cp_w2_2 from 虎尾科大機械設計工程 on Vimeo . 介紹如何利用 fix.bat 修補 C 槽既有的可攜程式系統, 說明 SciTE 如何執行 Python3 程式, 如何利用 gh-pages 分支網頁繳交作業 2015cp_w2_3 from 虎尾科大機械設計工程 on Vimeo . 介紹如何從可攜系統的修補與啟動, 到如何利用 Github Pages 的網頁來繳交各週作業 2015cp_b_w4 from 虎尾科大機械設計工程 on Vimeo . 2015 Fall 課程工作與環境介紹 2015Fall 使用環境與工具介紹 from 虎尾科大機械設計工程 on Vimeo . 英文打字的指法練習介紹, 說明 Github 倉儲的建立使用與刪除. Github 倉儲建立, 使用與刪除 from 虎尾科大機械設計工程 on Vimeo . 介紹 Github 倉儲分支的建立與使用 Github 倉儲分支建立與使用 from 虎尾科大機械設計工程 on Vimeo . CP W3 隨身程式系統的應用再提醒 (fix.zip), Leo Editor, Pelican, Markdown 模組的安裝設定與啟動, notebook.py 中編碼的設定 2015fall_cp_w3_1 from 虎尾科大機械設計工程 on Vimeo . 2015cp_w3_b1 from 虎尾科大機械設計工程 on Vimeo . 2015cp_w3_b3 from 虎尾科大機械設計工程 on Vimeo . 2015cp_w3_b2 from 虎尾科大機械設計工程 on Vimeo . 說明工程師的工作分類, 工程與科學的相輔相成, 解釋何以人文是工程師的養份, 了解科學在探究自然現況, 工程則需面對自然挑戰, 解決人文想像與需求 2015fall_cp_w3_2 from 虎尾科大機械設計工程 on Vimeo . 說明如何利用 Github 建立倉儲, 起始倉儲, git clone 倉儲, 建立分支, 切換 gh-pages 分支, 提交 gh-pages 分支版本, 推送分支版本 2015fall_cp_w3_3 from 虎尾科大機械設計工程 on Vimeo . 說明 Python 程式執行模式, 可以採互動式執行, SciTE 環境下執行, Jupyter 網頁 noteook 環境下執行, Brython 瀏覽器中執行等 2015fall_cp_w3_4 from 虎尾科大機械設計工程 on Vimeo . CP W5 說明計算機程式作為電腦輔助與協同產品設計系列課程的先導課程, 必須在學習 Python3 程式語法的同時, 架構一個可以永續改進使用的系統 2015cp_w5_1 from 虎尾科大機械設計工程 on Vimeo . fix.zip 內容的細步流程介紹, 從 markdown 透過 Pelican 指令的執行, 轉換為放上 Github Pages 網頁的 html 檔案資料, liquid_tags 延伸程式的應用 2015cp_w5_2 from 虎尾科大機械設計工程 on Vimeo . CP W6 介紹英文教學影片的字幕所在位置, 說明如利用 VLC 在近端播放教學影片 2015cp_w6_a_1 from 虎尾科大機械設計工程 on Vimeo . 說明如何將各學員的作業整合到全班協同倉儲, 自行新增為全班倉儲的協同者 2015cp_w6_a_2 from 虎尾科大機械設計工程 on Vimeo . 2015cp_w6_b_4 from 虎尾科大機械設計工程 on Vimeo . 示範如何修正內含 git 衝突標示的 Leo Editor 檔案 2015cp_w6_a_3 from 虎尾科大機械設計工程 on Vimeo . CP W7 介紹如何建立有效率的機械設計工程師可攜程式環境 (Anaconda Python based), 學習計算機程式的概念, 認識程式設計與機械設計工程師角色間的關係 2015_cp_w7_a_1 from 虎尾科大機械設計工程 on Vimeo . 說明近端與 Jupyter 環境的 Python 程式執行, print 與 for 迴圈應用 2015_cp_w7_a_2 from 虎尾科大機械設計工程 on Vimeo . 說明如何將計算機程式的內容放到 gh-pages 網頁 2015_cp_w7_a_3 from 虎尾科大機械設計工程 on Vimeo . 說明如何利用 git reset -- hard 版本編號, 回復舊版本資料 2015fall_cp_w7_b1 from 虎尾科大機械設計工程 on Vimeo . 說明如何修補被弄亂的全班倉儲 2015fall_cp_w7_b1 from 虎尾科大機械設計工程 on Vimeo .","tags":"Courses"},{"title":"2015 Fall CADP part 2","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/11/2015-fall-cadp-part-2/","text":"2015 Fall 電腦輔助設計實習課程內容 part2 電腦輔助設計實習課程倉儲分別為: https://github.com/2015fallhw/2015fallcadpb 與 https://github.com/2015fallhw/2015fallcadpa 2015 Fall CADP 課程 part2 影片摘要: CADP W10 利用電腦解決機械設計工程師所面臨的各種問題 2015cadp_w10_1 from 虎尾科大機械設計工程 on Vimeo . 介紹可攜程式系統的搭建流程與細節 2015cadp_w10_2 from 虎尾科大機械設計工程 on Vimeo . CADP W11 fix.zip 修補流程再介紹, 說明電腦輔助機械設計的目標 2015fallcadpw11_1 from 虎尾科大機械設計工程 on Vimeo . 啟動存放在全班倉儲網頁中的分組報告 2015fallcadpw11_2 from 虎尾科大機械設計工程 on Vimeo . CADP W12 fix.bat 的詳細介紹, Leo Editor 的近端 pip install 應用 2015cadpb_w12_1 from 虎尾科大機械設計工程 on Vimeo . 利用各自 user 目錄下的 Leo Editor 檔案, 發表位於全班 gh-pages 網頁的分組報告, 以電腦輔助方法管理 reveal.js 投影片中的學員學號註記, 介紹網頁式正齒輪齒面寬輔助設計, 說明正齒輪囓合繪製與組合的靜態繪圖與動態繪圖原理 2015cadpb_w12_2 from 虎尾科大機械設計工程 on Vimeo . CADP W13 fix.bat 環境修補複習 cadpaw13_1 from 虎尾科大機械設計工程 on Vimeo . 說明如何利用各學員 user/學號 目錄下的 .leo 檔案發表分組報告, 介紹如何利用 Github pages 展示零組件的 .stl 檔案 cadpaw13_2 from 虎尾科大機械設計工程 on Vimeo . CADP W14 介紹Creo Parametric 零件轉檔方法, gh-pages 網頁上的零件展示, Binary 與 ASCII STL 檔案格式介紹 2015cadp_w14_1 from 虎尾科大機械設計工程 on Vimeo . Onshape 介紹, 開始利用 OnShape 繪製 Nutcracker 零組件 2015cadp_w14_2 from 虎尾科大機械設計工程 on Vimeo . CADP W15 說明如何利用 Onshape, 以雲端協同方式繪製 Nutcracker 零件, 組立 Nutcracker 零件 2015cadp_w15_a1 from 虎尾科大機械設計工程 on Vimeo . CADP W16 介紹 Nutcracker 在 Onshape 環境中如何進行組立, 進行各種 Onshape 組立約束條件的細部特性討論 2015fall_cadp_b_w16 from 虎尾科大機械設計工程 on Vimeo . 說明如何利用 Solvespace 分析 Nutcraker 機構的 Piston 滑動行程極限 2015fallcadp_a_w16_1 from 虎尾科大機械設計工程 on Vimeo . CADP W17 Nutcracker 機構滑動 Piston 零件的滑動行程範圍分析, 說明如何以 Solvespace 圖解法, 以 Sympy 符號及數值分析推導機構邊界直線方程式, 或採基因演算法進行分析 2015fall_cadpb_w17 from 虎尾科大機械設計工程 on Vimeo . 2015fallcadpa_w17 from 虎尾科大機械設計工程 on Vimeo .","tags":"Courses"},{"title":"2015 Fall CADP part 1","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/11/2015-fall-cadp-part-1/","text":"2015 Fall 電腦輔助設計實習課程內容 part1 電腦輔助設計實習課程倉儲分別為: https://github.com/2015fallhw/2015fallcadpb 與 https://github.com/2015fallhw/2015fallcadpa 2015 Fall CADP 課程 part1 影片摘要: CADP W2 介紹可攜程式環境的下載與使用 此一系統包括 Python3 程式環境, Leo Editor, Jupyter, 而每週作業則利用 reveal.js 製作網頁式投影片, 利用 Pelican 產生靜態網頁, 並且讓各學員可以在個人倉儲 gh-pages 與全班倉儲 gh-pages 網頁上來呈現各階段所完成的作業內容. 2015fallcadp_w2_1 from 虎尾科大機械設計工程 on Vimeo . 利用電腦輔助方法, 善用 USB 客製化資料與 C 槽的既有隨身系統, 設法修改 C 槽啟動的 start.bat 批次檔案, 建立符合需求的可攜程式環境. 2015cadp_w2_2 from 虎尾科大機械設計工程 on Vimeo . 介紹 reveal.js 網頁式投影片的使用方法, 介紹 Github pages 倉儲分支 gh-pages 的用法. 2015cadp_w2_3 from 虎尾科大機械設計工程 on Vimeo . 複習倉儲分支之間的切換方法 (git checkout master 或 git checkout gh-pages) 2015cadp_w2_6 from 虎尾科大機械設計工程 on Vimeo . Github 倉儲中 Leo Editor 5.1 版 @clean 節點指令與 reveal.js 網頁式投影片的用法. 2015cadp_w2_reveal from 虎尾科大機械設計工程 on Vimeo . 甲班 CADP W2 可攜程式系統的建立與使用 2015cadpa_1 from 虎尾科大機械設計工程 on Vimeo . avi 影片轉 flv 格式, 以可攜式 VLC 觀看 flv 影片, 利用 python -m http.server 執行近端檔案分享 2015cp_w2_2 from 虎尾科大機械設計工程 on Vimeo . git push origin gh-pages 系列指令的應用 2015cadpa_3 from 虎尾科大機械設計工程 on Vimeo . CADP W3 Pelican 靜態網頁系統建立與分組協同, Solvespace 零件繪圖 2015_cadpa_w3_1 from 虎尾科大機械設計工程 on Vimeo . git rm 的使用, 以及 git 提交, 訊息註記與推送設定 2015_cadpa_w3_2 from 虎尾科大機械設計工程 on Vimeo . Solvespace 零件電腦輔助繪圖 2015_cadpa_w3_3 from 虎尾科大機械設計工程 on Vimeo . CADP W4 根據 What Engineers Do? 電子文件, 說明科學與工程, 自然與人文間的關係 2015fall_cadp_w4_1 from 虎尾科大機械設計工程 on Vimeo . CADP W5 從 2008 年舊資料的回顧, 說明在地化與國際化的整合, 培養有專長, 能就業, 說明文化與教育對工程師的重要影響, 以及追求卓越的本意 2015cadp_w5_1 from 虎尾科大機械設計工程 on Vimeo . zoomit.exe 在錄製電腦輔助設計說明流程上的應用, Leo Editor 與 Pelican 的使用 2015cadp_w5_1 from 虎尾科大機械設計工程 on Vimeo . 電腦輔助設計系列課程的標準執行流程, 可攜, 永續與體貼的電腦輔助設計方法 2015cadp_w5_2 from 虎尾科大機械設計工程 on Vimeo . Creo2 primer 電子書的網頁化處理 2015cadp_w5_3 from 虎尾科大機械設計工程 on Vimeo . CADP W6 啟動可攜系統, Waht Engineers Do? 與 Creo 2 Parametric Primer 資料摘要, Creo Parametric 零件繪製與組立, 開始建立全班協同 gh-pages 網頁, 自行新增為倉儲協同者, 從 git clone 開始參與全班資料協同 2015cadp_a_w6_1 from 虎尾科大機械設計工程 on Vimeo . CADP W7 學員自行新增為全班協同倉儲的協同者, 示範如何參與網頁協同資料管理 2015fall_cadp_w7_1 from 虎尾科大機械設計工程 on Vimeo . start.bat 內容的修改, 設法透過 Jupyter 執行網頁式設計分析或協同網頁資料編輯 2015fall_cadp_w7_2 from 虎尾科大機械設計工程 on Vimeo . 期中報告內容說明, Creo 2 Parametric Primer 電子書閱讀與零件繪製與零件組操作練習 2015cadp_w7_a1 from 虎尾科大機械設計工程 on Vimeo .","tags":"Courses"},{"title":"Kmolab 4032 projects","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/11/kmolab-4032-projects/","text":"KMOL Lab 4032 專題初步研究方向 Github 倉儲: https://github.com/2015fallproject 403231 40323123 林祐生 40323130 康民宗 40323131 張元旭 40323143 陳靖廷 研究動機: 3D 印表機進行零件列印時需要時間, 假如能夠有一個網路排程機制, 可以在線上接受使用者上傳的零件檔案後, 進行批次的零件列印, 並且能夠讓使用者直接在線上追蹤觀測印表機列印情形, 將可有效提升零件列印效能. 研究標的: 一個網路排程系統, 提供使用者利用 Google 帳號登入後, 能夠上傳零件檔案, 直接在線上模擬列印規劃, 計算列印所需時間 一個 3D 印表機的網路控制系統, 能夠與上述網路排程系統結合, 接受使用者的批次列印工作 一個 3D 印表機的列印平台上載與下載 (loading and unloading) 機構, 可以配合印表機的多列印工作, 上下物料與列印完成之零件 case1: 網際 3D 印表機相關多媒體內容管理系統建置 (參考用) Implementation of a Web-based 3D Printer Related Multimedia Content Management System case2: 網際 3D 印表機批次列印管理系統案例研究 (參考用) Case Study of a Web-based 3D Batch Printing Management System 工作項目 列印一個縮小比例, 可以作動的 NutCracker 機構. 參與 kmolab 的協同網誌發表後, 每一成員每週至少必須發表一篇相關資料. 在 17.103 機器上配置 Gogs: https://gogs.io/ 與 Jupyterhub: https://github.com/jupyter/jupyterhub , 讓所有成員都能連線使用. 參考資料 http://octoprint.org/ https://github.com/AstroPrint/AstroBox https://github.com/donovan6000/M3D-Fio https://github.com/Kozea/WeasyPrint 403232 研究動機: Jupyter, Creo Parametric, Onshape 的整合應用 研究標的: Jupyter 平面機構合成 (基因演算法) Creo Parametric Pro/Web.Link 在客製化自行車設計與分析上的應用 Flask 網際程式與 Onshape 系統整合, 建立一套客製化自行車設計系統 工作項目 在 17.102 機器上配置 Gogs: https://gogs.io/ 與 Jupyterhub: https://github.com/jupyter/jupyterhub , 讓所有成員都能連線使用. 參與 kmolab 的協同網誌發表後, 每一成員每週至少必須發表一篇相關資料. 利用 Jupyterhub, 研究基因演算法在機構合成上的應用, 包括 Sympy 與 Deap 的應用. 參考資料 https://github.com/DEAP/deap https://github.com/l-liciniuslucullus/TSP-GA https://www.simscale.com http://superpowers-html5.com/","tags":"project"},{"title":"2015 Fall CADP W16","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/11/2015-fall-cadp-w16/","text":"根據 Nutcracker 機構 的尺寸規格, 請設法算出 Piston 零件的有效運動範圍. 計算 Piston 不發生干涉的有效行程, 可採如下方法: 實際利用 Onshape 中的組立, 移動 piston 零件, 靠目測概略決定 piston 的有效行程. (目測法, 只能得到大概的行程範圍) 利用 Solvespace 繪製 2D 約束圖, 然後利用約束點在線或圓上的方式, 以圖解法解出有效行程, 如下圖一, 圖二與圖三所示. (圖解法, 利用 Solvespace 既有的約束條件設定完成計算) 利用 Jupyter 與 Python3 的 sympy 模組, 先進行符號式推導, 然後再利用數值分析解出 piston 的有效行程, 機構各點標示如下圖四所示, 計算出 的 theta 轉角為 105.7, 如下圖五所示. (以自行編寫的 sympy 程式解題, 透過 Jupyterhub 可以有效進行協同設計運算) 除了上述的目測, 圖解與符號式結合數值分析法之外, 也可以採用 基因演算法解題 , 計算出的 theta 轉角為 105.7, 如下圖六所示. (利用演化法解題, 可以在單機運算, 也可以在 Jupyterhub 平台 上進行運算) 圖一: 利用 Solvespace 中的繪圖約束條件找出右邊的極限點距離 Onshape Piston 組立原點 0.5 圖二: 利用 Solvespace 中的繪圖約束條件找出左邊的極限點距離 Onshape Piston 組立原點 2.23 圖三: 當 piston 位於左邊極限點時, AB 轉角為 105.37 度 圖四: Jupyter 計算分析時機構各點標示圖 圖五: 利用 Jupyter 符號式結合數值分析法所得結果 圖六: 利用基因演算解題, 所得到的結果, 當 piston 位於左邊極限點時, AB 轉角為 105.7 度 若採用 deap 與 numpy 解題 (AB 轉角極限為 105.71 度): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 # 這裡採用 numpy 與 deap 模組解題, 使用 Genetic Algorithm 模式 # 解的問題為 Nutcracker 左邊 connect 轉角極限 import random import array from deap import base from deap import creator from deap import tools import numpy # for evalIntersect 函式中的 sqrt, sin, cos, pi from math import * # 1/4 最小化題目 type of problem creator . create ( \"FitnessMin\" , base . Fitness , weights = ( - 1.0 ,)) creator . create ( \"Individual\" , array . array , typecode = 'd' , \\ fitness = creator . FitnessMin ) # 2/4 initilization # 兩個變數題目 NDIM = 2 toolbox = base . Toolbox () toolbox . register ( \"attr_float\" , random . uniform , 0 , 5 ) toolbox . register ( \"individual\" , tools . initRepeat , creator . Individual , toolbox . attr_float , NDIM ) toolbox . register ( \"population\" , tools . initRepeat , list , toolbox . individual ) # 3/4 選擇 operator step3/4 toolbox . register ( \"select\" , tools . selRandom , k = 3 ) # 也可以採用下列設定 #toolbox.register(\"mate\", tools.cxTwoPoint) #toolbox.register(\"mutate\", tools.mutGaussian, mu=0, sigma=1, indpb=0.1) #toolbox.register(\"select\", tools.selTournament, tournsize=3, k=3) def evalIntersect ( individual ): t = individual [ 0 ] deg = pi / 180 theta = individual [ 1 ] * deg xtarget = 0.75 / 2 ytarget = 0.5 x = t * sqrt ( - 225 * sin ( theta ) ** 2 + 529 ) / 10 - sqrt ( - 225 * sin ( theta ) ** 2 \\ + 529 ) / 92 + 3 * cos ( theta ) / 2 y = ( - 3 * t / 2 + 123 / 92 ) * sin ( theta ) # 適應值 fitness_value = pow ( x - xtarget , 8 ) + pow ( y - ytarget , 8 ) # 指定 t 的範圍, 小於 1 大於 0, 否則給予處罰 if t > 1 : fitness_value += 1000 if t 2 * pi : fitness_value += 1000 if theta < 0 : fitness_value += 1000 return fitness_value , toolbox . register ( \"evaluate\" , evalIntersect ) # 以上到 evaluate 為止, 為定義 operators # 4/4 以下則為 Algorithms def main (): # Differential evolution parameters CR = 0.25 F = 1 MU = 300 NGEN = 200 pop = toolbox . population ( n = MU ); hof = tools . HallOfFame ( 1 ) stats = tools . Statistics ( lambda ind : ind . fitness . values ) stats . register ( \"avg\" , numpy . mean ) stats . register ( \"std\" , numpy . std ) stats . register ( \"min\" , numpy . min ) stats . register ( \"max\" , numpy . max ) # Evaluate the individuals fitnesses = toolbox . map ( toolbox . evaluate , pop ) for ind , fit in zip ( pop , fitnesses ): ind . fitness . values = fit for g in range ( 1 , NGEN ): for k , agent in enumerate ( pop ): a , b , c = toolbox . select ( pop ) y = toolbox . clone ( agent ) index = random . randrange ( NDIM ) for i , value in enumerate ( agent ): if i == index or random . random () agent . fitness : pop [ k ] = y hof . update ( pop ) print ( \"Best individual is \" , hof [ 0 ], hof [ 0 ] . fitness . values [ 0 ]) if __name__ == \"__main__\" : main () 上述課程資料與 Wordpress 網頁 上的資料內容相同, Ｗordpress 網站屬於動態的網誌, 而 http://chiamingyen.github.io/kmolab/ 則是靜態網誌系統, 採用靜態網誌的優點如下: 比較安全 比較不會過時 部署成本比較低 可在各種平台上使用 各階段改版資料均有紀錄","tags":"Courses"},{"title":"Mechanical Designer and IPV6","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/11/mechanical-designer-and-ipv6/","text":"機械設計工程師該如何執行 IPV6 網路設定 隨著 IPV6 協定的逐步推展, 機械設計工程師只需要理解網路發展趨勢, 並逐步在未來幾年內將日常工作導向 IPV4 與 IPV6 共存的環境中, 期開發能夠同時支援雙協定的各式機電光資生 (機械、電子電機、光電、資訊、生物) 與人文科技整合軟硬體, 以下便是在中華電信光世代環境下, 使用雙協定並存的相關設定步驟: 以下資料引用自 http://2014fall.kmol.info/?id=410 , 說明在台灣的中華電信用戶該如何申請並設定 IPV6 連線環境. 情境說明: 當中華電信的 ADSL 用戶升級成為 ADSL2 (光世代) 時, 負責實體進入用戶家中執行設定的工作人員會自帶一個\"用戶帳號@wifi.hinet.net\" 的撥接帳號, 而通常工作人員並不會告知用戶此一帳號的密碼(照理說用戶可以在安裝時向工作人員詢問此一 @wifi.hinet.net 帳號的對應密碼), 另外用戶在申請早期與特定家用電話號碼附掛的網路線時, 會從中華電信取到一個\"用戶帳號\"與密碼, 而此一帳號密碼可以附加成為\"用戶帳號@hinet.net\" 或 \"用戶帳號@ip.hinet.net\" 進行 Modem (這裡以 ZyXEL VDSL2 P883 為例) 的撥接, 若使用者完成 IPV6 試用申請後, 利用 @hinet.net 或 @ip.hinet.net 帳號撥接後, 若用戶為非固接光世代用戶, 就可以同時從中華電信的 DHCP 伺服器取得 IPV4 與 IPV6 等兩種協定的位址. 結論就是： 每一個中華電信用戶總共有兩組可以透過 Modem (這裡以 ZyXEL VDSL2 P883 為例) 撥接進入中華電信的 DHCP 取得 IP 位址的帳號, 其中一組為升級安裝時, 工作人員帶過來的 \"用戶帳號@wifi.hinet.net\", 而另外一組則是 \"用戶帳號@hinet.net\" 或 \"用戶帳號@ip.hinet.net\" 因為筆者並未取得 \"用戶帳號@wifi.hinet.net\" 的對應密碼, 因此無法測試這兩組帳號是否撥接後可以得到相同的效果, 但是\"用戶帳號@hinet.net\" 在完成 IPV6 試用申請後 ,完成撥接即可以取得 IPV4 與 IPV6 等兩組 IP 位址. 設定 IPV4 與 IPV6 dual stack 之前: 利用 ZyXEL P883 執行撥號, 先設定 P883 為 192.168.1.1, 啟動 DHCP Server, 並且從 192.168.1.101 開始, 100 組的 IPV4 IP 提供給實體連線與 Wifi 連線使用, 以\"用戶帳號@wifi.hinet.net\" 及密碼撥接後, P883 即可發揮作用, 其中若連線電腦只有四台以內, 則可以透過實體網路線, 連接到 P883 機器後面的 Hub (集線器), 雖然這4個孔的 Hub 可以方便使用, 但是速度只有到 100M (意思就是若家裡的兩台電腦是透過 P883 內建的4個 Hub 連接, 那麼區網內的網路瓶頸就是 100M, 假如想要讓兩台電腦透過 1000M 以上的速度彼此連線, 就必須將這兩台電腦先接到一個 1000M 以上的 Hub, 再接到 P883 內建的 Hub Port). 由於在 ZyXEL P883 的設定介面中找不到 IPV6 支援的任何畫面 (在隨後的第2階段設定中, 可以知道不需要將 P883 轉到 DHCPIPV6, 機器後面的集線埠, 連線到 Windows 7 以上或 Ubuntu 14.04 都可以自行利用 PPPoE 獨立再撥號連接, 這裡所使用的 ZyXEL 軔體版本為 P883S4_TR069_20141110), 所以若以 P883 執行撥接 (利用 @wifi.hinet.net 帳號)後, 再將電腦接到 P883 的 Hub, 將無法正確透過 IPV6 協定連接到 WAN, 因此以下的 IPV6 dual stack 設定前, 必須在撥接密碼欄中輸入錯誤的密碼, 讓 P883 無法完成撥接, 而且 DHCP Server 必須關閉, 然後由連接在 P883 後 Hub 上的 Ubuntu (以 14.04 LTS 為例) 電腦執行 PPP 的撥接. Ubuntu (以 14.04 LTS 為例) 與中華電信 IPV6 環境使用 完成 IPV6 使用申請, 並接到已經設定完成的通知. 如上所述, 關閉 P883 @wifi.hinet.net 的撥接 (給錯誤密碼並存檔即可), 並且關閉 P883 DHCP Server 運作. 使用下列的 /etc/ppp/options 設定檔案 以 sudo pppoeconf 執行設定, 主要步驟在輸入\"用戶帳號@hinet.net\" 與對應密碼, 其餘一律採用內建設定, 設定結束後, 會自動修改 /etc/network/interfaces 中的內容如下(詳細的 Windows 7 與 Ubuntu 設定步驟請參考: http://www.ipv6.hinet.net/form/HiNet_IPv6_connect-setting.pdf ). /etc/ppp/options 檔案內容: 1 2 3 4 5 6 # /etc/ppp/options # asyncmap 0 crtscts +ipv6 ipv6cp-use-ipaddr # ------ 經過 sudo pppoeconf 修改後的 /etc/network/interfaces 檔案內容: 1 2 3 4 5 6 7 8 9 # The loopback network interface auto lo iface lo inet loopback auto dsl-provider iface dsl-provider inet ppp pre-up /sbin/ifconfig p10p1 up # line maintained by pppoeconf provider dsl-provider auto p10p1 iface p10p1 inet manual 其中的 p10p1 為網路卡的代號 (一般為 eth0 或 eth1), 而手動撥接的指令為 sudo pon dsl-provider (關閉的指令為 sudo poff) 經過上述設定與電腦撥接之後的 ifconfig 呈現結果: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:64 errors:0 dropped:0 overruns:0 frame:0 TX packets:64 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:4880 (16.8 KB) TX bytes:4880 (16.8 KB) p10p1 Link encap:Ethernet HWaddr aa:bb:cc:dd:ee:ff inet6 addr: fe80::d685:64ff:feba:59b/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:15665 errors:0 dropped:158 overruns:0 frame:0 TX packets:13324 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:16816888 (16.8 MB) TX bytes:16816888 (16.8 MB) Interrupt:18 ppp0 Link encap:Point-to-Point Protocol inet addr:168.168.168.168 P-t-P:168.168.168.254 Mask:255.255.255.255 UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1492 Metric:1 RX packets:2060 errors:0 dropped:0 overruns:0 frame:0 TX packets:1548 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:3 RX bytes:1681688 (1.68 MB) TX bytes:168168 (168.168 KB) ppp1 Link encap:Point-to-Point Protocol inet addr:168.168.168.18 P-t-P:168.168.168.254 Mask:255.255.255.255 inet6 addr: 2001:1688:1688:1688:1688:1688:1688:1688/64 Scope:Global inet6 addr: fe80::918:2ec2:7e3:a107/10 Scope:Link inet6 addr: 2001:1688:1688:1688:1688:1688:1168:1168/64 Scope:Global UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1492 Metric:1 RX packets:12547 errors:0 dropped:0 overruns:0 frame:0 TX packets:11592 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:3 RX bytes:18354307 (18.3 MB) TX bytes:1398413 (1.3 MB) 第2階段設定 有了上述的測試設定後(其實主要目的在取得正確的 /etc/ppp/options 設定內容, 因為在 Ubuntu 14.04 LTS 中利用 http://www.ipv6.hinet.net/form/HiNet_IPv6_connect-setting.pdf 執行設定所得到的 /etc/ppp/options 無法正確完成 Modem 撥接), 採用\"用戶帳號@hinet.net\" 進行 PPPoE 撥號的連線, 非固接的光世代連線, 已經可以同時支援 IPV4 與 IPV6 協定, 但是因為 P883 的 DHCP 與 PPPoE 都沒有啟用, 所有 WiFi 的功能就無法使用, 因此弄清楚 Windows 7 操作系統與 Ubuntu 14.04 的 PPPoE 撥號設定後, 嘗試再將 P883 機器中的 DHCP Server 與 PPPoE 撥號啟用後, 再分別利用連接到 P883 集線器的 Windows7 與 Ubuntu 14.04 各自執行 PPPoE 的撥號 (因為中華電信的非固接光世代可以同時支援 8 台 PPPoE 的撥號連線). 首先看 Ubuntu 14.04 中的 /etc/network/interfaces 檔案內容: 1 2 3 4 5 6 7 8 9 10 # The loopback network interface auto lo iface lo inet loopback # for sudo pon dsl-provider auto dsl-provider iface dsl-provider inet ppp pre-up /sbin/ifconfig p10p1 up # line maintained by pppoeconf provider dsl-provider auto p10p1 iface p10p1 inet dhcp 透過上述設定, Ubuntu 會在開機的階段, 先以 PPPoE 撥號, 然後再向 P883 以 dhcp 取得網卡對應的 IPV4 位址, 重新開機後的 ifconfig 檔案內容為: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:133 errors:0 dropped:0 overruns:0 frame:0 TX packets:133 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:9729 (9.7 KB) TX bytes:9729 (9.7 KB) p10p1 Link encap:Ethernet HWaddr aa:bb:cc:dd:ee:ff inet addr:192.168.1.106 Bcast:192.168.1.255 Mask:255.255.255.0 inet6 addr: fe80::d685:64ff:feba:59b/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:8484 errors:0 dropped:0 overruns:0 frame:0 TX packets:8165 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:2904256 (2.9 MB) TX bytes:1086876 (1.0 MB) Interrupt:18 ppp0 Link encap:Point-to-Point Protocol inet addr:168.168.168.168 P-t-P:168.168.168.254 Mask:255.255.255.255 inet6 addr: 2001:1168:1168:1168:1168:1168:1168:1168/64 Scope:Global inet6 addr: fe80::d95f:df3:bd89:1e47/10 Scope:Link inet6 addr: 2001:1168:1168:1168:1168:1168:1168:a849/64 Scope:Global UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1492 Metric:1 RX packets:7610 errors:0 dropped:0 overruns:0 frame:0 TX packets:7460 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:3 RX bytes:2612710 (2.6 MB) TX bytes:827230 (827.2 KB) 設定至此, 已經在既有的 ZyXel P883 IPV4 架構下 (一台 Windows 7 + 一台 Ubuntu 14.04 + 多台 Wifi 裝置), 順利申請中華電信的 IPV6 試用, 完成機房設定後, 自行在 P883 連線之後, 分別在 Windows 7 與 Ubuntu 14.04 以 PPPoE 進行數據機撥號連線, 達到 IPV4 與 IPV6 共存並用的環境, 當使用者希望透過瀏覽器連接到特定 IPV6 網址的網站時, 可以使用 http://[IPV6 網址] 進行連線. 最後, 為什麼在這個時段要進入 IPV6 環境? 隨著 IPV4 網址的消耗殆盡, 有些主機或裝置未來只會有 IPV6 位址, 若不透過 IPV6 協定, 無法連接這些主機或裝置. IPV6 是一條不得不轉進的道路, 愈早涉入, 愈能對於具有未來性的各項軟硬體需求, 作最好的準備. 當許多客戶被迫使用 IPV6 環境後, 有些條件較 IPV4 安全, 但是在點對點的連線下, 可能產生更大的安全危害, 愈早因應, 愈可能降低損害. 目前階段使用 IPV4/IPV6 並存, 可能產生的問題: 連接純 IPV4 的網站, 可能速度反而會較慢 (例如: OpenShift 上的網站, 或 Amazon 平台上的網站). 連接支援 IPV6 的網站, 可能速度會較快 (例如: Youtube 或各項 Google 所提供的服務) 因為讓 double stack 支援的 IPV4 直接曝露在 WAN 上, 若沒有強而有效的防火牆保護, 或者沒有定期更新系統安全修補, 可能會比較容易受到駭客攻擊或利用.","tags":"Ubuntu"},{"title":"Alumni interaction","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/11/alumni-interaction/","text":"主動尋找校友互動 如何尋找校友? 如何互動？ 如何延續價值? 先建立自己的領英網頁 在 https://www.linkedin.com/ 登錄帳號後, 填入個人相關專業資料, 之後將會不定期收到機器寄出的 cold mail, 一般而言, 可以無需理會這些 cold mail, 暫且不管這些電子郵件看起來像是人或機器寫的, 你都必須知道, 建立領英帳號的目的, 是要利用它, 而不是被它利用, 所以絕對要對這些網路上的冷信件, 保持冷靜, 儘量不要回應, 可以直接刪除. 先建立自己的 about.me 網頁 在 https://about.me/ 建立帳號的態度, 應該要與領英一樣, 用它而不要被利用. 意思就是說, 只要在上面提供並更新與個人相關的專業資料, 並在申請學校或找工作的時候發揮其用處, 其他時候, 就該讓它晾在那裡, 不要多費心或浪費時間. 先每天早睡早起, 持續運動 主要的目的在時時刻刻保持覺照, 讓自己每天都精神飽滿, 可以應付課業或工作所需. 找虎尾及雲林縣附近的校友, 一起參加活動 每年都有慢跑活動, 可以找幾個身邊的好朋友, 每年參加, 並且利用網誌紀錄訓練與參賽的過程, 自然就會碰到許多志同道合的朋友與系友. 藉由各屆校友的資料整理, 利用網路進行互動 利用各種機會, 向過去的校友或系友請益, 這些前輩已經浸入社會多年, 擁有各式寶貴的經驗, 假如他們願意花一點時間與後進分享, 那就真是太棒了!","tags":"Alumni"},{"title":"2016 CAD Lab","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/11/2016-cad-lab/","text":"2016 電腦輔助設計室規劃 採購電腦規格與開機磁區規劃 intel Core i7 電腦 63+4 台 - 四台電腦將充作 IPV4/IPV6 相容的 Squid 代理伺服器 防寫保護卡 - 打算使用目前既有的硬碟防寫卡 開機磁區 第1磁區: 64位元 Windows 10 (一般必須安裝的套件) 第2磁區: 64位元 Windows 10 (以無需安裝的綠色套件為主) 第3磁區: Ubuntu Server 加上 ubuntu-desktop 介面 舊電腦分配 淘汰下來的舊電腦分配與應用 網路設置 (以下設置為舊資料, 僅供參考) 目前電腦輔助設計室採 DHCP 換成 140.130.17.82 後連到學校主幹, 理論上設負載平衡的代理主機可以共享網路頻寬, 擷取網路資料的速度會比較快. 代理主機(理論上使用 140.130.17.3 作為 dns server, proxy 採 proxy.mde.nfu.edu.tw 速度最快): proxy.mde.nfu.edu.tw:3128 或 proxy.mde.tw: 3128 或 proxy.kmol.info:3128 問題在於 DNS 伺服器是否可以正確執行任務, 將代理主機符號名稱換成多台 Proxy 的 IP? 學校的 DNS 伺服器: 140.130.1.2 與 140.130.1.20 系上的 DNS 伺服器: 140.130.17.3 中華電信的 DNS 伺服器: 168.95.1.1 DNS 設定優先順序: 系上優先, 再來是學校, 最後才是中華電信. 查驗 DNS 是否正常運作: nslookup 更換 dns server 為 168.95.1.1 server 168.95.1.1 網路設定步驟: 優先使用代理主機\"自動偵測設定\", 系統將會透過 Web Proxy Auto-Discovery Protocol 自動搜尋可用的代理主機, 若連線不正常則進行以下手動設置. 目前的 DNS 伺服器設為哪一台?是否可以正常工作, 可以使用的 DNS 伺服器: 140.130.17.3, 140.130.1.2, 140.130.1.20 與 168.95.1.1 首先設為 140.130.17.3, 利用 nslookup 指令測試是否正常運作, 若不正常則依序改設其他 DNS 伺服器. 此設定的目的在確定可以透過 DNS 伺服器正確將 proxy.mde.tw 轉換為一系列的伺服器群組 IP 若 DNS 伺服器設定與運作正常, 則可以將代理主機設為 proxy.mde.tw:3128 假如 DNS 完全無法運作, 那麼 proxy.mde.tw:3128 由下列 IP 協同分擔運作, 使用者可以自行選擇任何一台作為 Proxy, 埠號都是 3128: IPV6: 2001:288:6004:17::2 2001:288:6004:17::4 2001:288:6004:17::9 2001:288:6004:17::17 2001:288:6004:17::22 2001:288:6004:17::23 IPV4: 140.130.17.2 140.130.17.4 140.130.17.9 140.130.17.17 140.130.17.22 140.130.17.23 假如要查驗目前網路連線情形, 可以檢視 系上即時網路連線圖 以上為 CAD Lab 透過 IPV4 協定使用 DHCP 與 NAT 的模式下, 有關代理主機的設定流程. 若 CAD LAb 所有電腦透過純 IPV6 協定上網, 則必須設定 DNS 與 Proxy 才能讓瀏覽器連網. 優先設系上的 DNS 伺服器: 2001:288:6004:17::3 若系上 DNS 伺服器反應不正常則設學校的 DNS 伺服器: 2001:288:6004:1::2 (另外一台應為: 2001:288:6004:1::20) 若系上與學校 DSN 伺服器反應不正常, 則設中華電信 DNS 伺服器: 2001:b000:168::1 與 2001:b000:168::2 proxy server 設為: proxy.mde.tw:3128","tags":"CADlab"},{"title":"2016 WCM course","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/11/2016-wcm-course/","text":"2016 Spring 網際內容管理課程規劃 github pages 上的靜態網頁系統 Github pages, Leo Editor 與 Pelican site builder html 與 Javascript (Brython based) Python3 的動態網頁 (Flask 與 SQLite based) OpenShift Web Console: https://www.openshift.com 與近端 Flask: http://flask.pocoo.org based 網站程式開發 參考資料 https://github.com/embik/bloks https://github.com/peterhudec/authomatic https://github.com/sigmavirus24/github3.py","tags":"Courses"},{"title":"2016 CD course","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/11/2016-cd-course/","text":"2016 Spring 協同產品設計實習課程規劃 MCAD 套件 Mechanical Computer Aided Design (MCAD) 套件將使用: Onshape: https://www.onshape.com/ Solvespace: http://solvespace.com/index.pl PTC Creo Parametric: http://www.ptc.com/cad/creo/parametric rattleCAD: http://rattlecad.sourceforge.net/ 零組件繪圖與設計 將以自行車設計與 3D 模型組裝作為主題 ＃標準零件庫 http://www.mcmaster.com/ http://www.bolts-library.org/ https://b2b.partcommunity.com/community/ https://grabcad.com/library/tag/bicycle 客製化設計 https://github.com/vallettea/Bicycle http://www.atom3dp.com/ 參考資料 https://github.com/smoqadam/PyFladesk-rss-reader Planar Linkage Analysis: https://copy.com/KLSdcu1EkmnzdV6U Fourbar Synthesis: https://copy.com/FgYUPh6RCpDUMnT1 Spur Gear Design: https://copy.com/nLeN7ODMNv0VLu9G Spur Gear in Creo Parametric: https://copy.com/LeIvhGJCoroQJdva Design of Spur and Helical Gears Transmissions: https://github.com/efirvida/python-gearbox 自行車控制設計: https://plot.ly/ipython-notebooks/bicycle-control-design/ Architecture of Collaboration: https://copy.com/ZzdLE62hSYRSjTD2 https://github.com/Pomax/bezierjs http://bicycledesign.net/ https://en.wikipedia.org/wiki/List_of_bicycle_parts Bicycle Parts (自行車零件): Chains (鏈條): Crank (曲柄): Frame (車架): Front Derailleur (前變速器): Handle Bar (車把): Hub (花鼓): Lever (桿): Rear Derailleur (後變速器): Rear Hub and Casette (後輪花鼓與飛輪組): Seat (座墊): Wheel (車輪): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 Bicycle 自行車 Tire 輪胎 Rim 輪圈 Saddle 坐墊 Seat post 座桿 Seat post clamp 座桿束子 Rear brake 後剎車 Front brake 前剎車 Seat stay 後上叉 Chain stay 後下叉 Seat tube 座管 Top tube 上管 Down tube 下管 Freewheel / cassette Sprockets 飛輪 Rear Ends/Dropouts 後叉端 Derailleur Cable 變速導線 Rear Derailleur 後變速器 Chain 鏈條 Pedal 腳踏 Front Derailleur 前變速器 軸 axle 滾珠軸承 ball bearing 車鈴 bicycle ball 車架 bicycle frame Rear suspension 後避震 Chainwheel&cranks 大齒盤及曲柄 Valve 汽門嘴 Spoke (輪圈)幅條 Spoke Nipple (幅條)接頭 Front fork end 前叉端 Hubs 花鼓 Quick release 快拆桿 Front fork 前叉 Brake cable 剎車導線 Front crown 前叉肩蓋 Brake cable housing 剎車導線 Brake lever 剎車握把 Bar end 小手把（副把手） Grip/tape 握把套 Head tube 頭管 Handlebar 車把 Derailleur lever 變速桿 Stem 豎管 Head parts 車頭碗組 Kickstand 停車柱 Chain cover 鏈蓋 Head Light 前燈 Back mirror 後照鏡 Reflector 反光片 Luggage Carrier 貨架","tags":"Courses"},{"title":"About 17.101 server","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/11/about-17101-server/","text":"Ubuntu 伺服器 設定 介紹 17.101 機器的設定與使用 ubuntu-desktop 這一台 HP 伺服器, 原本安裝 Ubuntu Server 操作系統, 然後再加裝 desktop gui 介面相關套件: sudo apt-get install ubuntu-desktop nginx 與 uwsgi 之後因為卸除 Python3 相關的所有套件, 導致單機桌面無法登入, 所有介面操作, 只能透過網路, 以 X Windows 連線. 目前 17.101 總計啟動 IPV4 與 IPV6 網路設定. /etc/network/interfaces 設定檔案: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 auto lo iface lo inet loopback auto em1 iface em1 inet static address 140.130.17.101 netmask 255.255.255.0 network 140.130.17.0 broadcast 140.130.17.255 gateway 140.130.17.254 dns-nameservers 140.130.1.2 168.95.1.1 dns-search mde.nfu.edu.tw iface em1 inet6 static address 2001:288:6004:17::101 netmask 64 gateway 2001:288:6004:17::254 dns-nameservers 2001:288:6004:1::2 2001:b000:168::1 17.101 還安裝了 Nginx 與 uwsgi, 分別在 port 80 與 88 執行 CMSimply, 並在 https://140.130.17.101:9443 安裝 Jupyterhub, 只是 IPv6 模式下的 Jupyterhub 還無法使用. squid proxy 伺服器 利用 sudo apt-get install squid, 安裝 squid proxy server. 設定檔案位於 /etc/squid3/squid.conf 每次修改設定檔案後, 利用 sudo service squid3 restart, 重新啟動. 參考的設定檔案: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 acl cad_lab src 140.130.17.0/24 acl cad_lab src 2001:288:6004:17::/64 acl SSL_ports port 443 acl Safe_ports port 80 # http acl Safe_ports port 88 #acl Safe_ports port 21 # ftp acl SSL_ports port 8443 acl Safe_ports port 8443 acl SSL_ports port 9443 acl Safe_ports port 9443 acl SSL_ports port 22 acl Safe_ports port 22 acl Safe_ports port 443 # https acl Safe_ports port 1025-65535 # unregistered ports acl Safe_ports port 280 # http-mgmt acl Safe_ports port 488 # gss-http acl Safe_ports port 591 # filemaker acl Safe_ports port 777 # multiling http acl CONNECT method CONNECT # Deny requests to certain unsafe ports http_access deny !Safe_ports # Deny CONNECT to other than secure SSL ports http_access deny CONNECT !SSL_ports http_access allow cad_lab http_access deny all # Only allow cachemgr access from localhost http_access allow localhost manager http_access deny manager #http_access allow localnet http_access allow localhost # And finally deny all other access to this proxy http_access deny all # Squid normally listens to port 3128 http_port 3128 #cache_dir ufs /var/spool/squid3 100 16 256 icp_port 3130 icp_access allow all cache_dir ufs /var/spool/squid3 2000 16 256 cache_peer 140.130.17.2 sibling 3128 3130 cache_peer 140.130.17.4 sibling 3128 3130 cache_peer 140.130.17.9 sibling 3128 3130 cache_peer 140.130.17.22 sibling 3128 3130 cache_peer 140.130.17.23 sibling 3128 3130 # # Add any of your own refresh_pattern entries above these. # refresh_pattern &#94;ftp: 1440 20% 10080 refresh_pattern &#94;gopher: 1440 0% 1440 refresh_pattern -i (/cgi-bin/|\\?) 0 0% 0 refresh_pattern (Release|Packages(.gz)*)$ 0 20% 2880 refresh_pattern . 0 20% 4320 當 Ubuntu 在純 IPV6 環境時, 希望使用 IVP6 Git proxy 設定時, 可以利用: git config --global http.proxy http://[IPV6 位址]:埠號 例如: git config -- global http.proxy http://[2001:168:168::168]:3128 至於 python pip3 在純 IPV6 環境下, 也必須設定 proxy 才能正確運作: ~.pip/pip.conf 內容 1 2 [global] proxy = http://your.proxy.domain.name:3128 假如要解除 git proxy 設定: 1 2 git config --global --unset http.proxy git config --global --unset https.proxy","tags":"Ubuntu"},{"title":"Kmolab initialized","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/11/kmolab-initialized/","text":"KMOL Lab 啟用 Github pages 靜態網頁 二十一世紀是電腦網路與人工智慧充分整合的世代, Kmolab 一直以來對於人才的培育, 始終強調必須充份了解電腦的基本運作, 實際應用網路架構提升設計效能, 並且採用演化分析方法來發揮電腦的高速運算能力. 然而這些理念的落實, 必須從電腦的操作系統安裝設定開始, 進而納入 IPV4 與 IPV6 網路協定架構整合, 並且每一成員都有能力運用近端、 廣域主機與雲端主機上的各項軟硬體資源, 將知識管理與最佳化應用的精神納入產品的設計開發, 才能真正融入知識經濟與國際協同的趨勢. 首先以安裝設定 Ubuntu Server 開始. 安裝 Ubuntu Server 基本系統安裝 從 https://wiki.ubuntu.com/LTS , 可以了解各 Ubuntu 版次的產品生命週期, 就現在這個時間點來說, Ubuntu 14.04 的生命週期最長, 因此選擇安裝 14.04 的 Server 版本. 步驟一, 就是從 http://www.ubuntu.com/download/server 下載 Ubuntu Server 14.04 版本的 iso 檔案, 然後燒錄到 DVD 光碟上, 然後用此光碟開機執行安裝. 假如電腦並沒有 DVD 光碟機, 而只有早期的 CD Rom 光碟機, 可以下載 https://help.ubuntu.com/community/Installation/MinimalCD , 然後燒錄到 CD 片, 並且將網路線接上電腦的網路插槽, Ubuntu 就會透過網路線取得大部分的安裝資料, 順利完成安裝, 唯一必須注意的則是, 若此電腦位於內部網路, 通常必須要設定 proxy Server 才能順利從外部電腦取回安裝所需的資料. 步驟二, 一旦電腦接受 Ubuntu 14.04 的光碟開機之後, 隨後的安裝必須設定網路連線與管理者帳號密碼, 並且通常直接選擇安裝 OpenSSL 套件, 以便讓電腦可以透過 ssh 進行連線. 步驟三, IPV4 與與 IPV6 網路設定, /etc/network/interfaces 檔案內容: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # This file describes the network interfaces available on your system # and how to activate them. For more information, see interfaces(5). # The loopback network interface auto lo iface lo inet loopback # The primary network interface auto eth0 iface eth0 inet static address 140.130.17.17 netmask 255.255.255.0 network 140.130.17.0 broadcast 140.130.17.255 gateway 140.130.17.254 # dns-* options are implemented by the resolvconf package, if installed dns-nameservers 140.130.1.2 140.130.17.3 168.95.1.1 dns-search mde.nfu.edu.tw # The IPv6 based entries for the primary network interface iface eth0 inet6 static address 2001:288:6004:17::17 netmask 64 gateway 2001:288:6004:17::254 dns-nameservers 2001:288:6004:1::2 2001:b000:168::1 # for internal ip setup auto eth1 iface eth1 inet dhcp 步驟四, 利用 sudo apt-get update 與 sudo apt-get upgrade 更新並升級上一改版後可能已經釋出的版本更新. 步驟五, 利用 sudo apt-get install ubuntu-desktop, 安裝 ubuntu-desktop, 主要目的在讓初學者可以利用 desktop 所提供的互動介面進行操作, 而非僅透過 command shell 執行操作. 步驟六, 利用 sudo apt-get install gcin, 安裝 gcin, 切換語系, 讓使用者可以利用各種輸入法輸入中文 (安裝後 ctrl+alt+6 可以切換成詞音輸入法). 步驟七, 安裝 pip3, PyQt 與 Leo Editor. sudo apt-get install python3-pip sudo apt-get install python3-pyqt4 sudo pip3 install https://github.com/leo-editor/leo-editor/archive/master.zip 上述三項模組安裝完成後, 以 leo& 開啟 Leo Editor. 步驟八, 利用 sudo apt-get install git, 安裝 git client 工具. 步驟九, 安裝 Wine, 可以直接在 Ubuntu 環境中, 執行部份的 Windows 程式. sudo add-apt-repository ppa:ubuntu-wine/ppa sudo apt-get update sudo apt-get install wine1.7 步驟十, 利用 sudo apt-get install squid, 安裝 squid proxy server. 設定檔案位於 /etc/squid3/squid.conf 每次修改設定檔案後, 利用 sudo service squid3 restart, 重新啟動. squid3 參考設定: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 acl cad_lab src 140.130.17.0/24 acl cad_lab src 2001:288:6004:17::/64 acl SSL_ports port 443 acl Safe_ports port 80 # http acl Safe_ports port 88 #acl Safe_ports port 21 # ftp acl SSL_ports port 8443 acl Safe_ports port 8443 acl SSL_ports port 9443 acl Safe_ports port 9443 acl SSL_ports port 22 acl Safe_ports port 22 acl Safe_ports port 443 # https acl Safe_ports port 1025-65535 # unregistered ports acl Safe_ports port 280 # http-mgmt acl Safe_ports port 488 # gss-http acl Safe_ports port 591 # filemaker acl Safe_ports port 777 # multiling http acl CONNECT method CONNECT # Deny requests to certain unsafe ports http_access deny !Safe_ports # Deny CONNECT to other than secure SSL ports http_access deny CONNECT !SSL_ports http_access allow cad_lab http_access deny all # Only allow cachemgr access from localhost http_access allow localhost manager http_access deny manager #http_access allow localnet http_access allow localhost # And finally deny all other access to this proxy http_access deny all # Squid normally listens to port 3128 http_port 3128 #cache_dir ufs /var/spool/squid3 100 16 256 icp_port 3130 icp_access allow all cache_dir ufs /var/spool/squid3 2000 16 256 cache_peer 140.130.17.2 sibling 3128 3130 cache_peer 140.130.17.4 sibling 3128 3130 cache_peer 140.130.17.9 sibling 3128 3130 cache_peer 140.130.17.22 sibling 3128 3130 cache_peer 140.130.17.23 sibling 3128 3130 # # Add any of your own refresh_pattern entries above these. # refresh_pattern &#94;ftp: 1440 20% 10080 refresh_pattern &#94;gopher: 1440 0% 1440 refresh_pattern -i (/cgi-bin/|\\?) 0 0% 0 refresh_pattern (Release|Packages(.gz)*)$ 0 20% 2880 refresh_pattern . 0 20% 4320 新增其他管理者與一般用戶帳號 新增一般用戶 (假設新帳號為 username): sudo adduser username 過程中會先詢問允許執行 sudo 指令的帳號對應密碼, 然後再輸入兩次 username 的對應密碼 將一般用戶轉為管理者用戶: sudo visudo 將 username 納為可以執行 sudo 的帳號 其中以上下鍵將游標移到管理者帳號設定區, 根據 %admin 行所提示的格式輸入, 先將要轉為管理者的 username 帳號放在第1區, 接著輸入允許執行 sudo 的權限, 之後再利用 Ctrl+o 存檔, 存檔後該用戶即可生效成為系統的管理者. 安裝 nginx sudo apt-get update sudo apt-get install nginx 在 Ubuntu 安裝 nginx 後: nginx 安裝在: /etc/nginx nginx 設定檔案: /etc/nginx/nginx.conf 網站根目錄: /usr/share/nginx/html 內建的設定檔案: /etc/nginx/sites-available/default 安裝 Leo Editor 安裝 pip3 sudo apt-get install python3-pip 安裝 pyqt4 1 sudo apt–get install python3–pyqt4 選擇 Leo Editor 版本程式進行安裝 1 sudo pip3 install https://github.com/leo-editor/leo-editor/archive/broke-abbrev.zip 執行 Leo Editor leo& 安裝 CMSimply sudo pip3 install cherrypy git clone cmsimply 原始碼後, 可以利用 python3 application 在 127.0.0.7:8080 執行 安裝 google-chrome sudo apt-get install libxss1 libappindicator1 libindicator7 wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb sudo dpkg -i google-chrome*.deb 手動安裝 PyQt4 先安裝 sip sudo wget http://sourceforge.net/projects/pyqt/files/sip/sip-4.16.9/sip-4.16.9.tar.gz sudo tar -xvf sip-4.16.9.tar.gz cd sip-4.16.9 sudo python3 configure.py sudo make sudo make install 再安裝 PyQt4 sudo wget http://downloads.sourceforge.net/project/pyqt/PyQt4/PyQt-4.11.4/PyQt-x11-gpl-4.11.4.tar.gz sudo tar -xvf PyQt-x11-gpl-4.11.4.tar.gz cd PyQt-x11-gpl-4.11.4 sudo python3 configure.py sudo make sudo make install 手動安裝 Python 3.4.3 註: 在 Ubuntu 1503382 錯誤尚未解決之前, 必須手動移除 Python3, 然後手動安裝 Python 3.4.3 以及 pip3 之後, 才能安裝 uwsgi 模組. 安裝 Python 之前, 先安裝 sqlite3 與 libsqlite3-dev (否則 Python 無法建立 sqlite3 模組) sudo apt-get install sqlite3 libsqlite3-dev 再安裝 Python 3.4.3 sudo apt-get install libssl-dev openssl cd /opt sudo wget python.org/ftp/python/3.4.3/Python-3.4.3.tgz sudo tar -xzvf Python-3.4.3.tgz cd Python-3.4.3 sudo ./configure sudo make sudo make install python3 安裝 pip3 sudo wget https://pypi.python.org/packages/source/p/pip/pip-7.1.2.tar.gz sudo tar -xvf pip-7.1.2.tar.gz cd pip-7.1.2 sudo python3 setup.py install 安裝 uwsgi sudo pip3 install uwsgi 移除 nginx 只保留舊的設定檔案, 其餘移除 sudo apt-get remove nginx nginx-common 將所有與 nginx 有關的資料, 全數移除 sudo apt-get purge nginx nginx-common 移除用不到的相依套件 sudo apt-get autoremove 設定 nginx 與 uwsgi sudo apt-get install nginx 內定 nginx 安裝目錄: /etc/nginx nginx 設定檔案: /etc/nginx/nginx.conf 網站根目錄: /usr/share/nginx/html 內建的設定檔案: /etc/nginx/sites-available/default 與 nginx 結合的 default 設定檔: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 server { listen 80 default_server ; listen [ :: ] : 80 default_server ipv6only = on ; listen 443 ssl ; location / static { alias / home / yen / cmsimply / wsgi / static / ; } location / { include uwsgi_params ; uwsgi_pass 127 . 0 . 0 . 1 : 8080 ; } server_name localhost ; #ssl on ; ssl_certificate / etc / nginx / ssl / nginx .crt ; ssl_certificate_key / etc / nginx / ssl / nginx .key ; ssl_session_timeout 5m ; ssl_protocols SSLv3 TLSv1 TLSv1 .1 TLSv1 .2 ; ssl_ciphers \"HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES\" ; ssl_prefer_server_ciphers on ; try_files $ uri $ uri / = 404 ; } uwsgi_params 檔案: 1 2 3 4 5 6 7 8 9 10 11 12 13 uwsgi_param QUERY_STRING $ query_string ; uwsgi_param REQUEST_METHOD $ request_method ; uwsgi_param CONTENT_TYPE $ content_type ; uwsgi_param CONTENT_LENGTH $ content_length ; uwsgi_param REQUEST_URI $ request_uri ; uwsgi_param PATH_INFO $ document_uri ; uwsgi_param DOCUMENT_ROOT $ document_root ; uwsgi_param SERVER_PROTOCOL $ server_protocol ; uwsgi_param REMOTE_ADDR $ remote_addr ; uwsgi_param REMOTE_PORT $ remote_port ; uwsgi_param SERVER_ADDR $ server_addr ; uwsgi_param SERVER_PORT $ server_port ; uwsgi_param SERVER_NAME $ server_name ; 位於 /etc/init 下的 uwsgi.conf 檔案設定: 1 2 3 4 5 6 7 description \"uwsgi for cmsimply\" start on runlevel [2345] stop on runlevel [06] respawn exec uwsgi --master --processes 4 --die-on-term --socket :8080 --chdir /home/yen/cmsimply/wsgi --wsgi-file /home/yen/cmsimply/wsgi/application 在 Python wsgi cherrypy 程式中的啟動: application = cherrypy.Application(root, config = application_conf) 重新啟動 nginx: sudo service nginx restart 重新啟動 uwsgi: sudo service uwsgi restart uwsgi 啟動多個 Python 程式 利用 nginx 與 uwsgi 啟動多個 Python 應用程式: 必須採用 uwsgi Emperor 啟動模式設定: /etc/init/uwsgi.conf 檔案內容: 1 2 3 4 5 6 7 8 9 10 11 12 # Emperor uwsgi script description \"uwsgi Emperor\" start on runlevel [2345] stop on runlevel [06] respawn # 以下為以 user id yen 與 user group yen 執行單一 Python 應用程式的 Upstart 設定 # exec uwsgi --master --processes 4 --die-on-term --uid yen --gid yen --socket :8080 --chdir /home/yen/cmsimply/wsgi --wsgi-file /home/yen/cmsimply/wsgi/application # 以下為以 yen:yen 執行多個 Python 應用程式的設定, uwsgi --emperor 會進入 /home/yen/uwsgi_ini 目錄執行所有的 .ini 應用程式設定 exec uwsgi --uid yen --gid yen --emperor /home/yen/uwsgi_ini /home/yen/uwsgi_ini 目錄中有 uwsgi.ini 與 uwsgi2.ini 設定檔, 分別用來啟動 /home/yen/cmsimply/wsgi/application 與 /home/yen/cmsimply2/wsgi/application uwsgi.ini 內容: 1 2 3 4 5 6 [uwsgi] socket = :8080 processes = 4 master = true chdir = /home/yen/cmsimply/wsgi wsgi-file = /home/yen/cmsimply/wsgi/application uwsgi2.ini 內容: 1 2 3 4 5 6 [uwsgi] socket = :8081 processes = 4 master = true chdir = /home/yen/cmsimply2/wsgi wsgi-file = /home/yen/cmsimply2/wsgi/application nginx 位於 sites-enabled 目錄下的 default 設定檔: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 server { listen 80 default_server ; listen [ :: ] : 80 default_server ipv6only = on ; listen 443 ssl ; listen [ :: ] : 443 ssl ipv6only = on ; location / static { alias / home / yen / cmsimply / wsgi / static / ; } location / { include uwsgi_params ; uwsgi_pass 127 . 0 . 0 . 1 : 8080 ; } server_name localhost ; #ssl on ; ssl_certificate / etc / nginx / ssl / nginx .crt ; ssl_certificate_key / etc / nginx / ssl / nginx .key ; ssl_session_timeout 5m ; ssl_protocols SSLv3 TLSv1 TLSv1 .1 TLSv1 .2 ; ssl_ciphers \"HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES\" ; ssl_prefer_server_ciphers on ; try_files $ uri $ uri / = 404 ; } server { listen 88 default_server ; listen [ :: ] : 88 default_server ipv6only = on ; listen 8443 ssl ; listen [ :: ] : 8443 ssl ipv6only = on ; location / static { alias / home / yen / cmsimply2 / wsgi / static / ; } location / { include uwsgi_params ; uwsgi_pass 127 . 0 . 0 . 1 : 8081 ; } server_name localhost ; #ssl on ; ssl_certificate / etc / nginx / ssl / nginx .crt ; ssl_certificate_key / etc / nginx / ssl / nginx .key ; ssl_session_timeout 5m ; ssl_protocols SSLv3 TLSv1 TLSv1 .1 TLSv1 .2 ; ssl_ciphers \"HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES\" ; ssl_prefer_server_ciphers on ; try_files $ uri $ uri / = 404 ; } 重新啟動 nginx: sudo service nginx restart 重新啟動 uwsgi: sudo service uwsgi restart 按照上述設定完成的測試用主機: /home/yen/cmsimply 程式執行: IPV6 網址: http://[2001:288:6004:17::101] https://[2001:288:6004:17::101] IPV4 網址: http://140.130.17.101 https://140.130.17.101 /home/yen/cmsimply2 程式執行: IPV6 網址: http://[2001:288:6004:17::101]:88 https://[2001:288:6004:17::101]:8443 http://140.130.17.101:88 https://140.130.17.101:8443 純 IPV6 ssh 從只有 IPV6 網址的電腦要 ssh 到另一台 IPV6 電腦: ssh -6 帳號@IPV6 位址 例如: ssh -6 account@2001:288:6004:1::1 安裝 Jupyterhub sudo apt-get install npm nodejs-legacy sudo npm install -g configurable-http-proxy sudo pip3 install jupyterhub sudo pip3 install IPython sudo pip3 install \"ipython[notebook]\" 以 SSL 啟動 : 先建立 key 與 certificate: sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout jupyterhub.key -out jupyterhub.crt jupyterhub –ip 10.0.1.2 –port 443 –ssl-key jupyterhub.key –ssl-cert jupyterhub.cert 或不指定 IP jupyterhub –port 9443 –ssl-key my_ssl.key –ssl-cert my_ssl.cert 之後則可以 https://jupyterIP:9443 連線 putty 與 x windows SSH 設定 X11 ->X11 forwarding 勾選 Enable X11 forwarding X display location: 填入 localhost:0 若在 Windows 環境, 希望能夠將其他電腦上的 X window 畫面顯示在近端, 必須先啟動 xming for Windows http://sourceforge.net/projects/xming/ github 倉儲協同流程 每一位成員在倉儲 users 目錄下各自擁有一個維護資料的 user.leo 檔案 每位成員可以利用 git clone 方式, 將遠端現有的資料倉儲放入近端硬碟中 在 content 目錄下, 以用戶名稱+日期的方式建立 .md 檔案, 若在近端測試, 可以利用 local-pelican 按鈕產生靜態網頁 若在推送過程發現遠端有新的版本資料, 則必須透過 git pull origin gh-pages 的方式拉下資料後, 嘗試進行自動合併. 若無共同編輯的 .md 檔案, 則通常可以利用 gh-pages-pelican 按鈕建立遠端使用的靜態文件檔. 若各內容檢查無誤, 則可以推送到遠端. Openshift 網站 隨身裝置啟動後的 home/.ssh/id_rsa 中的 OpenSSH 私鑰與 OpenShift 帳號上 settings 中的公鑰對應, 如此方具備在近端複製程式碼的權限.","tags":"project"},{"title":"Kmolab user 文章套稿","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/10/kmolab-user-wen-zhang-tao-gao/","text":"這裡可以放入文章的摘要內容 文章標題 這裡開始文章內容 文章內放入超文件的連結: http://chiamingyen.github.io/kmolab 文章子標題 文章內放入圖片: 引入程式碼 1 2 3 4 5 6 7 8 9 10 import math # Pythagoras Theorem def hypotenuse ( side1 , side2 ): return math . sqrt ( math . pow ( side1 , 2 ) + math . pow ( side2 , 2 )) side1 = 3 side2 = 4 h = hypotenuse ( side1 , side2 ) print ( a right triangle with side1 = \", side1, \" and side2 = \", side2, \" the hypotenuse is : \", h)","tags":"project"},{"title":"Pelican setup","url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/10/pelican-setup/","text":"Pelican templae 設定 假如使用 https://github.com/DandyDev/pelican-bootstrap3 template, 則可將 Set SHOW_ARTICLE_AUTHOR 設為 True, 就可以在每篇文章中顯示作者. SHOW_ARTICLE_CATEGORY 則用來顯示類別. SHOW_DATE_MODIFIED 則可顯示文章修改的日期.","tags":"Python"}]}