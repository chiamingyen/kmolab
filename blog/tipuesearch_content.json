{"pages":[{"url":"http://chiamingyen.github.io/kmolab/blog/pages/about/","text":"KMOL 實驗室 KMOL Lab 為台灣國立虎尾科技大學, 機械設計工程系, 知識管理與最佳化應用實驗室, 全稱為 Knowledge Management and Optimal Utilization Laboratory (縮寫為 KMOUL 或 KMOL, 音同 CAMEL), Department of Mechanical Design Engineering, National Formosa University, Taiwan. KMOL信念 二十一世紀的科技大學, 在培育具世界觀與在地文化素養, 能適應環境並成功面對挑戰之專業人才. 所謂專業, 即具有專長, 能夠就業之謂. 所謂文化者, 因思考及概念而有之教化. 所謂素養, 即平日的涵養. Excellence is an art won by training and habituation. We do not act rightly because we have virtue or excellence, but we rather have those because we have acted rightly. We are what we repeatedly do. Excellence, then, is not an act but a habit. — Aristotle (384 BC – March 7, 322 BC) 卓越須經由訓練與習慣養成才能獲得。並非具備品德或卓越能讓人舉止得宜，反而是舉止得宜能讓人卓越。經過切身重複實作，才可體會，卓越並非一種作為，而是習慣。 — 亞理士多德 (西元前 384 年 – 西元前 322 年 3 月 7 日) 體魄康強, 精神活潑, 舉止端莊, 人格健全, 便是大學生的風度. 不倦的追求真理, 熱烈的愛護國家, 積極的造福人類, 才是大學生的職志. — 羅家倫 (1928) KMOL 標誌","tags":"misc","title":"About"},{"url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/06/mechanical-designer-and-ipv6/","text":"機械設計工程師該如何執行 IPV6 網路設定 隨著 IPV6 協定的逐步推展, 機械設計工程師只需要理解網路發展趨勢, 並逐步在未來幾年內將日常工作導向 IPV4 與 IPV6 共存的環境中, 期開發能夠同時支援雙協定的各式機電光資生 (機械、電子電機、光電、資訊、生物) 與人文科技整合軟硬體, 以下便是在中華電信光世代環境下, 使用雙協定並存的相關設定步驟: 以下資料引用自 http://2014fall.kmol.info/?id=410 , 說明在台灣的中華電信用戶該如何申請並設定 IPV6 連線環境. 情境說明: 當中華電信的 ADSL 用戶升級成為 ADSL2 (光世代) 時, 負責實體進入用戶家中執行設定的工作人員會自帶一個\"用戶帳號@wifi.hinet.net\" 的撥接帳號, 而通常工作人員並不會告知用戶此一帳號的密碼(照理說用戶可以在安裝時向工作人員詢問此一 @wifi.hinet.net 帳號的對應密碼), 另外用戶在申請早期與特定家用電話號碼附掛的網路線時, 會從中華電信取到一個\"用戶帳號\"與密碼, 而此一帳號密碼可以附加成為\"用戶帳號@hinet.net\" 或 \"用戶帳號@ip.hinet.net\" 進行 Modem (這裡以 ZyXEL VDSL2 P883 為例) 的撥接, 若使用者完成 IPV6 試用申請後, 利用 @hinet.net 或 @ip.hinet.net 帳號撥接後, 若用戶為非固接光世代用戶, 就可以同時從中華電信的 DHCP 伺服器取得 IPV4 與 IPV6 等兩種協定的位址. 結論就是： 每一個中華電信用戶總共有兩組可以透過 Modem (這裡以 ZyXEL VDSL2 P883 為例) 撥接進入中華電信的 DHCP 取得 IP 位址的帳號, 其中一組為升級安裝時, 工作人員帶過來的 \"用戶帳號@wifi.hinet.net\", 而另外一組則是 \"用戶帳號@hinet.net\" 或 \"用戶帳號@ip.hinet.net\" 因為筆者並未取得 \"用戶帳號@wifi.hinet.net\" 的對應密碼, 因此無法測試這兩組帳號是否撥接後可以得到相同的效果, 但是\"用戶帳號@hinet.net\" 在完成 IPV6 試用申請後 ,完成撥接即可以取得 IPV4 與 IPV6 等兩組 IP 位址. 設定 IPV4 與 IPV6 dual stack 之前: 利用 ZyXEL P883 執行撥號, 先設定 P883 為 192.168.1.1, 啟動 DHCP Server, 並且從 192.168.1.101 開始, 100 組的 IPV4 IP 提供給實體連線與 Wifi 連線使用, 以\"用戶帳號@wifi.hinet.net\" 及密碼撥接後, P883 即可發揮作用, 其中若連線電腦只有四台以內, 則可以透過實體網路線, 連接到 P883 機器後面的 Hub (集線器), 雖然這4個孔的 Hub 可以方便使用, 但是速度只有到 100M (意思就是若家裡的兩台電腦是透過 P883 內建的4個 Hub 連接, 那麼區網內的網路瓶頸就是 100M, 假如想要讓兩台電腦透過 1000M 以上的速度彼此連線, 就必須將這兩台電腦先接到一個 1000M 以上的 Hub, 再接到 P883 內建的 Hub Port). 由於在 ZyXEL P883 的設定介面中找不到 IPV6 支援的任何畫面 (在隨後的第2階段設定中, 可以知道不需要將 P883 轉到 DHCPIPV6, 機器後面的集線埠, 連線到 Windows 7 以上或 Ubuntu 14.04 都可以自行利用 PPPoE 獨立再撥號連接, 這裡所使用的 ZyXEL 軔體版本為 P883S4_TR069_20141110), 所以若以 P883 執行撥接 (利用 @wifi.hinet.net 帳號)後, 再將電腦接到 P883 的 Hub, 將無法正確透過 IPV6 協定連接到 WAN, 因此以下的 IPV6 dual stack 設定前, 必須在撥接密碼欄中輸入錯誤的密碼, 讓 P883 無法完成撥接, 而且 DHCP Server 必須關閉, 然後由連接在 P883 後 Hub 上的 Ubuntu (以 14.04 LTS 為例) 電腦執行 PPP 的撥接. Ubuntu (以 14.04 LTS 為例) 與中華電信 IPV6 環境使用 完成 IPV6 使用申請, 並接到已經設定完成的通知. 如上所述, 關閉 P883 @wifi.hinet.net 的撥接 (給錯誤密碼並存檔即可), 並且關閉 P883 DHCP Server 運作. 使用下列的 /etc/ppp/options 設定檔案 以 sudo pppoeconf 執行設定, 主要步驟在輸入\"用戶帳號@hinet.net\" 與對應密碼, 其餘一律採用內建設定, 設定結束後, 會自動修改 /etc/network/interfaces 中的內容如下(詳細的 Windows 7 與 Ubuntu 設定步驟請參考: http://www.ipv6.hinet.net/form/HiNet_IPv6_connect-setting.pdf ). /etc/ppp/options 檔案內容: 1 2 3 4 5 6 # /etc/ppp/options # asyncmap 0 crtscts +ipv6 ipv6cp-use-ipaddr # ------ 經過 sudo pppoeconf 修改後的 /etc/network/interfaces 檔案內容: 1 2 3 4 5 6 7 8 9 # The loopback network interface auto lo iface lo inet loopback auto dsl-provider iface dsl-provider inet ppp pre-up /sbin/ifconfig p10p1 up # line maintained by pppoeconf provider dsl-provider auto p10p1 iface p10p1 inet manual 其中的 p10p1 為網路卡的代號 (一般為 eth0 或 eth1), 而手動撥接的指令為 sudo pon dsl-provider (關閉的指令為 sudo poff) 經過上述設定與電腦撥接之後的 ifconfig 呈現結果: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:64 errors:0 dropped:0 overruns:0 frame:0 TX packets:64 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:4880 (16.8 KB) TX bytes:4880 (16.8 KB) p10p1 Link encap:Ethernet HWaddr aa:bb:cc:dd:ee:ff inet6 addr: fe80::d685:64ff:feba:59b/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:15665 errors:0 dropped:158 overruns:0 frame:0 TX packets:13324 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:16816888 (16.8 MB) TX bytes:16816888 (16.8 MB) Interrupt:18 ppp0 Link encap:Point-to-Point Protocol inet addr:168.168.168.168 P-t-P:168.168.168.254 Mask:255.255.255.255 UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1492 Metric:1 RX packets:2060 errors:0 dropped:0 overruns:0 frame:0 TX packets:1548 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:3 RX bytes:1681688 (1.68 MB) TX bytes:168168 (168.168 KB) ppp1 Link encap:Point-to-Point Protocol inet addr:168.168.168.18 P-t-P:168.168.168.254 Mask:255.255.255.255 inet6 addr: 2001:1688:1688:1688:1688:1688:1688:1688/64 Scope:Global inet6 addr: fe80::918:2ec2:7e3:a107/10 Scope:Link inet6 addr: 2001:1688:1688:1688:1688:1688:1168:1168/64 Scope:Global UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1492 Metric:1 RX packets:12547 errors:0 dropped:0 overruns:0 frame:0 TX packets:11592 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:3 RX bytes:18354307 (18.3 MB) TX bytes:1398413 (1.3 MB) 第2階段設定 有了上述的測試設定後(其實主要目的在取得正確的 /etc/ppp/options 設定內容, 因為在 Ubuntu 14.04 LTS 中利用 http://www.ipv6.hinet.net/form/HiNet_IPv6_connect-setting.pdf 執行設定所得到的 /etc/ppp/options 無法正確完成 Modem 撥接), 採用\"用戶帳號@hinet.net\" 進行 PPPoE 撥號的連線, 非固接的光世代連線, 已經可以同時支援 IPV4 與 IPV6 協定, 但是因為 P883 的 DHCP 與 PPPoE 都沒有啟用, 所有 WiFi 的功能就無法使用, 因此弄清楚 Windows 7 操作系統與 Ubuntu 14.04 的 PPPoE 撥號設定後, 嘗試再將 P883 機器中的 DHCP Server 與 PPPoE 撥號啟用後, 再分別利用連接到 P883 集線器的 Windows7 與 Ubuntu 14.04 各自執行 PPPoE 的撥號 (因為中華電信的非固接光世代可以同時支援 8 台 PPPoE 的撥號連線). 首先看 Ubuntu 14.04 中的 /etc/network/interfaces 檔案內容: 1 2 3 4 5 6 7 8 9 10 # The loopback network interface auto lo iface lo inet loopback # for sudo pon dsl-provider auto dsl-provider iface dsl-provider inet ppp pre-up /sbin/ifconfig p10p1 up # line maintained by pppoeconf provider dsl-provider auto p10p1 iface p10p1 inet dhcp 透過上述設定, Ubuntu 會在開機的階段, 先以 PPPoE 撥號, 然後再向 P883 以 dhcp 取得網卡對應的 IPV4 位址, 重新開機後的 ifconfig 檔案內容為: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:133 errors:0 dropped:0 overruns:0 frame:0 TX packets:133 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:9729 (9.7 KB) TX bytes:9729 (9.7 KB) p10p1 Link encap:Ethernet HWaddr aa:bb:cc:dd:ee:ff inet addr:192.168.1.106 Bcast:192.168.1.255 Mask:255.255.255.0 inet6 addr: fe80::d685:64ff:feba:59b/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:8484 errors:0 dropped:0 overruns:0 frame:0 TX packets:8165 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:2904256 (2.9 MB) TX bytes:1086876 (1.0 MB) Interrupt:18 ppp0 Link encap:Point-to-Point Protocol inet addr:168.168.168.168 P-t-P:168.168.168.254 Mask:255.255.255.255 inet6 addr: 2001:1168:1168:1168:1168:1168:1168:1168/64 Scope:Global inet6 addr: fe80::d95f:df3:bd89:1e47/10 Scope:Link inet6 addr: 2001:1168:1168:1168:1168:1168:1168:a849/64 Scope:Global UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1492 Metric:1 RX packets:7610 errors:0 dropped:0 overruns:0 frame:0 TX packets:7460 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:3 RX bytes:2612710 (2.6 MB) TX bytes:827230 (827.2 KB) 設定至此, 已經在既有的 ZyXel P883 IPV4 架構下 (一台 Windows 7 + 一台 Ubuntu 14.04 + 多台 Wifi 裝置), 順利申請中華電信的 IPV6 試用, 完成機房設定後, 自行在 P883 連線之後, 分別在 Windows 7 與 Ubuntu 14.04 以 PPPoE 進行數據機撥號連線, 達到 IPV4 與 IPV6 共存並用的環境, 當使用者希望透過瀏覽器連接到特定 IPV6 網址的網站時, 可以使用 http://[IPV6 網址] 進行連線. 最後, 為什麼在這個時段要進入 IPV6 環境? 隨著 IPV4 網址的消耗殆盡, 有些主機或裝置未來只會有 IPV6 位址, 若不透過 IPV6 協定, 無法連接這些主機或裝置. IPV6 是一條不得不轉進的道路, 愈早涉入, 愈能對於具有未來性的各項軟硬體需求, 作最好的準備. 當許多客戶被迫使用 IPV6 環境後, 有些條件較 IPV4 安全, 但是在點對點的連線下, 可能產生更大的安全危害, 愈早因應, 愈可能降低損害. 目前階段使用 IPV4/IPV6 並存, 可能產生的問題: 連接純 IPV4 的網站, 可能速度反而會較慢 (例如: OpenShift 上的網站, 或 Amazon 平台上的網站). 連接支援 IPV6 的網站, 可能速度會較快 (例如: Youtube 或各項 Google 所提供的服務) 因為讓 double stack 支援的 IPV4 直接曝露在 WAN 上, 若沒有強而有效的防火牆保護, 或者沒有定期更新系統安全修補, 可能會比較容易受到駭客攻擊或利用.","tags":"Ubuntu","title":"Mechanical Designer and IPV6"},{"url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/06/kmolab-initialized/","text":"KMOL Lab 以靜態網頁重新啟動 二十一世紀是電腦網路與人工智慧充分整合的世代, Kmolab 一直以來對於人才的培育, 始終強調必須充份了解電腦的基本運作, 實際應用網路架構提升設計效能, 並且採用演化設計方法來發揮電腦的高速運算能力. 然而這些理念的落實, 必須從電腦的操作系統安裝設定開始, 進而納入 IPV4 與 IPV6 網路協定架構整合, 並且每一成員都有能力運用近端、 廣域主機與雲端主機上的各項軟硬體資源, 將知識管理與最佳化應用的精神納入產品的設計開發, 才能真正融入知識經濟與國際協同的趨勢. 首先以安裝設定 Ubuntu Server 開始. 安裝 Ubuntu Server 基本系統安裝 從 https://wiki.ubuntu.com/LTS , 可以了解各 Ubuntu 版次的產品生命週期, 就現在這個時間點來說, Ubuntu 14.04 的生命週期最長, 因此選擇安裝 14.04 的 Server 版本. 步驟一, 就是從 http://www.ubuntu.com/download/server 下載 Ubuntu Server 14.04 版本的 iso 檔案, 然後燒錄到 DVD 光碟上, 然後用此光碟開機執行安裝. 假如電腦並沒有 DVD 光碟機, 而只有早期的 CD Rom 光碟機, 可以下載 https://help.ubuntu.com/community/Installation/MinimalCD , 然後燒錄到 CD 片, 並且將網路線接上電腦的網路插槽, Ubuntu 就會透過網路線取得大部分的安裝資料, 順利完成安裝, 唯一必須注意的則是, 若此電腦位於內部網路, 通常必須要設定 proxy Server 才能順利從外部電腦取回安裝所需的資料. 步驟二, 一旦電腦接受 Ubuntu 14.04 的光碟開機之後, 隨後的安裝必須設定網路連線與管理者帳號密碼, 並且通常直接選擇安裝 OpenSSL 套件, 以便讓電腦可以透過 ssh 進行連線. 步驟三, IPV4 與與 IPV6 網路設定, /etc/network/interfaces 檔案內容: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # This file describes the network interfaces available on your system # and how to activate them. For more information, see interfaces(5). # The loopback network interface auto lo iface lo inet loopback # The primary network interface auto eth0 iface eth0 inet static address 140.130.17.17 netmask 255.255.255.0 network 140.130.17.0 broadcast 140.130.17.255 gateway 140.130.17.254 # dns-* options are implemented by the resolvconf package, if installed dns-nameservers 140.130.1.2 140.130.17.3 168.95.1.1 dns-search mde.nfu.edu.tw # The IPv6 based entries for the primary network interface iface eth0 inet6 static address 2001:288:6004:17::17 netmask 64 gateway 2001:288:6004:17::254 dns-nameservers 2001:288:6004:1::2 2001:b000:168::1 # for internal ip setup auto eth1 iface eth1 inet dhcp 步驟四, 利用 sudo apt-get update 與 sudo apt-get upgrade 更新並升級上一改版後可能已經釋出的版本更新. 步驟五, 利用 sudo apt-get install ubuntu-desktop, 安裝 ubuntu-desktop, 主要目的在讓初學者可以利用 desktop 所提供的互動介面進行操作, 而非僅透過 command shell 執行操作. 步驟六, 利用 sudo apt-get install gcin, 安裝 gcin, 切換語系, 讓使用者可以利用各種輸入法輸入中文 (安裝後 ctrl+alt+6 可以切換成詞音輸入法). 步驟七, 安裝 pip3, PyQt 與 Leo Editor. sudo apt-get install python3-pip sudo apt-get install python3-pyqt4 sudo pip3 install https://github.com/leo-editor/leo-editor/archive/master.zip 上述三項模組安裝完成後, 以 leo& 開啟 Leo Editor. 步驟八, 利用 sudo apt-get install git, 安裝 git client 工具. 步驟九, 安裝 Wine, 可以直接在 Ubuntu 環境中, 執行部份的 Windows 程式. sudo add-apt-repository ppa:ubuntu-wine/ppa sudo apt-get update sudo apt-get install wine1.7 步驟十, 利用 sudo apt-get install squid, 安裝 squid proxy server. 設定檔案位於 /etc/squid3/squid.conf 每次修改設定檔案後, 利用 sudo service squid3 restart, 重新啟動. squid3 參考設定: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 acl cad_lab src 140.130.17.0/24 acl cad_lab src 2001:288:6004:17::/64 acl SSL_ports port 443 acl Safe_ports port 80 # http acl Safe_ports port 88 #acl Safe_ports port 21 # ftp acl SSL_ports port 8443 acl Safe_ports port 8443 acl SSL_ports port 9443 acl Safe_ports port 9443 acl SSL_ports port 22 acl Safe_ports port 22 acl Safe_ports port 443 # https acl Safe_ports port 1025-65535 # unregistered ports acl Safe_ports port 280 # http-mgmt acl Safe_ports port 488 # gss-http acl Safe_ports port 591 # filemaker acl Safe_ports port 777 # multiling http acl CONNECT method CONNECT # Deny requests to certain unsafe ports http_access deny !Safe_ports # Deny CONNECT to other than secure SSL ports http_access deny CONNECT !SSL_ports http_access allow cad_lab http_access deny all # Only allow cachemgr access from localhost http_access allow localhost manager http_access deny manager #http_access allow localnet http_access allow localhost # And finally deny all other access to this proxy http_access deny all # Squid normally listens to port 3128 http_port 3128 #cache_dir ufs /var/spool/squid3 100 16 256 icp_port 3130 icp_access allow all cache_dir ufs /var/spool/squid3 2000 16 256 cache_peer 140.130.17.2 sibling 3128 3130 cache_peer 140.130.17.4 sibling 3128 3130 cache_peer 140.130.17.9 sibling 3128 3130 cache_peer 140.130.17.22 sibling 3128 3130 cache_peer 140.130.17.23 sibling 3128 3130 # # Add any of your own refresh_pattern entries above these. # refresh_pattern &#94;ftp: 1440 20% 10080 refresh_pattern &#94;gopher: 1440 0% 1440 refresh_pattern -i (/cgi-bin/|\\?) 0 0% 0 refresh_pattern (Release|Packages(.gz)*)$ 0 20% 2880 refresh_pattern . 0 20% 4320 新增其他管理者與一般用戶帳號 新增一般用戶 (假設新帳號為 username): sudo adduser username 過程中會先詢問允許執行 sudo 指令的帳號對應密碼, 然後再輸入兩次 username 的對應密碼 將一般用戶轉為管理者用戶: sudo visudo 將 username 納為可以執行 sudo 的帳號 其中以上下鍵將游標移到管理者帳號設定區, 根據 %admin 行所提示的格式輸入, 先將要轉為管理者的 username 帳號放在第1區, 接著輸入允許執行 sudo 的權限, 之後再利用 Ctrl+o 存檔, 存檔後該用戶即可生效成為系統的管理者. 安裝 nginx sudo apt-get update sudo apt-get install nginx 在 Ubuntu 安裝 nginx 後: nginx 安裝在: /etc/nginx nginx 設定檔案: /etc/nginx/nginx.conf 網站根目錄: /usr/share/nginx/html 內建的設定檔案: /etc/nginx/sites-available/default 安裝 Leo Editor 安裝 pip3 sudo apt-get install python3-pip 安裝 pyqt4 1 sudo apt–get install python3–pyqt4 選擇 Leo Editor 版本程式進行安裝 1 sudo pip3 install https://github.com/leo-editor/leo-editor/archive/broke-abbrev.zip 執行 Leo Editor leo& 安裝 CMSimply sudo pip3 install cherrypy git clone cmsimply 原始碼後, 可以利用 python3 application 在 127.0.0.7:8080 執行 安裝 google-chrome sudo apt-get install libxss1 libappindicator1 libindicator7 wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb sudo dpkg -i google-chrome*.deb 手動安裝 PyQt4 先安裝 sip sudo wget http://sourceforge.net/projects/pyqt/files/sip/sip-4.16.9/sip-4.16.9.tar.gz sudo tar -xvf sip-4.16.9.tar.gz cd sip-4.16.9 sudo python3 configure.py sudo make sudo make install 再安裝 PyQt4 sudo wget http://downloads.sourceforge.net/project/pyqt/PyQt4/PyQt-4.11.4/PyQt-x11-gpl-4.11.4.tar.gz sudo tar -xvf PyQt-x11-gpl-4.11.4.tar.gz cd PyQt-x11-gpl-4.11.4 sudo python3 configure.py sudo make sudo make install 手動安裝 Python 3.4.3 註: 在 Ubuntu 1503382 錯誤尚未解決之前, 必須手動移除 Python3, 然後手動安裝 Python 3.4.3 以及 pip3 之後, 才能安裝 uwsgi 模組. 安裝 Python 之前, 先安裝 sqlite3 與 libsqlite3-dev (否則 Python 無法建立 sqlite3 模組) sudo apt-get install sqlite3 libsqlite3-dev 再安裝 Python 3.4.3 sudo apt-get install libssl-dev openssl cd /opt sudo wget python.org/ftp/python/3.4.3/Python-3.4.3.tgz sudo tar -xzvf Python-3.4.3.tgz cd Python-3.4.3 sudo ./configure sudo make sudo make install python3 安裝 pip3 sudo wget https://pypi.python.org/packages/source/p/pip/pip-7.1.2.tar.gz sudo tar -xvf pip-7.1.2.tar.gz cd pip-7.1.2 sudo python3 setup.py install 安裝 uwsgi sudo pip3 install uwsgi 移除 nginx 只保留舊的設定檔案, 其餘移除 sudo apt-get remove nginx nginx-common 將所有與 nginx 有關的資料, 全數移除 sudo apt-get purge nginx nginx-common 移除用不到的相依套件 sudo apt-get autoremove 設定 nginx 與 uwsgi sudo apt-get install nginx 內定 nginx 安裝目錄: /etc/nginx nginx 設定檔案: /etc/nginx/nginx.conf 網站根目錄: /usr/share/nginx/html 內建的設定檔案: /etc/nginx/sites-available/default 與 nginx 結合的 default 設定檔: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 server { listen 80 default_server ; listen [ :: ] : 80 default_server ipv6only = on ; listen 443 ssl ; location / static { alias / home / yen / cmsimply / wsgi / static / ; } location / { include uwsgi_params ; uwsgi_pass 127 . 0 . 0 . 1 : 8080 ; } server_name localhost ; #ssl on ; ssl_certificate / etc / nginx / ssl / nginx .crt ; ssl_certificate_key / etc / nginx / ssl / nginx .key ; ssl_session_timeout 5m ; ssl_protocols SSLv3 TLSv1 TLSv1 .1 TLSv1 .2 ; ssl_ciphers \"HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES\" ; ssl_prefer_server_ciphers on ; try_files $ uri $ uri / = 404 ; } uwsgi_params 檔案: 1 2 3 4 5 6 7 8 9 10 11 12 13 uwsgi_param QUERY_STRING $ query_string ; uwsgi_param REQUEST_METHOD $ request_method ; uwsgi_param CONTENT_TYPE $ content_type ; uwsgi_param CONTENT_LENGTH $ content_length ; uwsgi_param REQUEST_URI $ request_uri ; uwsgi_param PATH_INFO $ document_uri ; uwsgi_param DOCUMENT_ROOT $ document_root ; uwsgi_param SERVER_PROTOCOL $ server_protocol ; uwsgi_param REMOTE_ADDR $ remote_addr ; uwsgi_param REMOTE_PORT $ remote_port ; uwsgi_param SERVER_ADDR $ server_addr ; uwsgi_param SERVER_PORT $ server_port ; uwsgi_param SERVER_NAME $ server_name ; 位於 /etc/init 下的 uwsgi.conf 檔案設定: 1 2 3 4 5 6 7 description \"uwsgi for cmsimply\" start on runlevel [2345] stop on runlevel [06] respawn exec uwsgi --master --processes 4 --die-on-term --socket :8080 --chdir /home/yen/cmsimply/wsgi --wsgi-file /home/yen/cmsimply/wsgi/application 在 Python wsgi cherrypy 程式中的啟動: application = cherrypy.Application(root, config = application_conf) 重新啟動 nginx: sudo service nginx restart 重新啟動 uwsgi: sudo service uwsgi restart uwsgi 啟動多個 Python 程式 利用 nginx 與 uwsgi 啟動多個 Python 應用程式: 必須採用 uwsgi Emperor 啟動模式設定: /etc/init/uwsgi.conf 檔案內容: 1 2 3 4 5 6 7 8 9 10 11 12 # Emperor uwsgi script description \"uwsgi Emperor\" start on runlevel [2345] stop on runlevel [06] respawn # 以下為以 user id yen 與 user group yen 執行單一 Python 應用程式的 Upstart 設定 # exec uwsgi --master --processes 4 --die-on-term --uid yen --gid yen --socket :8080 --chdir /home/yen/cmsimply/wsgi --wsgi-file /home/yen/cmsimply/wsgi/application # 以下為以 yen:yen 執行多個 Python 應用程式的設定, uwsgi --emperor 會進入 /home/yen/uwsgi_ini 目錄執行所有的 .ini 應用程式設定 exec uwsgi --uid yen --gid yen --emperor /home/yen/uwsgi_ini /home/yen/uwsgi_ini 目錄中有 uwsgi.ini 與 uwsgi2.ini 設定檔, 分別用來啟動 /home/yen/cmsimply/wsgi/application 與 /home/yen/cmsimply2/wsgi/application uwsgi.ini 內容: 1 2 3 4 5 6 [uwsgi] socket = :8080 processes = 4 master = true chdir = /home/yen/cmsimply/wsgi wsgi-file = /home/yen/cmsimply/wsgi/application uwsgi2.ini 內容: 1 2 3 4 5 6 [uwsgi] socket = :8081 processes = 4 master = true chdir = /home/yen/cmsimply2/wsgi wsgi-file = /home/yen/cmsimply2/wsgi/application nginx 位於 sites-enabled 目錄下的 default 設定檔: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 server { listen 80 default_server ; listen [ :: ] : 80 default_server ipv6only = on ; listen 443 ssl ; listen [ :: ] : 443 ssl ipv6only = on ; location / static { alias / home / yen / cmsimply / wsgi / static / ; } location / { include uwsgi_params ; uwsgi_pass 127 . 0 . 0 . 1 : 8080 ; } server_name localhost ; #ssl on ; ssl_certificate / etc / nginx / ssl / nginx .crt ; ssl_certificate_key / etc / nginx / ssl / nginx .key ; ssl_session_timeout 5m ; ssl_protocols SSLv3 TLSv1 TLSv1 .1 TLSv1 .2 ; ssl_ciphers \"HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES\" ; ssl_prefer_server_ciphers on ; try_files $ uri $ uri / = 404 ; } server { listen 88 default_server ; listen [ :: ] : 88 default_server ipv6only = on ; listen 8443 ssl ; listen [ :: ] : 8443 ssl ipv6only = on ; location / static { alias / home / yen / cmsimply2 / wsgi / static / ; } location / { include uwsgi_params ; uwsgi_pass 127 . 0 . 0 . 1 : 8081 ; } server_name localhost ; #ssl on ; ssl_certificate / etc / nginx / ssl / nginx .crt ; ssl_certificate_key / etc / nginx / ssl / nginx .key ; ssl_session_timeout 5m ; ssl_protocols SSLv3 TLSv1 TLSv1 .1 TLSv1 .2 ; ssl_ciphers \"HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES\" ; ssl_prefer_server_ciphers on ; try_files $ uri $ uri / = 404 ; } 重新啟動 nginx: sudo service nginx restart 重新啟動 uwsgi: sudo service uwsgi restart 按照上述設定完成的測試用主機: /home/yen/cmsimply 程式執行: IPV6 網址: http://[2001:288:6004:17::101] https://[2001:288:6004:17::101] IPV4 網址: http://140.130.17.101 https://140.130.17.101 /home/yen/cmsimply2 程式執行: IPV6 網址: http://[2001:288:6004:17::101]:88 https://[2001:288:6004:17::101]:8443 http://140.130.17.101:88 https://140.130.17.101:8443 純 IPV6 ssh 從只有 IPV6 網址的電腦要 ssh 到另一台 IPV6 電腦: ssh -6 帳號@IPV6 位址 例如: ssh -6 account@2001:288:6004:1::1 安裝 Jupyterhub sudo apt-get install npm nodejs-legacy sudo npm install -g configurable-http-proxy sudo pip3 install jupyterhub sudo pip3 install IPython sudo pip3 install \"ipython[notebook]\" 以 SSL 啟動 : 先建立 key 與 certificate: sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout jupyterhub.key -out jupyterhub.crt jupyterhub –ip 10.0.1.2 –port 443 –ssl-key jupyterhub.key –ssl-cert jupyterhub.cert 或不指定 IP jupyterhub –port 9443 –ssl-key my_ssl.key –ssl-cert my_ssl.cert 之後則可以 https://jupyterIP:9443 連線 putty 與 x windows SSH 設定 X11 ->X11 forwarding 勾選 Enable X11 forwarding X display location: 填入 localhost:0 若在 Windows 環境, 希望能夠將其他電腦上的 X window 畫面顯示在近端, 必須先啟動 xming for Windows http://sourceforge.net/projects/xming/ github 倉儲協同流程 每一位成員在倉儲 users 目錄下各自擁有一個維護資料的 user.leo 檔案 每位成員可以利用 git clone 方式, 將遠端現有的資料倉儲放入近端硬碟中 在 content 目錄下, 以用戶名稱+日期的方式建立 .md 檔案, 若在近端測試, 可以利用 local-pelican 按鈕產生靜態網頁 若在推送過程發現遠端有新的版本資料, 則必須透過 git pull origin gh-pages 的方式拉下資料後, 嘗試進行自動合併. 若無共同編輯的 .md 檔案, 則通常可以利用 gh-pages-pelican 按鈕建立遠端使用的靜態文件檔. 若各內容檢查無誤, 則可以推送到遠端. Openshift 網站 隨身裝置啟動後的 home/.ssh/id_rsa 中的 OpenSSH 私鑰與 OpenShift 帳號上 settings 中的公鑰對應, 如此方具備在近端複製程式碼的權限. 近端 Ubuntu 上的網站 uwsgi 與 nginx https://github.com/sigmavirus24/github3.py","tags":"project","title":"Kmolab initialized"},{"url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/06/alumni-interaction/","text":"主動尋找校友互動 如何尋找校友? 如何互動？ 如何延續價值? 先建立自己的領英網頁 在 https://www.linkedin.com/ 登錄帳號後, 填入個人相關專業資料, 之後將會不定期收到機器寄出的 cold mail, 一般而言, 可以無需理會這些 cold mail, 暫且不管這些電子郵件看起來像是人或機器寫的, 你都必須知道, 建立領英帳號的目的, 是要利用它, 而不是被它利用, 所以絕對要對這些網路上的冷信件, 保持冷靜, 儘量不要回應, 可以直接刪除. 先建立自己的 about.me 網頁 在 https://about.me/ 建立帳號的態度, 應該要與領英一樣, 用它而不要被用. 意思就是說, 只要在上面提供並更新與個人相關的專業資料, 這種網路上的頁面, 主要在於申請學校或找工作的時候有些用處, 其他時候, 就該讓它晾在那裡, 不要多費心或浪費時間. 先每天早睡早起, 持續運動 主要的目的在時時刻刻保持覺照, 讓自己每天都精神飽滿, 可以應付課業或工作所需. 找虎尾及雲林縣附近的校友, 一起參加活動 每年都有慢跑活動, 可以找幾個身邊的好朋友, 每年參加, 並且利用網誌紀錄訓練與參賽的過程, 自然就會碰到許多志同道合的朋友與系友. 藉由各屆校友的資料整理, 利用網路進行互動 利用各種機會, 向過去的校友或系友請益, 這些前輩已經浸入社會多年, 擁有各式寶貴的經驗, 假如他們願意花一點時間與後進分享, 那就真是太棒了!","tags":"Alumni","title":"Alumni interaction"},{"url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/06/2016-cad-lab/","text":"2016 電腦輔助設計室規劃 採購電腦規格與開機磁區規劃 intel i7 電腦 63+4 台 - 四台電腦將充作 IPV4/IPV6 相容的 Squid 代理伺服器 防寫保護卡 - 打算使用目前既有的硬碟防寫卡 開機磁區 第1磁區: 64位元 Windows 10 (一般必須安裝的套件) 第2磁區: 64位元 Windows 10 (以無需安裝的綠色套件為主) 第3磁區: Ubuntu Server 加上 ubuntu-desktop 介面 舊電腦分配 淘汰下來的舊電腦分配與應用","tags":"CADlab","title":"2016 CAD Lab"},{"url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/06/2016-wcm-course/","text":"2016 Spring 網際內容管理課程規劃 github pages 上的靜態網頁系統 Github pages, Leo Editor 與 Pelican site builder html 與 Javascript (Brython based) Python3 的動態網頁 (Flask 與 SQLite based) OpenShift 與近端 Flask based 網站程式開發","tags":"Courses","title":"2016 WCM course"},{"url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/06/2016-cd-course/","text":"2016 Spring 協同產品設計實習課程規劃 MCAD 套件 Mechanical Computer Aided Design (MCAD) 套件將使用: Onshape Solvespace PTC Creo Parametric rattleCAD 零組件繪圖與設計 將以自行車設計與 3D 模型組裝作為主題","tags":"Courses","title":"2016 CD course"},{"url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/06/about-17101-server/","text":"Ubuntu 伺服器 設定 介紹 17.101 機器的設定與使用 ubuntu-desktop 這一台 HP 伺服器, 原本安裝 Ubuntu Server 操作系統, 然後再加裝 desktop gui 介面相關套件: sudo apt-get install ubuntu-desktop nginx 與 uwsgi 之後因為卸除 Python3 相關的所有套件, 導致單機桌面無法登入, 所有介面操作, 只能透過網路, 以 X Windows 連線. 目前 17.101 總計啟動 IPV4 與 IPV6 網路設定, 安裝了 Nginx 與 uwsgi, 分別在 port 80 與 88 執行 CMSimply, 並在 https://140.130.17.101:9443 安裝 Jupyterhub, 只是 IPv6 模式下的 Jupyterhub 還無法使用. squid proxy 伺服器 利用 sudo apt-get install squid, 安裝 squid proxy server. 設定檔案位於 /etc/squid3/squid.conf 每次修改設定檔案後, 利用 sudo service squid3 restart, 重新啟動. 參考的設定檔案: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 acl cad_lab src 140.130.17.0/24 acl cad_lab src 2001:288:6004:17::/64 acl SSL_ports port 443 acl Safe_ports port 80 # http acl Safe_ports port 88 #acl Safe_ports port 21 # ftp acl SSL_ports port 8443 acl Safe_ports port 8443 acl SSL_ports port 9443 acl Safe_ports port 9443 acl SSL_ports port 22 acl Safe_ports port 22 acl Safe_ports port 443 # https acl Safe_ports port 1025-65535 # unregistered ports acl Safe_ports port 280 # http-mgmt acl Safe_ports port 488 # gss-http acl Safe_ports port 591 # filemaker acl Safe_ports port 777 # multiling http acl CONNECT method CONNECT # Deny requests to certain unsafe ports http_access deny !Safe_ports # Deny CONNECT to other than secure SSL ports http_access deny CONNECT !SSL_ports http_access allow cad_lab http_access deny all # Only allow cachemgr access from localhost http_access allow localhost manager http_access deny manager #http_access allow localnet http_access allow localhost # And finally deny all other access to this proxy http_access deny all # Squid normally listens to port 3128 http_port 3128 #cache_dir ufs /var/spool/squid3 100 16 256 icp_port 3130 icp_access allow all cache_dir ufs /var/spool/squid3 2000 16 256 cache_peer 140.130.17.2 sibling 3128 3130 cache_peer 140.130.17.4 sibling 3128 3130 cache_peer 140.130.17.9 sibling 3128 3130 cache_peer 140.130.17.22 sibling 3128 3130 cache_peer 140.130.17.23 sibling 3128 3130 # # Add any of your own refresh_pattern entries above these. # refresh_pattern &#94;ftp: 1440 20% 10080 refresh_pattern &#94;gopher: 1440 0% 1440 refresh_pattern -i (/cgi-bin/|\\?) 0 0% 0 refresh_pattern (Release|Packages(.gz)*)$ 0 20% 2880 refresh_pattern . 0 20% 4320","tags":"Ubuntu","title":"About 17.101 server"},{"url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/06/pelican-setup/","text":"Pelican templae 設定 假如使用 https://github.com/DandyDev/pelican-bootstrap3 template, 則可將 Set SHOW_ARTICLE_AUTHOR 設為 True, 就可以在每篇文章中顯示作者. SHOW_ARTICLE_CATEGORY 則用來顯示類別. SHOW_DATE_MODIFIED 則可顯示文章修改的日期.","tags":"Python","title":"Pelican setup"},{"url":"http://chiamingyen.github.io/kmolab/blog/posts/2016/01/06/kmolab-user-wen-zhang-tao-gao/","text":"這裡可以放入文章的摘要內容 文章標題 這裡開始文章內容 文章內放入超文件的連結: http://chiamingyen.github.io/kmolab 文章子標題 文章內放入圖片: 引入程式碼 1 2 3 4 5 6 7 8 9 10 import math # Pythagoras Theorem def hypotenuse ( side1 , side2 ): return math . sqrt ( math . pow ( side1 , 2 ) + math . pow ( side2 , 2 )) side1 = 3 side2 = 4 h = hypotenuse ( side1 , side2 ) print ( a right triangle with side1 = \", side1, \" and side2 = \", side2, \" the hypotenuse is : \", h)","tags":"project","title":"Kmolab user 文章套搞"}]}