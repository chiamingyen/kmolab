var tipuesearch = {"pages":[{"title":"About","text":"KMOL 實驗室 KMOL Lab 為台灣國立虎尾科技大學, 機械設計工程系, 知識管理與最佳化應用實驗室, 全稱為 Knowledge Management and Optimal Utilization Laboratory (縮寫為 KMOUL 或 KMOL, 音同 CAMEL), Department of Mechanical Design Engineering, National Formosa University, Taiwan. KMOL信念 二十一世紀的科技大學, 在培育具世界觀與在地文化素養, 能適應環境並成功面對挑戰之專業人才. 所謂專業, 即具有專長, 能夠就業之謂. 所謂文化者, 因思考及概念而有之教化. 所謂素養, 即平日的涵養. Excellence is an art won by training and habituation. We do not act rightly because we have virtue or excellence, but we rather have those because we have acted rightly. We are what we repeatedly do. Excellence, then, is not an act but a habit. — Aristotle (384 BC – March 7, 322 BC) 卓越須經由訓練與習慣養成才能獲得。並非具備品德或卓越能讓人舉止得宜，反而是舉止得宜能讓人卓越。經過切身重複實作，才可體會，卓越並非一種作為，而是習慣。 — 亞理士多德 (西元前 384 年 – 西元前 322 年 3 月 7 日) 體魄康強, 精神活潑, 舉止端莊, 人格健全, 便是大學生的風度. 不倦的追求真理, 熱烈的愛護國家, 積極的造福人類, 才是大學生的職志. — 羅家倫 (1928) KMOL 標誌","tags":"misc","url":"https://chiamingyen.github.io/kmolab/blog/pages/about/"},{"title":"計算機程式 (三)","text":"在機械設計工程系的計算機程式課程中, 學習 Python3 的基本目的, 希望在最短時間內, 讓學員能夠除了在身旁的電腦或筆電上, 利用 Python3 程式語法進行各種資料處理與運算外, 還希望學員能夠透過編寫網際程式, 利用網站執行協同設計程式. Python3 能做什麼? Python3 指的是 Python 程式語言第 3 版, 是一種解譯式泛用型程式語言, 能夠在程式碼編寫好了之後, 馬上利用 Python3 解譯器執行, 程式碼是在執行當下才自動轉為機器碼, 因此使用者可以最簡便的方式使用 Python3. 在大一的計算機課程中, 我們利用 Python 編寫的 Leo Editor 作為近端的資料管理與整合程式開發中心, 並利用 Python 編寫的 Pelican 工具, 將使用者建立的 Markdown 格式檔案, 轉為組成 Blog 系統所需要的 html 格式檔案. 使用者所編寫的 Markdown 檔案中可以嵌入格式與 Python3 相容的 Brython 程式碼, 也可以直接在瀏覽器中執行這些 Brython 程式, 進行網際環境中的資料處理與 2D/3D 靜態與動態繪圖. 因此, 在這門課程的範疇中, Python3 能夠做什麼? 簡單說, 我們在此所學習的 Python3 計算機程式語法, 可以在單機操作系統中, 以及瀏覽器中利用電腦進行資料處理、數值運算與繪圖. Python3 的資料處理 Leo Editor 利用大綱模式管理資料, 就是 Python3 程式應用的範例, 至於 Pelican 套件將 Markdown 檔案轉為 Blog 專用的 html 檔案, 也是一系列利用 Python3 指令與語法進行資料處理的過程. 課程進行初始, 本課程利用 Python3 程式進行學員資料的讀取、分組排序, 轉而利用 Brython 直接在網頁上處理學員資料, 也是 Python3 程式進行資料處理的應用之一. Python3 的數值運算 在工程應用中, 最簡單的數值運算就是各種工程尺寸與單位的換算, 在本課程中, 使用者可以利用 Python3 程式語法建立單機與網頁上執行的物理量單位換算程式. Python3 的繪圖 本課程中的 Python3 繪圖應用以在瀏覽器中執行為主, 使用者學會基本的 Brython 程式語法以及 html5 Canvas 繪圖指令後, 就可以直接將 Canvas 繪圖程式寫在 Markdown 檔案中, 然後再利用 Pelican 將檔案轉為 html Python 程式執行 由於本課程主要在 Windows 10 環境中, 以可攜的 Miniconda Python 3.5 系統為主, 使用者啟動後 ,可以利用可攜系統對應的命令列, 輸入 python 後帶出解譯器環境, 就可以直接下指令執行 Python3 程式語法. 此外, 若使用者將 Python3 程式存成 ex1.py, 也可以直接在可攜系統對應的命令列中, 透過 python ex1.py 執行 ex1.py 程式. 當然, 假如 ex1.py 已經利用 Leo Editor 的 @edit 節點指令導入, 也可以在 Leo Editor 環境中, 透過 Ctrl+b 按鍵執行, 而且假如要在 Leo Editor 的 Log 視窗中列印, 可以使用 g.es() 函式, 其中的 g 代表 Leo Editor 的 global 物件, 而 es() 函式則代表 echo string. 本課程 Brython 程式的執行則牽涉 3 個步驟, 也就是導入 brython.js, 啟動 brython, 最後才能 html5 的檔案中, 利用 script 標註執行 Brython 程式. 接下來我們將利用 Hello Mde 字串的列印進行示範. 操作系統中, 進入解譯環境列印: 操作系統中, 呼叫 python 執行 ex1.py 列印: Leo Editor 導入 ex1.py 當作節內容後, 按下 Ctrl+b 列印: Leo Editor 導入 ex1.py 後, 改用 g.es() 函式, 按下 Ctrl+b 列印: 在瀏覽器中以 alert() 函式列印: window.onload=function(){ brython(1); } from browser import document as doc from browser import alert def echo(ev): alert(\"Hello Mde\") doc['alert'].bind('click',echo) 呼叫 alert 列印! from browser import document as doc from browser import alert def echo(ev): alert(\"Hello Mde\") doc['alert'].bind('click',echo) 呼叫 alert 列印! 在瀏覽器中, 直接將執行結果嵌入 html 網頁中: from browser import document as doc # 特殊 html 標註必須透過 html 模組呼叫 # http://www.brython.info/static_doc/en/html.html #from browser import html container = doc[\"ex1\"] container <= \"Hello Mde\" from browser import document as doc # 特殊 html 標註必須透過 html 模組呼叫 # http://www.brython.info/static_doc/en/html.html #from browser import html container = doc[\"ex1\"] container <= \"Hello Mde\" Python3 的繪圖 from browser import document as doc import math # 準備繪圖畫布 canvas = doc[\"bat\"] ctx = canvas.getContext(\"2d\") # 開始畫圖 ctx.beginPath() # 設定線的寬度為 1 個單位 ctx.lineWidth = 1 # 利用 transform 將 y 座標反轉, 且 offset canvas.height # (X scale, X skew, Y skew, Y scale, X offset, Y offset) # 繪圖座標放大 5 倍, 並配合圖形位置進行座標轉換 ctx.transform(5, 0, 0, -5, canvas.width/2, canvas.height/2) bat_points = [(5, -1), (6, -2), (8, 0), (10, 4), (12, 8), (13, 12), (13, 16), (15, 15), (19, 15), (22, 15), (24, 15), (26, 16), (25, 14), (23, 10), (22, 6), (19, 5), (17, 3), (16, 1), (15, -3), (15, -7), (13, -8), (11, -10), (9, -12), (8, -14), (7, -18), (5, -16), (1, -14), (0, -14), (-4, -15), (-6, -17), (-8, -15), (-10, -13), (-11, -12), (-12, -12), (-13, -12), (-14, -13), (-17, -15), (-18, -15), (-22, -13), (-24, -12), (-25, -12), (- 27, -13), (-25, -11), (-23, -8), (-21, -5), (-19, 0), (-15, -2), (-12, -4), (-10, -5), (-7, -6), (-4, -6), (-1, -6), (-1, -3), (-2, 1), (0, -1), (1, 0), (2, 0), (3, 1), (3, 3), (5, -1)] ctx.moveTo(3, 3) for point in bat_points: ctx.lineTo(point[0],point[1]) ctx.stroke() ctx.closePath() from browser import document as doc import math # 準備繪圖畫布 canvas = doc[\"bat\"] ctx = canvas.getContext(\"2d\") # 開始畫圖 ctx.beginPath() # 設定線的寬度為 1 個單位 ctx.lineWidth = 1 # 利用 transform 將 y 座標反轉, 且 offset canvas.height # (X scale, X skew, Y skew, Y scale, X offset, Y offset) # 繪圖座標放大 5 倍, 並配合圖形位置進行座標轉換 ctx.transform(5, 0, 0, -5, canvas.width/2, canvas.height/2) bat_points = [(5, -1), (6, -2), (8, 0), (10, 4), (12, 8), (13, 12), (13, 16), (15, 15), (19, 15), (22, 15), (24, 15), (26, 16), (25, 14), (23, 10), (22, 6), (19, 5), (17, 3), (16, 1), (15, -3), (15, -7), (13, -8), (11, -10), (9, -12), (8, -14), (7, -18), (5, -16), (1, -14), (0, -14), (-4, -15), (-6, -17), (-8, -15), (-10, -13), (-11, -12), (-12, -12), (-13, -12), (-14, -13), (-17, -15), (-18, -15), (-22, -13), (-24, -12), (-25, -12), (- 27, -13), (-25, -11), (-23, -8), (-21, -5), (-19, 0), (-15, -2), (-12, -4), (-10, -5), (-7, -6), (-4, -6), (-1, -6), (-1, -3), (-2, 1), (0, -1), (1, 0), (2, 0), (3, 1), (3, 3), (5, -1)] ctx.moveTo(3, 3) for point in bat_points: ctx.lineTo(point[0],point[1]) ctx.stroke() ctx.closePath()","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/ji-suan-ji-cheng-shi-san.html"},{"title":"Git 使用導引","text":"Git 是一套分散式數位資料版本控制系統, 而學習 Git 最好的參考資料就是 Pro Git ( 第1版 ). 初次使用 Git 首先是 關於版本控制系統 的說明. Git 屬於分散式版本控制系統, 各用戶可以在沒有網路連線與伺服器支援的情況下作業, 等工作告一段落, 再設法連上網路, 將近端的版本提交推送到遠端伺服器. Git 是利用紀錄檔案快照的方式來保存版本, 而非儲存版本間的差異, 因此大部份的操作都可以在近端執行, 細節請參考 Git 基礎要點說明 . 在 KMOL 相關課程中, Git 工具已經內建在可攜程式系統中, 只要啟動 start.bat, 就可以在對應的命令列中執行 Git 指令. 其中可攜 Git 工具下載自 https://git-scm.com/download/win . 課程的進行, Git 倉儲都是在 github.com 中建立, 然後再 git clone 到近端進行改版, 但是也可以直接在近端起始 Git 倉儲, 相關說明請參考 如何起始倉儲 . 當使用者初次在 CADLAB 電腦輔助設計室使用可攜系統, 必須設定用戶的識別資料: git config --global user.name \"s學號\" git config --global user.email s學號@gm.nfu.edu.tw 設定後, .gitconfig 檔案會存放在 y:\\home\\ 目錄中, 使用者可以將完成設定的 .gitconfig 檔案存在自己的 USB 隨身碟或網路上, 以便備用. 另外, 若希望 Git 指令也使用系上的代理主機, 則可利用下列指令設定: git config --global http.proxy http://proxy.mde.tw:3128 git config --global https.proxy http://proxy.mde.tw:3128 完成設定後, 代理主機資料也會存入 y:\\home\\.gitconfig 檔案中. Git 倉儲 clone 改版與提交推送 在機械設計工程協同設計主題教學過程中, 使用者一般直接在 Github 建立倉儲後, 確定倉儲的連結為 repository_url 後, 利用: git clone repository_url 將 Github 伺服器上的倉儲下載到近端. git clone 到近端的版本稱為工作目錄, 使用者可以在近端的倉儲資料中進行改版. 一旦某倉儲改版告一段落, 使用者可以在確定 y:\\home\\.gitconfig 中已經設定了個人識別資料與 proxy 後, 利用: git add -A 認列自 git clone 後所進行的所有變更, 然後以: git commit -m \"版本提交註記訊息\" 完成近端版本提交的動作. 最後再利用 git push 將近端改版的內容, 推送到 Github 倉儲中. git push 時則需要輸入倉儲擁有者或協同者對應的 Github 帳號與密碼. Git 倉儲的分支 有關 Git 分支的簡介資料在 這裡 (第1版有 中文的 Git 分支說明 ). 在計算機程式課程中, 每一個 Github 倉儲都必須設定名稱為 gh-pages 的分支, 因為這個特殊的分支, 可以直接利用流覽器檢視其 html 與 Javascript 資料內容. 至於與 Github 帳號對應的 \"帳號.github.io\" 倉儲, 則可以將網頁內容放在 master 分支, Github 會讓用戶直接利用 https://帳號.github.io 擷取這個倉儲的 html 與 Javascript 資料, 因此我們將這個倉儲稱為個人的帳號對應網頁倉儲, 或簡稱為個人的 Github 帳號網頁. 當使用者將某一個倉儲 git clone 到近端後, 可以利用 git branch 檢查目前所在的分支, 也可以利用 git checkout gh-pages 將工作目錄的內容, 切換到 gh-pages 分支. 也可以直接在 Github 伺服器中, 利用各倉儲的 settings, 設定倉儲的 default 分支. 另外一個與倉儲分支有關, 必須特別注意的是, 當使用者從近端將改版資料推送到遠端時, 除非要推送到 master 分支可以省略外, 若要推送到 gh-pages 分支, 必須明確指名. 利用 git push origin gh-pages 指令, 就是利用 git push 以原來 git clone repository_url 將資料下載到近端的 repository_url 用 origin 代替, 指名將改版資料推送到遠端原倉儲的 gh-pages 分支. Git 倉儲中的 submodule 因為自 2016 Fall 開始, 要將各班的評分用倉儲全部設定為 gh-pages 分支, 且希望從課程倉儲中, 以 submodule 功能, 納入各分組的倉儲, 然後再由各分組以 submodule, 納入各組員的作業倉儲, 且各倉儲的 gh-pages 分支中都包含一組 reveal.js 與 pelican blog 的資料架構, 因此各修課班級的課程網頁就可以由上往下, 依據各評分階段的 submodule 版本對應, 取得各組與各學員的時間註記版本資料. 而當課程結束後, 任何人也都能夠利用 git 指令, clone 各課程倉儲的所有資料, 並且直接在近端用瀏覽器檢視內容. (只有影片資料位於 Vimeo 或 Youtube, 其餘資料都存在倉儲中) 至於 git submodule 指令的應用, 包含子模組的設定, 倉儲的 clone, 子模組的起始與子模組的內容下載等: git submodule add 當某一倉儲的管理者, 包含倉儲擁有者與協同者, 都可以將倉儲 git clone 到近端後, 利用 git submodule add 指令, 建立子模組. 例如: ag1 組的組長 Github 帳號為 scrum-1, 其分組倉儲名稱為 2016fallcp_ag1, 且其中一名組員帳號為 s1234, 則組長利用: git clone https://github.com/scrum-1/2016fallcp_ag1 將分組倉儲從遠端下載到近端後, cd 2016fallcp_ag1 倉儲後, 就可以執行: git submodule add -b gh-pages https://github.com/s1234/2016fallcp_hw s1234 表示 scrum-1 組長, 利用 git submodule add 指令, 在其 2016fallcp_ag1 倉儲下, 建立了一個子模組, 其名稱為 s1234, 而子模組的版本資料則對應到 s1234 學員的課程作業倉儲. 這時, 2016fallcp_ag1 倉儲下會產生一個名稱為 s1234 的目錄, 而其中存放的版本資料, 就是 s1234 組員的作業倉儲. 當使用者在執行 git submodule add 指令時, 有一點必須特別注意, 就是近端分組倉儲的工作目錄中, 不能先有 s1234 子目錄, 否則 git submodule add 指令無法正常運作. 另外, 當某一倉儲建立子模組之後, 倉儲中會產生 .gitmodules, 且 .git 目錄中, 會分別將子模組資料註記在 .git 目錄中的 config 檔案與 modules 目錄中. 最後, 當其他使用者 git clone 帶有 submodule 設定的倉儲時, 就必須在 git clone 資料下載完成後, 分別利用 git submodule init 與 git submodule update 起始並下載各子模組的對應版本資料. 這裡所謂下載各子模組的對應版本資料, 指的是 git submodule add 會將子模組當下最新版本, 設為父模組的對應版本, 因此當使用者 git clone 、git submodule init 並 git submodule update 時, 就是下載各子模組當時註記的版本. 換言之, 當課程進行到期中或期末評分階段時, 各組就必須在規定時效內處理好各組與各組員的子模組對應版本, 以便執行自評與互評的流程. 與子模組設定及更新維護的說明, 請參考 https://github.com/mdecourse/2016fallcpa/wiki","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/git-shi-yong-dao-yin.html"},{"title":"計算機程式 (二)","text":"2016Fall 的計算機程式課程已經從 Github 的應用開始, 先讓學員利用 Git 分散式管理工具進行團隊間的數位資料管理, 然後再以線上的分組程式為例, 說明運用計算機程式, 如何將原本繁雜的資料排序流程, 導向能隨需求而快速因應變化的網際程式流程. 課程中有關 Github 的簡介, 請參考: 2016-09-23_cpb_github_intro from 虎尾科大機械設計工程 on Vimeo . Github 倉儲的 fork 與 pull requests 操作說明, 請參考: 2016-09-23_fork_pull_requests from 虎尾科大機械設計工程 on Vimeo . 有關 git clone, git branch 與 git checkout 的用法說明, 請參考: 2016-09-23_git_clone_branch_checkout from 虎尾科大機械設計工程 on Vimeo . 至於與 git config, git add -A, git commit -m 與 git push 的使用說明, 請參考: 2016-09-23_git_clone_add_commit_push from 虎尾科大機械設計工程 on Vimeo . 接下將要讓各組成員, 利用 Brython-Server 主機 http://8888.kmol.info (或 http://runpython.com/ ), 直接在瀏覽器中, 利用倉儲 collaborators 身份與 pull requests 流程, 在個人 github 帳號下的 2016fallcp_hw 倉儲中進行 https://github.com/mdecourse/2016fallcp/blob/master/Python3Programs.txt 的練習.","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/ji-suan-ji-cheng-shi-er.html"},{"title":"電腦輔助設計實習 (二)","text":"電腦輔助設計實習課程主要利用 Github 網際分散式數位檔案版次管理系統, 讓學員可以利用 Git 工具進行近端與遠端電腦輔助設計檔案的管理. 有關課程規劃與執行的初步說明, 請參考: 2016-09-23_about_cadp from 虎尾科大機械設計工程 on Vimeo . 有關 Github 帳號註冊與登入與建立 repositories 的簡要說明, 請參考: 2016-09-23_cpb_github_intro from 虎尾科大機械設計工程 on Vimeo . 有關學員 Github Pages 網頁與其他倉儲 gh-pages 頁面的用法, 請參考: 2016-09-23_github_pages from 虎尾科大機械設計工程 on Vimeo . 有關 Github 倉儲 settings 中 collaborators 設定方法, 請參考: 2016-09-23_github_repo_collaborators from 虎尾科大機械設計工程 on Vimeo . 有關在 Github 環境中, 進行課程倉儲的 Fork 與 Pull Requests 基本用法說明, 請參考: 2016-09-23_fork_pull_requests from 虎尾科大機械設計工程 on Vimeo .","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/dian-nao-fu-zhu-she-ji-shi-xi-er.html"},{"title":"電腦操作流程錄影工具","text":"製作多媒體影音檔案是機械設計工程師在產品設計開發過程中六種表達中的重要技能之一, 因為其中融合口語表達、文字表達、2D 圖像表達與(3D) 動態資料表達、解析模型表達與實體原型表達等內容, 在 2016Fall 的 計算機程式 與 電腦輔助設計實習 課程中, 我們將採用 ShareX (建議 下載 ShareX portable 版本 ) 與 Kazam 等兩套用來錄製多媒體影片的工具, 其中 ShareX 以 C# 編寫, 適用於 Windows, 而 Kazam 則採用 Python3 編寫, 可用於 Ubuntu 操作系統環境中的螢幕操作錄影. 有關 ShareX 的基本設定與使用說明, 請參考: 2016-09-23_about_sharex from 虎尾科大機械設計工程 on Vimeo . 其中 ShareX 的 Applications settings 主要在設定錄製後的 .mp4 檔案儲存的位置, 而 Task settings 的設定則用來指定影片檔與聲音檔錄製所採用的硬體配置. 而 Kazam 在 Ubuntu 14.04 中的安裝, 可採用: $ sudo apt-get install kazam 假如其他版本的 Debian 操作系統, 無法使用上述指令安裝者, 可以嘗試利用下列指令安裝: $ sudo add-apt-repository ppa:kazam-team/stable-series $ sudo apt-get update $ sudo apt-get install kazam 安裝 Kazam 後, 在 shell 指令中, 以 kazam& 令其在 background 模式下執行, 並利用 File->Preferences 設定錄音硬體設備. Kazam 與 ShareX 最大的差別是 Kazam 只能錄製電腦螢幕內的操作 (屬於 Screencast 工具), 而 ShareX 除能錄製螢幕操作外, 還可以錄製 Web Cam 所拍攝的內容 (屬於 Video Recorder 工具). 至於上課所使用的 USB Web Cam 則為 Microsoft Lifecam 系列.","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/dian-nao-cao-zuo-liu-cheng-lu-ying-gong-ju.html"},{"title":"電腦輔助設計實習 (一)","text":"2016FallCADP 課程倉儲: https://github.com/mdecourse/2016fallcadp 2016FallCADP 上課筆記: https://github.com/mdecourse/2016fallcadp/wiki 2016Fall 電腦輔助設計實習的課程, 其分組評分規劃的內容與 計算機程式 相同, 每一個修課學員都必須擁有一個 github 帳號, 而且在其帳號下建立個人的課程作業倉儲 2016fallcadp_hw, 並且自選組員 6 人一組, 最後不足 4 人之組員則可依學號序, 從第1組每組一員依序納入分組. 一旦組長與組序確定後, 各組組長必須在其 github 帳號下, 建立自己的 2016fallcadp_hw 倉儲外, 還需要建立一個分組的對應倉儲 2016fallcadp_ag1 (以甲班第1組為例, 其餘各班各組則依班別與組序修改), 而且各組的個人作業倉儲與分組倉儲都必須以 gh-pages 分支為主, 因此可以直接將 branch default 設為 gh-pages, 且各倉儲資料可以直接透過瀏覽器擷取 為了明確區隔個人倉儲與分組倉儲的評分內容, 各組組長必須將各組員的作頁倉儲, 以其 github 帳號命名, 作為 submodule, 且必須在期中與期末週進行評分期限前, 將 submodule 的對應版本更新, 修課期間各組員每週筆記按照規定, 必須寫在個人的 2016fallcadp_hw 倉儲中的 wiki 區, 並透過 pull requests 機制共同維護各分組的對應倉儲 2016fallcadp_ag1 (以甲班第1組為例, 其餘各班各組則依班別與組序修改) 中的內容. 各學員的作業倉儲與分組倉儲中的 gh-pages 分支內容, 建議採用 https://github.com/scrum-1/2016fallcp_ag100 中的架構, index.html 為 reveal.js 簡報, 而 blog 子目錄則為 pelican 靜態網誌, 相關資料的維護與轉檔, 則利用 users 目錄中的 .leo 專案檔進行. 以下則為各修課組員在 github 登入後, 必須完成的動作: fork https://github.com/mdecourse/2016fallcadp 倉儲, 所有學員都必須透過 pull request 修改倉儲內容, 各組組長將設為此倉儲的 collaborators, 負責審核處理各組員所提出的拉回請求. 在自己的 github 帳號下, 建立 2016cadp_hw 個人作業倉儲, 並將個人上課筆記, 寫在此倉儲的對應 wiki 中, 且將 default branch 設為 gh-pages. 各組自選組員後, 將透過 https://github.com/mdecourse/2016fallcp/blob/master/2016springgrouping.py 程式, 直接在瀏覽器中進行定組序與排座位流程, 各組組長須透過 pull requests, 將各組名單送到 2016fallcadp 倉儲後進行. 組序確定後, 各組組長在自己的 github 帳號下, 建立分組的評量倉儲, 2016fallcadp_ag1 (以甲班第1組為例, 其餘各班各組則依班別與組序修改), 且將各組組員的作業倉儲設為 submodule, 子目錄名稱為各組員的 github 帳號. 有關 submodule 的用法與維護, 請參考 https://github.com/mdecourse/2016fallcpa/wiki 中的說明. 設定範例, 請參考 https://github.com/scrum-1/2016fallcp_ag100 . 上述動作完成後, 請依照 課程規劃 與 上課筆記 中的說明, 進行課程的研習.","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/dian-nao-fu-zhu-she-ji-shi-xi-yi.html"},{"title":"計算機程式 (一)","text":"2016FallCP 課程倉儲: https://github.com/mdecourse/2016fallcp 2016FallCP 上課筆記: https://github.com/mdecourse/2016fallcp/wiki 在 2016 Fall 的計算機程式課程中, 我們將導入 Github submodule 的功能, 各學員都必須在自己的帳號下, 建立 2016fallcp_hw 倉儲, 且將每週上課的筆記寫在 2016fallcp_hw 倉儲對應的 wiki 中, 而每一組的作業內容則集結在分組組長的 2016fallcp_ag1 (以甲班第1組為例), 最後在期中與期末評量階段時, 再分別將各組所完成的 2016fallcp_ag1 倉儲內容版本, 以 submodule 導入 mdecourse 帳號下的 2016fallcpa (以甲班為例), 待課程結束後, 再將 2016fallcpa 與 2016fallcpb 中的資料納入 2016fallcp 倉儲, 而以上為了讓所有資料都能在瀏覽器中呈現, 因此各倉儲資料的繳交都必須集中在 gh-pages 分支中. 總結上述規劃, 分別列出各成員, 各組組長與各班課程評分模式下所必須進行的 github 對應倉儲: 組員 必須使用學校配發的 gmail 申請 github 帳號 必須在自己的 github 帳號下建立 2016fallcp_hw 倉儲, 而個人的網頁將位於: https://s組員學號.github.io, 且個人的作業內容網頁將位於: https://s組員學號.github.io/2016fallcp_hw (根目錄與 blog 子目錄內容, 則根據下列評量格式設定) 各組員必須透過 pull requests 機制, 協同維護各組的分組倉儲 組長 因為同時俱備組員身份, 因此必須先完成上述組員的各項工作後, 在組長的 github 帳號下建立 2016fallcp_ag1 (以甲班第一組為例) 各組的網頁將是: https://s組長學號.github.io/2016fallcp_ag1 (以甲班第一組為例, 根目錄與 blog 子目錄內容, 則根據下列評量格式設定) 各組組長必須審核並處理組員送出的協同 pull requests, 並將組員的作業倉儲設為分組倉儲的 submodule, 例如: https://s組長學號.github.io/2016fallcp_ag1/s組員學號, 即可檢視 s組員學號的各對應版本作業資料. 各組組長將會成為 mdecourse/2016fallcp 倉儲的 collaborators, 俱備處理各組組員對此倉儲所送出 pull requests 的權限. 期中期末評量 github mdecourse 帳號下將建立 2016fallcpa 與 2016fallcpb 倉儲, 會將各班各組的分組倉儲納入, 作為 submodule, 並分別在第九週與第十八週進行各組資料的拉回與更新, 以作為組員評分參考, 以甲班為例, 第1組, s組員學號的資料將位於 https://mdecourse.github.io/2016fallcpa/g1/s組員學號/ 上述各種網頁, 除了必須以 gh-pages 的機制呈現外, 首頁必須採 reveal.js 簡報格式, 而 blog 子目錄中則以 pelican 靜態網頁格式呈現. 當課程結束後, 2016fallcpa 與 2016fallcpb 倉儲中的資料, 將會一併納入 mdecourse/2016fallcp 倉儲的 gh-pages 分支中, 因此甲班各分組的資料將位於 https://mdecourse.github.io/2016fallcp/a/g1 (以第一組為例), 而各學員的資料則希望設為 https://mdecourse.github.io/2016fallcp/a/s學員學號 (以甲班 s學員學號為例) 實作討論 由於各成員倉儲內的資料都希望採瀏覽器進行檢視, 因此都必須將資料納入 gh-pages 分支中, 各成員在提交推送資料時必須特別注意, 本課程建議各成員使用的 git 圖形化工具為: https://github.com/FredrikNoren/ungit 各成員必須熟悉 git branch 與 git checkout 指令, 以便建立分支, 查驗目前所在分支, 並且將分支的內容簽出到近端工作目錄中. 初期各組員獨立協同下的資料合併, 可以直接在 github 網站上操作, 但是有版本內容衝突的 pull requests, 就必須拉回近端的工作目錄中進行衝突處理與測試後, 才能合併資料後, 將內容提交推送回遠端倉儲. git submodule add repo_url local_path 執行之前, 不可自行建立倉儲中的 local_path 目錄, 而是讓 git 指令完成動作後, 以 git submodule init 起始 submodule 目錄中的資料結構, 並以 git submodule update 將子模組中對應版本的資料取回近端的工作目錄中. 各成員網頁中的 reveal.js 與 pelican 靜態網頁格式, 將另外以 mdecourse/reveal 與 mdecourse/pelican 倉儲提供範例樣板資料. 期中與期末評量倉儲中, 有關各組 git submodule 更新版本對應與各學員資料的集結過程, 需要另外編寫指令或程式碼, 將一併放入 mdecourse/2016fallcp 倉儲中的 Leo Editor 專案中.","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/ji-suan-ji-cheng-shi-yi.html"},{"title":"協同產品設計實習系列課程","text":"二十一世紀的科技發展, 拜網路普及與數位運算能力大幅提升之賜, 使得集合在不同地理位置與時區上的工程師, 執行同步或非同步協同產品開發專案的模式, 已然成為常態. 因此, 協同產品設計實習系列課程從大一的計算機程式開始, 即導入與網路相關的技術與分散式版次專案管理的概念, 並希望透過隨後的網際內容管理、電腦輔助設計實習與協同產品設計實習等課程之研習, 讓學員充分理解機械設計工程師在團隊間必須仰賴口語表達、文字表達、2D 靜態文件表達、3D 動態文件表達 (含影音多媒體文件表達)、理論分析表達與實體原型表達等六種表達方式進行溝通. 接下來, 我們列出學校已經購買, 且與本系列課程相關之電子書作為參考 (學員可以在電腦輔助設計室中下載 pdf 檔案): 計算機程式相關: Pro Git Learn to Program with Python (本書採用 Python 2.7, 上課時必須改為 Python3 格式) A Primer on Scientific Programming with Python Programming for Computations - Python Numerical Python Pro Python 電腦輔助設計實習與協同產品設計實習相關: Pro Git Beginning Windows 10 3D Printing with Delta Printers Maintaining and Troubleshooting Your 3D Printer Handbook of Mathematics Handbook of Physics Handbook of Open Source Tools Handbook of Modern Sensors Springer Handbook of Robotics Project Management Handbook Handbook of Manufacturing Control Handbook Factory Planning and Design Chassis Handbook Handbook of Food Factory Design Springer Handbook of Acoustics Computational Design of Rolling Bearings Heat Pipe Design and Technology Collaboration in Creative Design The Philosophy of Science and Engineering Design 其次, 2016 Fall 的計算機程式課程的倉儲位於: https://github.com/mdecourse/2016fallcp , 我們將要採用兩個網際程式系統與一個可攜單機跨平台程式系統導引 Python3 計算機程式的學習, 網際程式系統分別是 http://8888.kmol.info 與 https://mdecourse.github.io/reeborg2016/reeborg.html , 而單機可攜跨平台系統則將採用 Anaconda 製作. 而 2016 Fall 的電腦輔助設計實習課程的倉儲位於: https://github.com/mdecourse/2016fallcadp , 3D 零組件繪圖套件將以 https://www.onshape.com/ 為主, Solvespace 為輔, 當然,學員也可以採用 Creo Parametric 與 Solidworks 進行零組件繪圖. 原則上, 所有選修電腦輔助設計實習課程的學員應該都已經擁有 Github 帳號, 可以直接在登入 Github 後, git clone https://github.com/mdecourse/2016fallcadp 倉儲資料後, 將隨後每週上課筆記寫在 2016fallcadp 倉儲對應的 wiki 資料區中, 並且設法在此一倉儲中建立 gh-pages 分支, 並且著手架構學員各自的 pelican 網誌與 reveal.js 網際投影片. 至於選修 2016 Fall 計算機程式的新生, 則必須利用學校交付的 gmail 帳號, 登記 github 帳號, 然後直接利用 http://8888.kmol.info 網站, 開始第1階段的 Python3 程式課程. 計算機程式課程一開始便透過 網際分組程式 , 讓學員一窺利用瀏覽器上的 Python3 程式執行修課學員分組與編排座位的程式碼與分組結果. 其中牽涉 Python3 模組的導入, 函式定義與呼叫, 數列內容排序與重複迴圈的實際應用. 而電腦輔助設計實習課程一開始則透過一台 Kossel Delta 3D printer 的組立, 讓學員了解目前的所謂機械產品設計, 有很大的比例都包含機電資光等跨領域的整合設計內容, 並讓各分組學員可以利用此一 3D 零件列印機, 選擇性列印各組所完成的原型設計.","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/xie-tong-chan-pin-she-ji-shi-xi-xi-lie-ke-cheng.html"},{"title":"網際 3D 正齒輪傳動模擬 (一)","text":"Onshape 的正齒輪設計繪圖與組立, 其基本原理與先前的 2D 網際繪圖類似, 只不過在以下的 3D 正齒輪傳動組立過程, 只有 Spur Gear 功能採用 Featurescript 編寫, 雖然在 Onshape Part Studio 中, 所有的零件可以透過統一的設計變數進行控管, 但若一旦設計流程的變化超出原先 Featurescript 的表單設定範圍 (例如: SG Featurescript 中的 Offset angle 只允許 0-360 的正值角度輸入), 設計者就必須介入調整不符合表單設計的 error. 因此, 以正齒輪減速機的協同設計為例, 可以了解全面透過程式流程掌握機械設計流程的重要性, 目前在無法利用 Onshape API 進行較完整的協同產品設計架構下, 只能利用部份的網際 2D 繪圖模組進行配置, 並將 3D 零組件的定製與組裝模擬, 透過客製化的網際程式 (Python+Brython+Javascript+Jupyter) 轉為 Onshape 的 Featurescript 程式. https://cad.onshape.com/documents/574b8f57e4b04aa3f56f9441/w/d4cf9fa83a3269b42c39edd5/e/7cea03a6cc37cca3cc64e5de 是一個利用 SG 正齒輪繪圖模組建立的 4 個齒輪傳動組立檔. 範例中的所有零件都在同一個 Part Studio 中, 以共用設計變數的方式建立. 例如, 其中的齒輪一齒數以 #n1 變數設定. 各齒輪的 Offset 轉角, 也配合組立時的座標軸與齒輪起始標定線 (在 Featurescript 中設為 x 軸, 且對準齒根中線), 採用設計變數設定. 各齒輪組立時 x 軸的指向, 決定後續 Offset 角度設定與囓合配置的運算, 其囓合原理與 2D 齒輪繪圖相同. 以下為其他各齒輪組立時 x 軸的定位方向 (紅色軸).","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/wang-ji-3d-zheng-chi-lun-chuan-dong-mo-ni-yi.html"},{"title":"網際 2D 正齒輪協同繪圖規劃","text":"利用 Python 物件導向架構執行網際 2D 正齒輪傳動協同繪圖時, 各組員可以將各種不同繪圖元件, 建置在個人的網頁空間中, 讓其他參與協同的組員連結應用. 唯一必須注意的是, 就網際繪圖模式而言, 儘管 Brython 繪圖最終仍轉為 JavaScript, 以 Canvas 或 WebGL 完成繪圖, 但是 Python 程式碼在各自的 script 標註中屬於各自的命名空間 (此點與 Prototype based 的 JavaScript 有很大的差別), 因此以下的範例, 必須將各自在引用的 script 標註中, 以 id 命名, 然後根據 id 名稱, 在其他命名空間中以 import 引用. 以下為 17 齒, 29 齒與 15 齒輪組的囓合繪圖, 其中的漸開線正齒輪 2D 繪圖程式庫以類別建立, 並且存在 https://cadlab.mde.tw/post/by/spur.js , 之所以採用 .js 命名, 主要在避開修改瀏覽器中的 MIME 對應, 可以直接在隨後的 Brython 程式中, 以 import 方式引用: window.onload=function(){ brython(1); } import spurmain from browser import document, html # 利用 Brython 的 document 建立一個 id 為 container 的 div 區域, 然後在其中放入對應的 html 標註 container = document['container'] # 3個齒輪的齒數 n1 = 17 n2 = 29 n3 = 15 # 根據繪圖的 3 個齒輪大小計算所需的畫布高度 height = 1.2*800*0.8/(int(n1)+int(n2)+int(n3))*max([int(n1), int(n2), int(n3)]) # 決定畫布的 id 字串 id = \"gear\" # 利用 Brython 的 html 方法建立 CANVAS canvas = html.CANVAS(id=id, width=800, height=height) # 將所建立的 canvas 畫布標註放入 container container <= canvas # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth # 利用 80% 的畫布寬度進行繪圖 # 計算模數的對應尺寸 m = canvas.width*0.8/(n1+n2+n3) # 根據齒數與模組計算各齒輪的節圓半徑 pr1 = n1*m/2 pr2 = n2*m/2 pr3 = n3*m/2 # 畫布左右兩側都保留畫布寬度的 10% # 依此計算對應的最左邊齒輪的軸心座標 cx = canvas.width*0.1+pr1 cy = canvas.height/2 # pa 為壓力角 pa = 25 # 這裡的齒輪繪圖以所導入的 spurmain 模組中的 Spur 類別建立對應的 gear 變數, 且宣告畫布 id gear = spurmain.Spur(id) # 畫最左邊齒輪, 定位線旋轉角為 0, 軸心座標 (cx, cy) gear.spur(cx, cy, m, n1, pa, 0) # 第2個齒輪將原始的定位線逆時鐘轉 180 度後, 與第1個齒輪正好齒頂與齒頂對齊 # 只要第2個齒輪再逆時鐘或順時鐘轉動半齒的角度, 即可完成囓合 # 每一個齒分別包括從齒根到齒頂的範圍, 涵蓋角度為 360/n, 因此所謂的半齒角度為 180/n gear.spur(cx+pr1+pr2, cy, m, n2, pa, 180-180/n2) # 第2齒與第3齒的囓合, 首先假定第2齒的定位線在 theta 角為 0 的原始位置 # 如此, 第3齒只要逆時鐘旋轉 180 度後, 再逆時鐘或順時鐘轉動半齒的角度, 即可與第2齒囓合 # 但是第2齒為了與第一齒囓合時, 已經從原始定位線轉了 180-180/n2 度 # 而當第2齒從與第3齒囓合的定位線, 逆時鐘旋轉 180-180/n2 角度後, 原先囓合的第3齒必須要再配合旋轉 (180-180/n2 )*n2/n3 gear.spur(cx+pr1+pr2+pr2+pr3, cy, m, n3, pa, 180-180/n3+(180-180/n2)*n2/n3) 上述繪圖的程式碼: <script type=\"text/javascript\" src=\"./../data/brython_dist.js\"></script> <script type=\"text/javascript\" src=\"./../data/Cango-8v05-min.js\"></script> <script type=\"text/javascript\" src=\"./../data/Cango2D-7v04-min.js\"></script> <script type=\"text/javascript\" src=\"./../data/gearUtils-05.js\"></script> <script> window.onload=function(){ brython(1); } </script> <div id=\"container\"></div> <script type=\"text/python\" src=\"http://cadlab.mde.tw/post/by/spur.js\" id=\"spurmain\"></script> <script type=\"text/python\"> import spurmain from browser import document, html # 利用 Brython 的 document 建立一個 id 為 container 的 div 區域, 然後在其中放入對應的 html 標註 container = document['container'] # 3個齒輪的齒數 n1 = 17 n2 = 29 n3 = 15 # 根據繪圖的 3 個齒輪大小計算所需的畫布高度 height = 1.2*800*0.8/(int(n1)+int(n2)+int(n3))*max([int(n1), int(n2), int(n3)]) # 決定畫布的 id 字串 id = \"gear\" # 利用 Brython 的 html 方法建立 CANVAS canvas = html.CANVAS(id=id, width=800, height=height) # 將所建立的 canvas 畫布標註放入 container container <= canvas # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth # 利用 80% 的畫布寬度進行繪圖 # 計算模數的對應尺寸 m = canvas.width*0.8/(n1+n2+n3) # 根據齒數與模組計算各齒輪的節圓半徑 pr1 = n1*m/2 pr2 = n2*m/2 pr3 = n3*m/2 # 畫布左右兩側都保留畫布寬度的 10% # 依此計算對應的最左邊齒輪的軸心座標 cx = canvas.width*0.1+pr1 cy = canvas.height/2 # pa 為壓力角 pa = 25 # 這裡的齒輪繪圖以所導入的 spurmain 模組中的 Spur 類別建立對應的 gear 變數, 且宣告畫布 id gear = spurmain.Spur(id) # 畫最左邊齒輪, 定位線旋轉角為 0, 軸心座標 (cx, cy) gear.spur(cx, cy, m, n1, pa, 0) # 第2個齒輪將原始的定位線逆時鐘轉 180 度後, 與第1個齒輪正好齒頂與齒頂對齊 # 只要第2個齒輪再逆時鐘或順時鐘轉動半齒的角度, 即可完成囓合 # 每一個齒分別包括從齒根到齒頂的範圍, 涵蓋角度為 360/n, 因此所謂的半齒角度為 180/n gear.spur(cx+pr1+pr2, cy, m, n2, pa, 180-180/n2) # 第2齒與第3齒的囓合, 首先假定第2齒的定位線在 theta 角為 0 的原始位置 # 如此, 第3齒只要逆時鐘旋轉 180 度後, 再逆時鐘或順時鐘轉動半齒的角度, 即可與第2齒囓合 # 但是第2齒為了與第一齒囓合時, 已經從原始定位線轉了 180-180/n2 度 # 而當第2齒從與第3齒囓合的定位線, 逆時鐘旋轉 180-180/n2 角度後, 原先囓合的第3齒必須要再配合旋轉 (180-180/n2 )*n2/n3 gear.spur(cx+pr1+pr2+pr2+pr3, cy, m, n3, pa, 180-180/n3+(180-180/n2)*n2/n3) </script> 上面的 2D 齒輪繪圖, 雖然引用雲端上的繪圖程式庫, 可以統一控管各程式庫的版本, 但是若不同程式庫間的主機無法連結, 或者當程式庫更新後, 先前所採用的舊繪圖函式可能無法相容或無法完成繪圖, 因此在雲端建置電腦輔助機械設計架構時, 必須採用類似 Onshape 的作法, 雖然所有的程式庫統一更新, 但是各種零組件在建立時, 透過當時所使用的模型主體 (Context), 儲存了所使用的標準零件庫版本, 除非使用者刻意更新, 否則所有的雲端設計專案都將在各自原先的版本命名空間中獨立運作, 不會產生版本分歧或謬誤的問題. 以下則利用 Python 的物件導向, 另外建立一個畫布繪圖, 其中除了使用 Brython 程式方法, 即時建立 CANVAS 畫布外, 也同時採用物件繼承的方式, 引用遠端的 spur.js 繪圖程式庫, 並且加入鏈條與鏈輪的繪圖元件: import spurmain from browser import document, html # 建立新的繪圖方法 sprocket 用 from browser import window from javascript import JSConstructor import math cango = JSConstructor(window.Cango) shapedefs = window.shapeDefs cobj = JSConstructor(window.Cobj) creategeartooth = JSConstructor(window.createGearTooth) class mySpur(spurmain.Spur): # 定義 sprocket # rs 為 roller rasius # pc 為 pitch def sprocket(self, cx, cy, rs, pc, n, theta): self.cx = cx self.cy = cy self.rs = rs self.pc = pc self.n = n self.pa = pa self.theta = theta rotangle = 360/self.n pr = self.pc/2/math.sin((rotangle/2)*math.pi/180) pt1x = pr-rs pt1y = 0 pt2x = pr-(pr-pr*math.cos(rotangle*math.pi/180))*rs/pc pt2y = (pr*math.sin(rotangle*math.pi/180))*rs/pc ptmx = pr-(pr-pr*math.cos(rotangle*math.pi/180))*(0.5*pc)/pc ptmy = (pr*math.sin(rotangle*math.pi/180))*(0.5*pc)/pc lenmto3 = math.sqrt(math.pow(pc-rs,2)-math.pow(pc*0.5, 2)) lenztom = math.sqrt(math.pow(ptmx, 2)+math.pow(ptmy, 2)) r3 = lenztom + lenmto3 pt3x = r3*math.cos(0.5*rotangle*math.pi/180) pt3y = r3*math.sin(0.5*rotangle*math.pi/180) pt4x = pr-(pr-pr*math.cos(rotangle*math.pi/180))*(pc-rs)/pc pt4y = (pr*math.sin(rotangle*math.pi/180))*(pc-rs)/pc pt5x = (pr-rs)*math.cos(rotangle*math.pi/180) pt5y = (pr-rs)*math.sin(rotangle*math.pi/180) data = ['M', pt1x, pt1y, 'A', rs, rs, 0, 0, 0, pt2x, pt2y, \\ 'A', pc-rs, pc-rs, 0, 0, 1, pt3x, pt3y, \\ 'A', pc-rs, pc-rs, 0, 0, 1, pt4x, pt4y, \\ 'A', rs, rs, 0, 0, 0, pt5x, pt5y] sprocketTooth = cobj(data, \"SHAPE\", { \"fillColor\":\"#ddd0dd\", \"border\": True, \"strokeColor\": \"#606060\" }) # theta 為 degree sprocketTooth.rotate(self.theta) sprocket = sprocketTooth.dup() # 利用單齒輪廓旋轉, 產生整個齒盤外形 for i in range(1, self.n): # 將 sprocketTooth 中的資料複製到 newTooth newTooth = sprocketTooth.dup() # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear newTooth.rotate(360*i/self.n) # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號 sprocket.appendPath(newTooth, True) # trim move command = True # 建立軸孔 # add axle hole, hr 為 hole radius hr = 0.6*pr # diameter of gear shaft shaft = cobj(shapedefs.circle(hr), \"PATH\") shaft.revWinding() sprocket.appendPath(shaft) # retain the 'moveTo' command for shaft sub path sprocket.translate(self.cx, self.cy) # render 繪出靜態正齒輪輪廓 self.cgo.render(sprocket) # 接著繪製齒盤的基準線 deg = math.pi/180 Line = cobj(['M', self.cx, self.cy, 'L', self.cx+pr*math.cos(self.theta*deg), self.cy+pr*math.sin(self.theta*deg)], \"PATH\", { 'strokeColor':'blue', 'lineWidth': 1}) self.cgo.render(Line) # 將繪製鏈條輪廓的內容寫成 class 物件 class Chain(): def __init__(self, canvas_id): self.canvas_id = canvas_id self.cgo = cango(self.canvas_id) def chain(self, x, y, rs, pc, theta, render=True): self.x = x self.y = y self.rs = rs self.pc = pc self.theta = theta self.render = render # rs 為 roller rasius # pc 為 pitch # 以水平作為起始角度, 左邊圓心位於原點, 左右圓半徑為 rs = 7, pc 為 20, 上下圓弧半徑為 20 cx = 0 cy = 0 c2x = cx + self.pc c2y = cy # upper arc center coord ucx = self.pc/2 ucy = math.sqrt(math.pow(self.rs+self.pc, 2)-math.pow(0.5*self.pc, 2)) # down side arc center coord dcx = ucx dcy = -math.sqrt(math.pow(self.rs+self.pc, 2)-math.pow(0.5*self.pc, 2)) # 上方左邊切點座標 pt1x = cx+(ucx-cx)*(self.rs/(self.pc+self.rs)) pt1y = cy+(ucy-cy)*(self.rs/(self.pc+self.rs)) pt2x = cx+(dcx-cx)*(self.rs/(self.pc+self.rs)) pt2y = cy+(dcy-cy)*(self.rs/(self.pc+self.rs)) pt3x = c2x+self.rs*(dcx-c2x)/(self.pc+self.rs) pt3y = c2y+self.rs*(dcy-c2y)/(self.pc+self.rs) pt4x = c2x+self.rs*(ucx-c2x)/(self.pc+self.rs) pt4y = c2y+self.rs*(ucy-c2y)/(self.pc+self.rs) # 輪廓的外型設為成員變數 data = ['M', pt1x, pt1y, \\ 'A', self.rs, self.rs, 0, 1, 1, pt2x, pt2y, \\ 'A', self.pc, self.pc, 0, 0, 0, pt3x, pt3y, \\ 'A', self.rs, self.rs, 0, 1, 1, pt4x, pt4y, \\ 'A', self.pc, self.pc, 0, 0, 0, pt1x, pt1y, 'z'] chain = cobj(data, \"SHAPE\", { \"fillColor\":\"#ddd0dd\", \"border\": True, \"strokeColor\": \"#606060\" }) hole1 = cobj(shapedefs.circle(self.rs/1.5), \"PATH\") hole1.translate(cx, cy) hole1.revWinding() chain.appendPath(hole1) hole2 = cobj(shapedefs.circle(self.rs/1.5), \"PATH\") hole2.translate(c2x, c2y) hole2.revWinding() chain.appendPath(hole2) # theta is degree chain.rotate(self.theta) chain.translate(self.x, self.y) if self.render == True: self.cgo.render(chain) deg = math.pi/180 x2 = cx + self.x+ self.pc*math.cos(self.theta*deg) y2 = cy + self.y+ self.pc*math.sin(self.theta*deg) return x2, y2 # 利用 Brython 的 document 建立一個 id 為 container 的 div 區域, 然後在其中放入對應的 html 標註 container = document['container1'] # 3個齒輪的齒數 n1 = 18 n2 = 29 n3 = 15 # 根據繪圖的 3 個齒輪大小計算所需的畫布高度 height = 1.2*800*0.8/(int(n1)+int(n2)+int(n3))*max([int(n1), int(n2), int(n3)]) # 決定畫布的 id 字串 id = \"gear1\" # 利用 Brython 的 html 方法建立 CANVAS canvas = html.CANVAS(id=id, width=800, height=height) # 將所建立的 canvas 畫布標註放入 container container <= canvas # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth # 利用 80% 的畫布寬度進行繪圖 # 計算模數的對應尺寸 m = canvas.width*0.8/(n1+n2+n3) # 根據齒數與模組計算各齒輪的節圓半徑 pr1 = n1*m/2 pr2 = n2*m/2 pr3 = n3*m/2 # 畫布左右兩側都保留畫布寬度的 10% # 依此計算對應的最左邊齒輪的軸心座標 cx = canvas.width*0.1+pr1 cy = canvas.height/2 # pa 為壓力角 pa = 25 # mySpur 已經新建一個 sprocket 繪圖方法 gear = mySpur(id) # 畫最左邊齒輪, 定位線旋轉角為 0, 軸心座標 (cx, cy) gear.sprocket(cx, cy, 7, 20, n1, 0) # 第2個齒輪將原始的定位線逆時鐘轉 180 度後, 與第1個齒輪正好齒頂與齒頂對齊 # 只要第2個齒輪再逆時鐘或順時鐘轉動半齒的角度, 即可完成囓合 # 每一個齒分別包括從齒根到齒頂的範圍, 涵蓋角度為 360/n, 因此所謂的半齒角度為 180/n gear.sprocket(cx+pr1+pr2, cy, 7, 20, n2, 180-180/n2) # 第2齒與第3齒的囓合, 首先假定第2齒的定位線在 theta 角為 0 的原始位置 # 如此, 第3齒只要逆時鐘旋轉 180 度後, 再逆時鐘或順時鐘轉動半齒的角度, 即可與第2齒囓合 # 但是第2齒為了與第一齒囓合時, 已經從原始定位線轉了 180-180/n2 度 # 而當第2齒從與第3齒囓合的定位線, 逆時鐘旋轉 180-180/n2 角度後, 原先囓合的第3齒必須要再配合旋轉 (180-180/n2 )*n2/n3 gear.sprocket(cx+pr1+pr2+pr2+pr3, cy, 7, 20, n3, 180-180/n3+(180-180/n2)*n2/n3) rs = 7 pc = 20 degree = math.pi/180 radian = 180/math.pi rotangle = 360/n1 r1 = pc/2/math.sin((rotangle/2)*math.pi/180) inc = math.pi - math.atan2(r1*math.sin(rotangle*degree), r1-r1*math.cos(rotangle*degree)) mychain = Chain(id) x1 = cx + r1 y1 = cy for i in range(n1-5): if i < 5: x2, y2 = mychain.chain(x1, y1, rs, pc, inc*radian+rotangle*i, False) else: x2, y2 = mychain.chain(x1, y1, rs, pc, inc*radian+rotangle*i) x1, y1 = x2, y2 rotangle = 360/n2 r2 = pc/2/math.sin((rotangle/2)*math.pi/180) inc = math.pi - math.atan2(r2*math.sin(rotangle*degree), r2-r2*math.cos(rotangle*degree)) mychain = Chain(id) x1 = cx+pr1+pr2+r2 y1 = cy for i in range(n2): if i > 7 and i < 20: x2, y2 = mychain.chain(x1, y1, rs, pc, inc*radian+rotangle*i, False) else: x2, y2 = mychain.chain(x1, y1, rs, pc, inc*radian+rotangle*i) x1, y1 = x2, y2 if i == 7: x7, y7 = x2, y2 if i == 19: x20, y20 = x2, y2 for i in range(12): if i == 11: offset = 12 else: offset = 0 x2, y2 = mychain.chain(x7, y7, rs, pc, inc*radian+rotangle*8-i*1.5+offset) x7, y7 = x2, y2 for i in range(11): if i == 10: offset = 2 else: offset = 0 x2, y2 = mychain.chain(x20, y20, rs, pc, -inc*radian+rotangle*20+20+offset) x20, y20 = x2, y2 上述繪圖的程式碼: <div id=\"container1\"></div> <script type=\"text/python\"> import spurmain from browser import document, html # 建立新的繪圖方法 sprocket 用 from browser import window from javascript import JSConstructor import math cango = JSConstructor(window.Cango) shapedefs = window.shapeDefs cobj = JSConstructor(window.Cobj) creategeartooth = JSConstructor(window.createGearTooth) class mySpur(spurmain.Spur): # 定義 sprocket # rs 為 roller rasius # pc 為 pitch def sprocket(self, cx, cy, rs, pc, n, theta): self.cx = cx self.cy = cy self.rs = rs self.pc = pc self.n = n self.pa = pa self.theta = theta rotangle = 360/self.n pr = self.pc/2/math.sin((rotangle/2)*math.pi/180) pt1x = pr-rs pt1y = 0 pt2x = pr-(pr-pr*math.cos(rotangle*math.pi/180))*rs/pc pt2y = (pr*math.sin(rotangle*math.pi/180))*rs/pc ptmx = pr-(pr-pr*math.cos(rotangle*math.pi/180))*(0.5*pc)/pc ptmy = (pr*math.sin(rotangle*math.pi/180))*(0.5*pc)/pc lenmto3 = math.sqrt(math.pow(pc-rs,2)-math.pow(pc*0.5, 2)) lenztom = math.sqrt(math.pow(ptmx, 2)+math.pow(ptmy, 2)) r3 = lenztom + lenmto3 pt3x = r3*math.cos(0.5*rotangle*math.pi/180) pt3y = r3*math.sin(0.5*rotangle*math.pi/180) pt4x = pr-(pr-pr*math.cos(rotangle*math.pi/180))*(pc-rs)/pc pt4y = (pr*math.sin(rotangle*math.pi/180))*(pc-rs)/pc pt5x = (pr-rs)*math.cos(rotangle*math.pi/180) pt5y = (pr-rs)*math.sin(rotangle*math.pi/180) data = ['M', pt1x, pt1y, 'A', rs, rs, 0, 0, 0, pt2x, pt2y, \\ 'A', pc-rs, pc-rs, 0, 0, 1, pt3x, pt3y, \\ 'A', pc-rs, pc-rs, 0, 0, 1, pt4x, pt4y, \\ 'A', rs, rs, 0, 0, 0, pt5x, pt5y] sprocketTooth = cobj(data, \"SHAPE\", { \"fillColor\":\"#ddd0dd\", \"border\": True, \"strokeColor\": \"#606060\" }) # theta 為 degree sprocketTooth.rotate(self.theta) sprocket = sprocketTooth.dup() # 利用單齒輪廓旋轉, 產生整個齒盤外形 for i in range(1, self.n): # 將 sprocketTooth 中的資料複製到 newTooth newTooth = sprocketTooth.dup() # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear newTooth.rotate(360*i/self.n) # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號 sprocket.appendPath(newTooth, True) # trim move command = True # 建立軸孔 # add axle hole, hr 為 hole radius hr = 0.6*pr # diameter of gear shaft shaft = cobj(shapedefs.circle(hr), \"PATH\") shaft.revWinding() sprocket.appendPath(shaft) # retain the 'moveTo' command for shaft sub path sprocket.translate(self.cx, self.cy) # render 繪出靜態正齒輪輪廓 self.cgo.render(sprocket) # 接著繪製齒盤的基準線 deg = math.pi/180 Line = cobj(['M', self.cx, self.cy, 'L', self.cx+pr*math.cos(self.theta*deg), self.cy+pr*math.sin(self.theta*deg)], \"PATH\", { 'strokeColor':'blue', 'lineWidth': 1}) self.cgo.render(Line) # 將繪製鏈條輪廓的內容寫成 class 物件 class Chain(): def __init__(self, canvas_id): self.canvas_id = canvas_id self.cgo = cango(self.canvas_id) def chain(self, x, y, rs, pc, theta, render=True): self.x = x self.y = y self.rs = rs self.pc = pc self.theta = theta self.render = render # rs 為 roller rasius # pc 為 pitch # 以水平作為起始角度, 左邊圓心位於原點, 左右圓半徑為 rs = 7, pc 為 20, 上下圓弧半徑為 20 cx = 0 cy = 0 c2x = cx + self.pc c2y = cy # upper arc center coord ucx = self.pc/2 ucy = math.sqrt(math.pow(self.rs+self.pc, 2)-math.pow(0.5*self.pc, 2)) # down side arc center coord dcx = ucx dcy = -math.sqrt(math.pow(self.rs+self.pc, 2)-math.pow(0.5*self.pc, 2)) # 上方左邊切點座標 pt1x = cx+(ucx-cx)*(self.rs/(self.pc+self.rs)) pt1y = cy+(ucy-cy)*(self.rs/(self.pc+self.rs)) pt2x = cx+(dcx-cx)*(self.rs/(self.pc+self.rs)) pt2y = cy+(dcy-cy)*(self.rs/(self.pc+self.rs)) pt3x = c2x+self.rs*(dcx-c2x)/(self.pc+self.rs) pt3y = c2y+self.rs*(dcy-c2y)/(self.pc+self.rs) pt4x = c2x+self.rs*(ucx-c2x)/(self.pc+self.rs) pt4y = c2y+self.rs*(ucy-c2y)/(self.pc+self.rs) # 輪廓的外型設為成員變數 data = ['M', pt1x, pt1y, \\ 'A', self.rs, self.rs, 0, 1, 1, pt2x, pt2y, \\ 'A', self.pc, self.pc, 0, 0, 0, pt3x, pt3y, \\ 'A', self.rs, self.rs, 0, 1, 1, pt4x, pt4y, \\ 'A', self.pc, self.pc, 0, 0, 0, pt1x, pt1y, 'z'] chain = cobj(data, \"SHAPE\", { \"fillColor\":\"#ddd0dd\", \"border\": True, \"strokeColor\": \"#606060\" }) hole1 = cobj(shapedefs.circle(self.rs/1.5), \"PATH\") hole1.translate(cx, cy) hole1.revWinding() chain.appendPath(hole1) hole2 = cobj(shapedefs.circle(self.rs/1.5), \"PATH\") hole2.translate(c2x, c2y) hole2.revWinding() chain.appendPath(hole2) # theta is degree chain.rotate(self.theta) chain.translate(self.x, self.y) if self.render == True: self.cgo.render(chain) deg = math.pi/180 x2 = cx + self.x+ self.pc*math.cos(self.theta*deg) y2 = cy + self.y+ self.pc*math.sin(self.theta*deg) return x2, y2 # 利用 Brython 的 document 建立一個 id 為 container 的 div 區域, 然後在其中放入對應的 html 標註 container = document['container1'] # 3個齒輪的齒數 n1 = 18 n2 = 29 n3 = 15 # 根據繪圖的 3 個齒輪大小計算所需的畫布高度 height = 1.2*800*0.8/(int(n1)+int(n2)+int(n3))*max([int(n1), int(n2), int(n3)]) # 決定畫布的 id 字串 id = \"gear1\" # 利用 Brython 的 html 方法建立 CANVAS canvas = html.CANVAS(id=id, width=800, height=height) # 將所建立的 canvas 畫布標註放入 container container <= canvas # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth # 利用 80% 的畫布寬度進行繪圖 # 計算模數的對應尺寸 m = canvas.width*0.8/(n1+n2+n3) # 根據齒數與模組計算各齒輪的節圓半徑 pr1 = n1*m/2 pr2 = n2*m/2 pr3 = n3*m/2 # 畫布左右兩側都保留畫布寬度的 10% # 依此計算對應的最左邊齒輪的軸心座標 cx = canvas.width*0.1+pr1 cy = canvas.height/2 # pa 為壓力角 pa = 25 # mySpur 已經新建一個 sprocket 繪圖方法 gear = mySpur(id) # 畫最左邊齒輪, 定位線旋轉角為 0, 軸心座標 (cx, cy) gear.sprocket(cx, cy, 7, 20, n1, 0) # 第2個齒輪將原始的定位線逆時鐘轉 180 度後, 與第1個齒輪正好齒頂與齒頂對齊 # 只要第2個齒輪再逆時鐘或順時鐘轉動半齒的角度, 即可完成囓合 # 每一個齒分別包括從齒根到齒頂的範圍, 涵蓋角度為 360/n, 因此所謂的半齒角度為 180/n gear.sprocket(cx+pr1+pr2, cy, 7, 20, n2, 180-180/n2) # 第2齒與第3齒的囓合, 首先假定第2齒的定位線在 theta 角為 0 的原始位置 # 如此, 第3齒只要逆時鐘旋轉 180 度後, 再逆時鐘或順時鐘轉動半齒的角度, 即可與第2齒囓合 # 但是第2齒為了與第一齒囓合時, 已經從原始定位線轉了 180-180/n2 度 # 而當第2齒從與第3齒囓合的定位線, 逆時鐘旋轉 180-180/n2 角度後, 原先囓合的第3齒必須要再配合旋轉 (180-180/n2 )*n2/n3 gear.sprocket(cx+pr1+pr2+pr2+pr3, cy, 7, 20, n3, 180-180/n3+(180-180/n2)*n2/n3) rs = 7 pc = 20 degree = math.pi/180 radian = 180/math.pi rotangle = 360/n1 r1 = pc/2/math.sin((rotangle/2)*math.pi/180) inc = math.pi - math.atan2(r1*math.sin(rotangle*degree), r1-r1*math.cos(rotangle*degree)) mychain = Chain(id) x1 = cx + r1 y1 = cy for i in range(n1-5): if i < 5: x2, y2 = mychain.chain(x1, y1, rs, pc, inc*radian+rotangle*i, False) else: x2, y2 = mychain.chain(x1, y1, rs, pc, inc*radian+rotangle*i) x1, y1 = x2, y2 rotangle = 360/n2 r2 = pc/2/math.sin((rotangle/2)*math.pi/180) inc = math.pi - math.atan2(r2*math.sin(rotangle*degree), r2-r2*math.cos(rotangle*degree)) mychain = Chain(id) x1 = cx+pr1+pr2+r2 y1 = cy for i in range(n2): if i > 7 and i < 20: x2, y2 = mychain.chain(x1, y1, rs, pc, inc*radian+rotangle*i, False) else: x2, y2 = mychain.chain(x1, y1, rs, pc, inc*radian+rotangle*i) x1, y1 = x2, y2 if i == 7: x7, y7 = x2, y2 if i == 19: x20, y20 = x2, y2 for i in range(12): if i == 11: offset = 12 else: offset = 0 x2, y2 = mychain.chain(x7, y7, rs, pc, inc*radian+rotangle*8-i*1.5+offset) x7, y7 = x2, y2 for i in range(11): if i == 10: offset = 2 else: offset = 0 x2, y2 = mychain.chain(x20, y20, rs, pc, -inc*radian+rotangle*20+20+offset) x20, y20 = x2, y2 </script> 上述鏈輪繪圖中需要計算5個關鍵點, 如下圖所示: 而此5個座標點將分別決定四段圓弧的繪製, 如下圖所示: 至於將鏈條第1節 (位於每一個鏈輪的水平軸最右側的節圓弧上), 設計者必須根據鏈輪齒數, 決定鏈條的逆時鐘旋轉與水平軸之間的偏角 (因為這裡原始的鏈條採水平方向建置), 而此依偏角可以根據下列示意圖求取. 計算第1節鏈條偏角的參考圖: 計算鏈條四個關鍵點的參考圖: 以下則用來說明 3 個齒輪囓合時, 先兩兩依據基本的囓合對應完成囓合後, 再考慮中介齒輪的配合轉動, 就可以逐一完成各式減速齒輪組的 2D 繪圖, 一旦雲端零組件繪圖流程進入 Onshape 3D 零組件設計繪圖, 就可以援用相同的囓合原理, 完成 3D 減速機齒輪箱的組立與模擬: import spurmain from browser import document, html # 利用 Brython 的 document 建立一個 id 為 container 的 div 區域, 然後在其中放入對應的 html 標註 container = document['container2'] # 3個齒輪的齒數 n1 = 17 n2 = 29 n3 = 15 # 根據繪圖的 3 個齒輪大小計算所需的畫布高度 height = 1.2*800*0.8/(int(n1)+int(n2)+int(n3))*max([int(n1), int(n2), int(n3)]) # 決定畫布的 id 字串 id = \"gear2\" # 利用 Brython 的 html 方法建立 CANVAS canvas = html.CANVAS(id=id, width=800, height=height) # 將所建立的 canvas 畫布標註放入 container container <= canvas # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth # 利用 80% 的畫布寬度進行繪圖 # 計算模數的對應尺寸 m = canvas.width*0.8/(n1+n2+n3) # 根據齒數與模組計算各齒輪的節圓半徑 pr1 = n1*m/2 pr2 = n2*m/2 pr3 = n3*m/2 # 畫布左右兩側都保留畫布寬度的 10% # 依此計算對應的最左邊齒輪的軸心座標 cx = canvas.width*0.1+pr1 cy = canvas.height/2 # pa 為壓力角 pa = 25 # mySpur 已經新建一個 sprocket 繪圖方法 gear = spurmain.Spur(id) gear.spur(cx, cy, m, n1, pa, 0) gear.spur(cx+pr1+pr2, cy, m, n2, pa, 180-180/n2) import spurmain from browser import document, html # 利用 Brython 的 document 建立一個 id 為 container 的 div 區域, 然後在其中放入對應的 html 標註 container = document['container3'] # 3個齒輪的齒數 n1 = 17 n2 = 29 n3 = 15 # 根據繪圖的 3 個齒輪大小計算所需的畫布高度 height = 1.2*800*0.8/(int(n1)+int(n2)+int(n3))*max([int(n1), int(n2), int(n3)]) # 決定畫布的 id 字串 id = \"gear3\" # 利用 Brython 的 html 方法建立 CANVAS canvas = html.CANVAS(id=id, width=800, height=height) # 將所建立的 canvas 畫布標註放入 container container <= canvas # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth # 利用 80% 的畫布寬度進行繪圖 # 計算模數的對應尺寸 m = canvas.width*0.8/(n1+n2+n3) # 根據齒數與模組計算各齒輪的節圓半徑 pr1 = n1*m/2 pr2 = n2*m/2 pr3 = n3*m/2 # 畫布左右兩側都保留畫布寬度的 10% # 依此計算對應的最左邊齒輪的軸心座標 cx = canvas.width*0.1+pr1 cy = canvas.height/2 # pa 為壓力角 pa = 25 # mySpur 已經新建一個 sprocket 繪圖方法 gear = spurmain.Spur(id) gear.spur(cx+pr1+pr2, cy, m, n2, pa, 0) gear.spur(cx+pr1+pr2+pr2+pr3, cy, m, n3, pa, 180-180/n3)","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/wang-ji-2d-zheng-chi-lun-xie-tong-hui-tu-gui-hua.html"},{"title":"網際 3D 正齒輪傳動模擬","text":"Onshape 終於正式公開 FeatureScript 以及所有內建特徵功能的 原始碼 , 並且同時追加了許多新的功能, 包括機構的動態模擬. 其中, 正好與協同產品設計實習課程進度結合的為 正齒輪組 的網際 3D 零組件設計繪圖與傳動模擬. 以下為上述正齒輪組的零件組立圖: 使用者可以直接在電腦瀏覽器或平版手機上的 Onshape App, 開啟漸開線 正齒輪零件的 Featurescript 繪圖程式碼 : 此外, 使用者也可以開啟 正齒輪組立 連結後, 自行以滑鼠右鍵選擇主動旋轉的齒輪軸, 並按下 Animate, 就可以進行齒輪組的傳動模擬.","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/wang-ji-3d-zheng-chi-lun-chuan-dong-mo-ni.html"},{"title":"網際 2D 正齒輪傳動囓合繪圖","text":"Brython 與 Cango Javascript 繪圖程式庫 的結合, 可以讓參與協同的成員直接在網際環境中, 利用 Python3 語法進行產品開發流程中的設計運算與繪圖. 以下為 17 齒, 29 齒與 15 齒輪組的囓合繪圖: window.onload=function(){ brython(1); } # 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容 from browser import document as doc # 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換 from browser import window # 針對 Javascript 既有的物件, 則必須透過 JSConstructor 轉換 from javascript import JSConstructor import math # 主要用來取得畫布大小 canvas = doc[\"gear1\"] # 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx #ctx = canvas.getContext(\"2d\") # 針對類別的轉換, 將 Cango.js 中的 Cango 物件轉為 Python cango 物件 cango = JSConstructor(window.Cango) # 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換 shapedefs = window.shapeDefs # 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形 # in CangoAnimation.js #interpolate1 = window.interpolate # Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件 cobj = JSConstructor(window.Cobj) creategeartooth = JSConstructor(window.createGearTooth) # 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id=\"plotarea\" 的 canvas 上 cgo = cango(\"gear1\") ###################################### # 畫正齒輪輪廓 ##################################### def spur(cx, cy, m, n, pa, theta): # n 為齒數 #n = 17 # pa 為壓力角 #pa = 25 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth #m = 0.8*canvas.width/n # pr 為節圓半徑 pr = n*m/2 # gear Pitch radius # generate gear data = creategeartooth(m, n, pa) # Brython 程式中的 print 會將資料印在 Browser 的 console 區 #print(data) gearTooth = cobj(data, \"SHAPE\", { \"fillColor\":\"#ddd0dd\", \"border\": True, \"strokeColor\": \"#606060\" }) #gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh, 請注意 rotate 角度為 degree # theta 為角度 gearTooth.rotate(theta) # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中 gear = gearTooth.dup() # gear 為單一齒的輪廓資料 #cgo.render(gearTooth) # 利用單齒輪廓旋轉, 產生整個正齒輪外形 for i in range(1, n): # 將 gearTooth 中的資料複製到 newTooth newTooth = gearTooth.dup() # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear newTooth.rotate(360*i/n) # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號 gear.appendPath(newTooth, True) # trim move command = True # 建立軸孔 # add axle hole, hr 為 hole radius hr = 0.6*pr # diameter of gear shaft shaft = cobj(shapedefs.circle(hr), \"PATH\") shaft.revWinding() gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path gear.translate(cx, cy) # render 繪出靜態正齒輪輪廓 cgo.render(gear) # 接著繪製齒輪的基準線 deg = math.pi/180 Line = cobj(['M', cx, cy, 'L', cx+pr*math.cos(theta*deg), cy+pr*math.sin(theta*deg)], \"PATH\", { 'strokeColor':'blue', 'lineWidth': 1}) cgo.render(Line) # 3個齒輪的齒數 n1 = 17 n2 = 29 n3 = 15 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth # 利用 80% 的畫布寬度進行繪圖 # 計算模數的對應尺寸 m = canvas.width*0.8/(n1+n2+n3) # 根據齒數與模組計算各齒輪的節圓半徑 pr1 = n1*m/2 pr2 = n2*m/2 pr3 = n3*m/2 # 畫布左右兩側都保留畫布寬度的 10% # 依此計算對應的最左邊齒輪的軸心座標 cx = canvas.width*0.1+pr1 cy = canvas.height/2 # pa 為壓力角 pa = 25 # 畫最左邊齒輪, 定位線旋轉角為 0, 軸心座標 (cx, cy) spur(cx, cy, m, n1, pa, 0) # 第2個齒輪將原始的定位線逆時鐘轉 180 度後, 與第1個齒輪正好齒頂與齒頂對齊 # 只要第2個齒輪再逆時鐘或順時鐘轉動半齒的角度, 即可完成囓合 # 每一個齒分別包括從齒根到齒頂的範圍, 涵蓋角度為 360/n, 因此所謂的半齒角度為 180/n spur(cx+pr1+pr2, cy, m, n2, pa, 180-180/n2) # 第2齒與第3齒的囓合, 首先假定第2齒的定位線在 theta 角為 0 的原始位置 # 如此, 第3齒只要逆時鐘旋轉 180 度後, 再逆時鐘或順時鐘轉動半齒的角度, 即可與第2齒囓合 # 但是第2齒為了與第一齒囓合時, 已經從原始定位線轉了 180-180/n2 度 # 而當第2齒從與第3齒囓合的定位線, 逆時鐘旋轉 180-180/n2 角度後, 原先囓合的第3齒必須要再配合旋轉 (180-180/n2 )*n2/n3 spur(cx+pr1+pr2+pr2+pr3, cy, m, n3, pa, 180-180/n3+(180-180/n2)*n2/n3) Brython 正齒輪傳動囓合繪圖程式碼: <script type=\"text/javascript\" src=\"https://brython.info/src/brython_dist.js\"></script> <script type=\"text/javascript\" src=\"https://2015fallhw.github.io/cptocadp/static/Cango-8v03.js\"></script> <script type=\"text/javascript\" src=\"https://2015fallhw.github.io/cptocadp/static/Cango2D-7v01-min.js\"></script> <script type=\"text/javascript\" src=\"https://2015fallhw.github.io/cptocadp/static/gearUtils-05.js\"></script> <script> window.onload=function(){ brython(1); } </script> <canvas id='gear1' width='800' height='750'></canvas> <script type=\"text/python\"> # 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容 from browser import document as doc # 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換 from browser import window # 針對 Javascript 既有的物件, 則必須透過 JSConstructor 轉換 from javascript import JSConstructor import math # 主要用來取得畫布大小 canvas = doc[\"gear1\"] # 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx #ctx = canvas.getContext(\"2d\") # 針對類別的轉換, 將 Cango.js 中的 Cango 物件轉為 Python cango 物件 cango = JSConstructor(window.Cango) # 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換 shapedefs = window.shapeDefs # 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形 # in CangoAnimation.js #interpolate1 = window.interpolate # Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件 cobj = JSConstructor(window.Cobj) creategeartooth = JSConstructor(window.createGearTooth) # 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id=\"plotarea\" 的 canvas 上 cgo = cango(\"gear1\") ###################################### # 畫正齒輪輪廓 ##################################### def spur(cx, cy, m, n, pa, theta): # n 為齒數 #n = 17 # pa 為壓力角 #pa = 25 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth #m = 0.8*canvas.width/n # pr 為節圓半徑 pr = n*m/2 # gear Pitch radius # generate gear data = creategeartooth(m, n, pa) # Brython 程式中的 print 會將資料印在 Browser 的 console 區 #print(data) gearTooth = cobj(data, \"SHAPE\", { \"fillColor\":\"#ddd0dd\", \"border\": True, \"strokeColor\": \"#606060\" }) #gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh, 請注意 rotate 角度為 degree # theta 為角度 gearTooth.rotate(theta) # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中 gear = gearTooth.dup() # gear 為單一齒的輪廓資料 #cgo.render(gearTooth) # 利用單齒輪廓旋轉, 產生整個正齒輪外形 for i in range(1, n): # 將 gearTooth 中的資料複製到 newTooth newTooth = gearTooth.dup() # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear newTooth.rotate(360*i/n) # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號 gear.appendPath(newTooth, True) # trim move command = True # 建立軸孔 # add axle hole, hr 為 hole radius hr = 0.6*pr # diameter of gear shaft shaft = cobj(shapedefs.circle(hr), \"PATH\") shaft.revWinding() gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path gear.translate(cx, cy) # render 繪出靜態正齒輪輪廓 cgo.render(gear) # 接著繪製齒輪的基準線 deg = math.pi/180 Line = cobj(['M', cx, cy, 'L', cx+pr*math.cos(theta*deg), cy+pr*math.sin(theta*deg)], \"PATH\", { 'strokeColor':'blue', 'lineWidth': 1}) cgo.render(Line) # 3個齒輪的齒數 n1 = 17 n2 = 29 n3 = 15 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth # 利用 80% 的畫布寬度進行繪圖 # 計算模數的對應尺寸 m = canvas.width*0.8/(n1+n2+n3) # 根據齒數與模組計算各齒輪的節圓半徑 pr1 = n1*m/2 pr2 = n2*m/2 pr3 = n3*m/2 # 畫布左右兩側都保留畫布寬度的 10% # 依此計算對應的最左邊齒輪的軸心座標 cx = canvas.width*0.1+pr1 cy = canvas.height/2 # pa 為壓力角 pa = 25 # 畫最左邊齒輪, 定位線旋轉角為 0, 軸心座標 (cx, cy) spur(cx, cy, m, n1, pa, 0) # 第2個齒輪將原始的定位線逆時鐘轉 180 度後, 與第1個齒輪正好齒頂與齒頂對齊 # 只要第2個齒輪再逆時鐘或順時鐘轉動半齒的角度, 即可完成囓合 # 每一個齒分別包括從齒根到齒頂的範圍, 涵蓋角度為 360/n, 因此所謂的半齒角度為 180/n spur(cx+pr1+pr2, cy, m, n2, pa, 180-180/n2) # 第2齒與第3齒的囓合, 首先假定第2齒的定位線在 theta 角為 0 的原始位置 # 如此, 第3齒只要逆時鐘旋轉 180 度後, 再逆時鐘或順時鐘轉動半齒的角度, 即可與第2齒囓合 # 但是第2齒為了與第一齒囓合時, 已經從原始定位線轉了 180-180/n2 度 # 而當第2齒從與第3齒囓合的定位線, 逆時鐘旋轉 180-180/n2 角度後, 原先囓合的第3齒必須要再配合旋轉 (180-180/n2 )*n2/n3 spur(cx+pr1+pr2+pr2+pr3, cy, m, n3, pa, 180-180/n3+(180-180/n2)*n2/n3) </script> 接下來學員將被要求以協同方式, 將繪圖模組放入 Flask 網際程式 中, 根據下列參考資料, 完成 CDW11 期末專案 , 其中, 由 學員靜態網誌 呈現各協同人員的各週任務執行結果外, 也希望從 http://cdw11-ag100.rhcloud.com/ 雲端網站中呈現各組專案成果(例如: a 班第1組的協同產品設計內容將位於 http://cdw11-ag100.rhcloud.com/ag1 連結, 各組依此類推): Onshape Sprocket 零件繪製導引: https://www.onshape.com/cad-blog/tech-tip-lets-build-a-sprocket 2D 鏈條傳動繪圖: http://chiamingyen.github.io/kmolab/blog/zi-xing-che-chuan-dong-2d-lian-tiao-hui-tu-er.html Chain Guide: http://cad-lab.github.io/cadlab_data/files/Complete_guide_to_chain.pdf Sprocket Engineering Data: http://cad-lab.github.io/cadlab_data/files/sprocket-engineering-data.pdf Sprocket Design: http://cad-lab.github.io/cadlab_data/files/design_draw_sprocket.pdf Roller Chain Catalogue: http://cad-lab.github.io/cadlab_data/files/Renold_Roller_Chain_catalogue.pdf Sprocket Guide: http://cad-lab.github.io/cadlab_data/files/sprocket_maintenance-guide.pdf Gear Introduction: http://cad-lab.github.io/cadlab_data/files/Introduction-to-Gears.pdf Gear Theory: Gear Manual: http://cad-lab.github.io/cadlab_data/files/gear_theory.pdf Gear Manual: http://cad-lab.github.io/cadlab_data/files/gear_manual.pdf Gearbox: http://cad-lab.github.io/cadlab_data/files/Gearboxes.pdf Gearbox Design: http://cad-lab.github.io/cadlab_data/files/design_basic_gear_boxes.pdf","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/wang-ji-2d-zheng-chi-lun-chuan-dong-nie-he-hui-tu.html"},{"title":"自行車傳動 2D 鏈條繪圖 (二)","text":"免費不是重點, 自由與永續才是! 設計結果不是重點, 能否協同與持續改進才是! -- 協同產品設計實習課程 本課程因為使用 Jupyter, 而不必使用 Mathematica 或 Matlab. 本課程因為使用 Ubuntu, 而不必使用 Windows 10. 本課程因為使用 Leo Editor, Python3 與 Flask, 而不必使用 Visual Studio 或 C#. 本課程因為使用 Onshape, 而不必使用 Solidworks 或其他單機 MCAD 套件. 本課程因為使用 Github, Openshift 與 Bitbucket, 因此各參與協同者除了有本地端版本, 而且有協同的雲端版本. 更重要的是, 本課程所採用的所有工具, 不僅自由, 而且免費. 利用 Jupyter 與 Sympy 計算與鏈條傳動對應的兩個節圓, 所產生的 8 個相切點座標, 假設兩個圓均位於 X 軸上, 且右側圓之圓心位於原點, 左側小齒盤 18 齒, 而右側大齒盤 30 齒, 以下符號式運算將產生符合約束條件的兩條外切線與兩條內切線所對應的 8 個切點座標與左側圓之圓心座標: from sympy import * import math # center of left circle x1 = Symbol('x1') y1 = Symbol('y1') # center of right circle x2 = Symbol('x2') y2 = Symbol('y2') # left tangent points x3 = Symbol('x3') y3 = Symbol('y3') # right tangent points x4 = Symbol('x4') y4 = Symbol('y4') chainlength = 20 leftdegree = 20 rightdegree = 12 leftr = chainlength/2/math.sin(leftdegree*math.pi/180/2) rightr = chainlength/2/math.sin(rightdegree*math.pi/180/2) #print(leftr,\"\\n\",rightr) # tangent line is 10 sets of chain len34 = 10*chainlength # (x3-x4)**2+(y3-y4)**2-len34**2 表示 (x3, y3) 與 (x4, y4)距離 len34 # (x1-x3)**2+(y1-y3)**2-(leftr)**2 表示 (x1, y1) 與 (x3, y3) 距離為左圓半徑 # (x2-x4)**2+(y2-y4)**2-(rightr)**2 表示 (x2, y2) 與 (x4, y4) 距離為右圓半徑 # (x1-x4)**2+(y1-y4)**2-len34**2-(leftr)**2 表示左圓心與兩個相切點所圍成直角三角形邊長關係 # (x2-x3)**2+(y2-y3)**2-len34**2-(rightr)**2 表示右圓心與兩個相切點所圍成直角三角形邊長關係 answer = solve([(x3-x4)**2+(y3-y4)**2-len34**2, \\ (x1-x3)**2+(y1-y3)**2-(leftr)**2, \\ (x2-x4)**2+(y2-y4)**2-(rightr)**2, \\ (x1-x4)**2+(y1-y4)**2-len34**2-(leftr)**2, \\ (x2-x3)**2+(y2-y3)**2-len34**2-(rightr)**2, y1, x2, y2], \\ [x1, y1, x2, y2, x3, y3, x4, y4]) for i in range(len(answer)): try: g.es(answer[i]) except: print(answer[i]) 上述符號式運算流程得到的結果: (-251.966715968566, 0.0, 0.0, 0.0, -216.939755087825, -45.7105650721111, -58.1886285898711, 75.9367934509185) (-251.966715968566, 0.0, 0.0, 0.0, -216.939755087825, 45.7105650721111, -58.1886285898711, -75.9367934509185) (-203.592946177111, 0.0, 0.0, 0.0, -214.364148466539, -56.5714145924675, -17.8936874260919, -93.9794075692901) (-203.592946177111, 0.0, 0.0, 0.0, -214.364148466539, 56.5714145924675, -17.8936874260919, 93.9794075692901) (203.592946177111, 0.0, 0.0, 0.0, 214.364148466539, -56.5714145924675, 17.8936874260919, -93.9794075692901) (203.592946177111, 0.0, 0.0, 0.0, 214.364148466539, 56.5714145924675, 17.8936874260919, 93.9794075692901) (251.966715968566, 0.0, 0.0, 0.0, 216.939755087825, -45.7105650721111, 58.1886285898711, 75.9367934509185) (251.966715968566, 0.0, 0.0, 0.0, 216.939755087825, 45.7105650721111, 58.1886285898711, -75.9367934509185) 其中, 可以得到兩條外切線 (external tangents) 對應的關鍵座標點: 左圓圓心: (-203.592946177111, 0.0) 左側上切點座標: (-214.3641, 56.5714) 右側上切點座標: (-17.8936, 93.9794) 左側下切點座標: (-214.3641, -56.5714) 右側下切點座標: (-17.8936, -93.9794) 以及與左側上方切點相連的節圓周上鏈條與水平線對應角度為 20.78 度, 上切線與水平線對應角度為 10.78 度, 而右側節圓周上與切點相連的鏈條, 與水平線的角度則為 4.78 度. 同時, 以下利用 Solvespace 以綠色線條, 標示出符合兩圓相切線的所謂內切線 (internal tangents), 與對應左側圓心位置, 而此等內切線可應用在皮帶傳動的設計配置. 根據上述的切點座標與相關角度條件, 就可以利用 自行車傳動 2D 鏈條繪圖 中的鏈條繪圖元件進行下列繪圖: window.onload=function(){ brython(1); } from javascript import JSConstructor from browser import alert from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea\") cgo.setWorldCoords(-250, -250, 500, 500) # 畫軸線 cgo.drawAxes(0, 240, 0, 240, { \"strokeColor\":\"#aaaaaa\", \"fillColor\": \"#aaaaaa\", \"xTickInterval\": 20, \"xLabelInterval\": 20, \"yTickInterval\": 20, \"yLabelInterval\": 20}) deg = math.pi/180 # 將繪製鏈條輪廓的內容寫成 class 物件 class chain(): # 輪廓的外型設為 class variable chamber = \"M -6.8397, -1.4894 A 7, 7, 0, 1, 0, 6.8397, -1.4894 A 40, 40, 0, 0, 1, 6.8397, -18.511 A 7, 7, 0, 1, 0, -6.8397, -18.511 A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" #chamber = \"M 0, 0 L 0, -20 z\" cgoChamber = window.svgToCgoSVG(chamber) def __init__(self, fillcolor=\"green\", border=True, strokecolor= \"tan\", linewidth=2, scale=1): self.fillcolor = fillcolor self.border = border self.strokecolor = strokecolor self.linewidth = linewidth self.scale = scale # 利用鏈條起點與終點定義繪圖 def basic(self, x1, y1, x2, y2): self.x1 = x1 self.y1 = y1 self.x2 = x2 self.y2 = y2 # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": self.fillcolor, \"border\": self.border, \"strokeColor\": self.strokecolor, \"lineWidth\": self.linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4*self.scale), \"PATH\") cmbr.appendPath(hole) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(math.atan2(y2-y1, x2-x1)/deg+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, self.scale, 0) # 利用鏈條起點與旋轉角度定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic_rot(self, x1, y1, rot, v=False): # 若 v 為 True 則為虛擬 chain, 不 render self.x1 = x1 self.y1 = y1 self.rot = rot self.v = v # 注意, cgoChamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": self.fillcolor, \"border\": self.border, \"strokeColor\": self.strokecolor, \"lineWidth\": self.linewidth }) # hole0 為原點位置 hole = cobj(shapedefs.circle(4*self.scale), \"PATH\") cmbr.appendPath(hole) # 根據旋轉角度, 計算 x2 與 y2 x2 = x1 + 20*math.cos(rot*deg)*self.scale y2 = y1 + 20*math.sin(rot*deg)*self.scale # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(rot+90) # 放大 scale 倍 if v == False: cgo.render(basic1, x1, y1, self.scale, 0) return x2, y2 mychain = chain() x1, y1 = mychain.basic_rot(-133.06,49.48, 20.78) x2, y2=mychain.basic_rot(x1, y1,0.7800000000000011, True) x3, y3=mychain.basic_rot(x2, y2,-19.22, True) x4, y4=mychain.basic_rot(x3, y3,-39.22, True) x5, y5=mychain.basic_rot(x4, y4,-59.22, True) x6, y6=mychain.basic_rot(x5, y5,-79.22, True) x7, y7=mychain.basic_rot(x6, y6,-99.22, True) x8, y8=mychain.basic_rot(x7, y7,-119.22, True) x9, y9=mychain.basic_rot(x8, y8,-139.22, True) x10, y10=mychain.basic_rot(x9, y9,-159.22, True) x11, y11=mychain.basic_rot(x10, y10,-179.22, True) x12, y12=mychain.basic_rot(x11, y11,-199.22) x13, y13=mychain.basic_rot(x12, y12,-219.22) x14, y14=mychain.basic_rot(x13, y13,-239.22) x15, y15=mychain.basic_rot(x14, y14,-259.22) x16, y16=mychain.basic_rot(x15, y15,-279.22) x17, y17=mychain.basic_rot(x16, y16,-299.22) x18, y18=mychain.basic_rot(x17, y17,-319.22) #mychain = chain() p1, k1 = mychain.basic_rot(82.11,93.98, 4.78) p2, k2=mychain.basic_rot(p1, k1,-7.219999999999999) p3, k3=mychain.basic_rot(p2, k2,-19.22) p4, k4=mychain.basic_rot(p3, k3,-31.22) p5, k5=mychain.basic_rot(p4, k4,-43.22) p6, k6=mychain.basic_rot(p5, k5,-55.22) p7, k7=mychain.basic_rot(p6, k6,-67.22) p8, k8=mychain.basic_rot(p7, k7,-79.22) p9, k9=mychain.basic_rot(p8, k8,-91.22) p10, k10=mychain.basic_rot(p9, k9,-103.22) p11, k11=mychain.basic_rot(p10, k10,-115.22) p12, k12=mychain.basic_rot(p11, k11,-127.22) p13, k13=mychain.basic_rot(p12, k12,-139.22) p14, k14=mychain.basic_rot(p13, k13,-151.22) p15, k15=mychain.basic_rot(p14, k14,-163.22) p16, k16=mychain.basic_rot(p15, k15,-175.22) p17, k17=mychain.basic_rot(p16, k16,-187.22) p18, k18=mychain.basic_rot(p17, k17,-199.22, True) p19, k19=mychain.basic_rot(p18, k18,-211.22, True) p20, k20=mychain.basic_rot(p19, k19,-223.22, True) p21, k21=mychain.basic_rot(p20, k20,-235.22, True) p22, k22=mychain.basic_rot(p21, k21,-247.22, True) p23, k23=mychain.basic_rot(p22, k22,-259.22, True) p24, k24=mychain.basic_rot(p23, k23,-271.22, True) p25, k25=mychain.basic_rot(p24, k24,-283.22, True) p26, k26=mychain.basic_rot(p25, k25,-295.22, True) p27, k27=mychain.basic_rot(p26, k26,-307.22, True) p28, k28=mychain.basic_rot(p27, k27,-319.22, True) p29, k29=mychain.basic_rot(p28, k28,-331.22, True) p30, k30=mychain.basic_rot(p29, k29,-343.22, True) m1, n1 = mychain.basic_rot(x1, y1, 10.78) m2, n2=mychain.basic_rot(m1, n1, 10.78) m3, n3=mychain.basic_rot(m2, n2, 10.78) m4, n4=mychain.basic_rot(m3, n3, 10.78) m5, n5=mychain.basic_rot(m4, n4, 10.78) m6, n6=mychain.basic_rot(m5, n5, 10.78) m7, n7=mychain.basic_rot(m6, n6, 10.78) m8, n8=mychain.basic_rot(m7, n7, 10.78) m9, n9=mychain.basic_rot(m8, n8, 10.78) m10, n10=mychain.basic_rot(m9, n9, 10.78) r1, s1 = mychain.basic_rot(x11, y11, -10.78) r2, s2=mychain.basic_rot(r1, s1, -10.78) r3, s3=mychain.basic_rot(r2, s2, -10.78) r4, s4=mychain.basic_rot(r3, s3, -10.78) r5, s5=mychain.basic_rot(r4, s4, -10.78) r6, s6=mychain.basic_rot(r5, s5, -10.78) r7, s7=mychain.basic_rot(r6, s6, -10.78) r8, s8=mychain.basic_rot(r7, s7, -10.78) r9, s9=mychain.basic_rot(r8, s8, -10.78) r10, s10=mychain.basic_rot(r9, s9, -10.78) 上述 2D 鏈條傳動的 Brython 繪圖程式碼: window.onload=function(){ brython(1); } from javascript import JSConstructor from browser import alert from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea\") cgo.setWorldCoords(-250, -250, 500, 500) # 畫軸線 cgo.drawAxes(0, 240, 0, 240, { \"strokeColor\":\"#aaaaaa\", \"fillColor\": \"#aaaaaa\", \"xTickInterval\": 20, \"xLabelInterval\": 20, \"yTickInterval\": 20, \"yLabelInterval\": 20}) deg = math.pi/180 # 將繪製鏈條輪廓的內容寫成 class 物件 class chain(): # 輪廓的外型設為 class variable chamber = \"M -6.8397, -1.4894 A 7, 7, 0, 1, 0, 6.8397, -1.4894 A 40, 40, 0, 0, 1, 6.8397, -18.511 A 7, 7, 0, 1, 0, -6.8397, -18.511 A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" #chamber = \"M 0, 0 L 0, -20 z\" cgoChamber = window.svgToCgoSVG(chamber) def __init__(self, fillcolor=\"green\", border=True, strokecolor= \"tan\", linewidth=2, scale=1): self.fillcolor = fillcolor self.border = border self.strokecolor = strokecolor self.linewidth = linewidth self.scale = scale # 利用鏈條起點與終點定義繪圖 def basic(self, x1, y1, x2, y2): self.x1 = x1 self.y1 = y1 self.x2 = x2 self.y2 = y2 # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": self.fillcolor, \"border\": self.border, \"strokeColor\": self.strokecolor, \"lineWidth\": self.linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4*self.scale), \"PATH\") cmbr.appendPath(hole) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(math.atan2(y2-y1, x2-x1)/deg+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, self.scale, 0) # 利用鏈條起點與旋轉角度定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic_rot(self, x1, y1, rot, v=False): # 若 v 為 True 則為虛擬 chain, 不 render self.x1 = x1 self.y1 = y1 self.rot = rot self.v = v # 注意, cgoChamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": self.fillcolor, \"border\": self.border, \"strokeColor\": self.strokecolor, \"lineWidth\": self.linewidth }) # hole0 為原點位置 hole = cobj(shapedefs.circle(4*self.scale), \"PATH\") cmbr.appendPath(hole) # 根據旋轉角度, 計算 x2 與 y2 x2 = x1 + 20*math.cos(rot*deg)*self.scale y2 = y1 + 20*math.sin(rot*deg)*self.scale # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(rot+90) # 放大 scale 倍 if v == False: cgo.render(basic1, x1, y1, self.scale, 0) return x2, y2 mychain = chain() x1, y1 = mychain.basic_rot(-133.06,49.48, 20.78) x2, y2=mychain.basic_rot(x1, y1,0.7800000000000011, True) x3, y3=mychain.basic_rot(x2, y2,-19.22, True) x4, y4=mychain.basic_rot(x3, y3,-39.22, True) x5, y5=mychain.basic_rot(x4, y4,-59.22, True) x6, y6=mychain.basic_rot(x5, y5,-79.22, True) x7, y7=mychain.basic_rot(x6, y6,-99.22, True) x8, y8=mychain.basic_rot(x7, y7,-119.22, True) x9, y9=mychain.basic_rot(x8, y8,-139.22, True) x10, y10=mychain.basic_rot(x9, y9,-159.22, True) x11, y11=mychain.basic_rot(x10, y10,-179.22, True) x12, y12=mychain.basic_rot(x11, y11,-199.22) x13, y13=mychain.basic_rot(x12, y12,-219.22) x14, y14=mychain.basic_rot(x13, y13,-239.22) x15, y15=mychain.basic_rot(x14, y14,-259.22) x16, y16=mychain.basic_rot(x15, y15,-279.22) x17, y17=mychain.basic_rot(x16, y16,-299.22) x18, y18=mychain.basic_rot(x17, y17,-319.22) #mychain = chain() p1, k1 = mychain.basic_rot(82.11,93.98, 4.78) p2, k2=mychain.basic_rot(p1, k1,-7.219999999999999) p3, k3=mychain.basic_rot(p2, k2,-19.22) p4, k4=mychain.basic_rot(p3, k3,-31.22) p5, k5=mychain.basic_rot(p4, k4,-43.22) p6, k6=mychain.basic_rot(p5, k5,-55.22) p7, k7=mychain.basic_rot(p6, k6,-67.22) p8, k8=mychain.basic_rot(p7, k7,-79.22) p9, k9=mychain.basic_rot(p8, k8,-91.22) p10, k10=mychain.basic_rot(p9, k9,-103.22) p11, k11=mychain.basic_rot(p10, k10,-115.22) p12, k12=mychain.basic_rot(p11, k11,-127.22) p13, k13=mychain.basic_rot(p12, k12,-139.22) p14, k14=mychain.basic_rot(p13, k13,-151.22) p15, k15=mychain.basic_rot(p14, k14,-163.22) p16, k16=mychain.basic_rot(p15, k15,-175.22) p17, k17=mychain.basic_rot(p16, k16,-187.22) p18, k18=mychain.basic_rot(p17, k17,-199.22, True) p19, k19=mychain.basic_rot(p18, k18,-211.22, True) p20, k20=mychain.basic_rot(p19, k19,-223.22, True) p21, k21=mychain.basic_rot(p20, k20,-235.22, True) p22, k22=mychain.basic_rot(p21, k21,-247.22, True) p23, k23=mychain.basic_rot(p22, k22,-259.22, True) p24, k24=mychain.basic_rot(p23, k23,-271.22, True) p25, k25=mychain.basic_rot(p24, k24,-283.22, True) p26, k26=mychain.basic_rot(p25, k25,-295.22, True) p27, k27=mychain.basic_rot(p26, k26,-307.22, True) p28, k28=mychain.basic_rot(p27, k27,-319.22, True) p29, k29=mychain.basic_rot(p28, k28,-331.22, True) p30, k30=mychain.basic_rot(p29, k29,-343.22, True) m1, n1 = mychain.basic_rot(x1, y1, 10.78) m2, n2=mychain.basic_rot(m1, n1, 10.78) m3, n3=mychain.basic_rot(m2, n2, 10.78) m4, n4=mychain.basic_rot(m3, n3, 10.78) m5, n5=mychain.basic_rot(m4, n4, 10.78) m6, n6=mychain.basic_rot(m5, n5, 10.78) m7, n7=mychain.basic_rot(m6, n6, 10.78) m8, n8=mychain.basic_rot(m7, n7, 10.78) m9, n9=mychain.basic_rot(m8, n8, 10.78) m10, n10=mychain.basic_rot(m9, n9, 10.78) r1, s1 = mychain.basic_rot(x11, y11, -10.78) r2, s2=mychain.basic_rot(r1, s1, -10.78) r3, s3=mychain.basic_rot(r2, s2, -10.78) r4, s4=mychain.basic_rot(r3, s3, -10.78) r5, s5=mychain.basic_rot(r4, s4, -10.78) r6, s6=mychain.basic_rot(r5, s5, -10.78) r7, s7=mychain.basic_rot(r6, s6, -10.78) r8, s8=mychain.basic_rot(r7, s7, -10.78) r9, s9=mychain.basic_rot(r8, s8, -10.78) r10, s10=mychain.basic_rot(r9, s9, -10.78) 從上述 2D 傳動鏈條的繪圖中, 可以發現, 由於整個設計配置以上方兩個切點的直線距離 200 mm 為準進行繪圖後, 下方的切點位置並無法精確與實際齒盤鏈條定位, 表示在上述鏈條傳動組立下, 精確繞行圓周的長度並無法得到整數的鏈條單元數, 在實務上通常會多加上一個鏈條單元. 而從下方的 2D 繪圖中可以發現, 依照上方取 10 個單元的鏈條長度, 比幾何運算的節圓鏈條線段長度長, 因此在實際鏈條組立時, 可以直接讓下方鏈條下垂的方式進行鏈條單元組立. 此外, 上面所列出的 Brython 鏈條傳動繪圖, 是由下方的 flask 程式片斷, 採 Blueprint 的程式架構所建立, 當使用者透過 Python3 與 flask 網際框架, 將協同程式配置在 Github 與 OpenShift 平台上時, 將可以透過更高階的網際協同程式架構, 執行各種產品開發專案. 各學員參考下列 2D 鏈條傳動繪圖設計後, 可以自行練習 18 齒與 36 齒的傳動繪圖, 並配合後續的齒輪減速機與自行車設計, 完成各組的電動與人力兩用自行車期末專案. from flask import Blueprint, request ag100 = Blueprint('ag100', __name__, url_prefix='/ag100', template_folder='templates') head_str = ''' <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>網際 2D 繪圖</title> <!-- IE 9: display inline SVG --> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"> <script type=\"text/javascript\" src=\"https://cptocadp-2015fallhw.rhcloud.com/static/brython_dist.js\"></script> <script type=\"text/javascript\" src=\"https://cptocadp-2015fallhw.rhcloud.com/static/Cango-8v03.js\"></script> <script type=\"text/javascript\" src=\"https://cptocadp-2015fallhw.rhcloud.com/static/Cango2D-6v13.js\"></script> <script type=\"text/javascript\" src=\"https://cptocadp-2015fallhw.rhcloud.com/static/CangoAxes-1v33.js\"></script> </head> <body> <script> window.onload=function(){ brython(1); } </script> <canvas id=\"plotarea\" width=\"800\" height=\"800\"></canvas> ''' tail_str = ''' </script> </body> </html> ''' chain_str = ''' <script type=\"text/python\"> from javascript import JSConstructor from browser import alert from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea\") cgo.setWorldCoords(-250, -250, 500, 500) # 畫軸線 cgo.drawAxes(0, 240, 0, 240, { \"strokeColor\":\"#aaaaaa\", \"fillColor\": \"#aaaaaa\", \"xTickInterval\": 20, \"xLabelInterval\": 20, \"yTickInterval\": 20, \"yLabelInterval\": 20}) deg = math.pi/180 # 將繪製鏈條輪廓的內容寫成 class 物件 class chain(): # 輪廓的外型設為 class variable chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" #chamber = \"M 0, 0 L 0, -20 z\" cgoChamber = window.svgToCgoSVG(chamber) def __init__(self, fillcolor=\"green\", border=True, strokecolor= \"tan\", linewidth=2, scale=1): self.fillcolor = fillcolor self.border = border self.strokecolor = strokecolor self.linewidth = linewidth self.scale = scale # 利用鏈條起點與終點定義繪圖 def basic(self, x1, y1, x2, y2): self.x1 = x1 self.y1 = y1 self.x2 = x2 self.y2 = y2 # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": self.fillcolor, \"border\": self.border, \"strokeColor\": self.strokecolor, \"lineWidth\": self.linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4*self.scale), \"PATH\") cmbr.appendPath(hole) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(math.atan2(y2-y1, x2-x1)/deg+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, self.scale, 0) # 利用鏈條起點與旋轉角度定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic_rot(self, x1, y1, rot, v=False): # 若 v 為 True 則為虛擬 chain, 不 render self.x1 = x1 self.y1 = y1 self.rot = rot self.v = v # 注意, cgoChamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": self.fillcolor, \"border\": self.border, \"strokeColor\": self.strokecolor, \"lineWidth\": self.linewidth }) # hole0 為原點位置 hole = cobj(shapedefs.circle(4*self.scale), \"PATH\") cmbr.appendPath(hole) # 根據旋轉角度, 計算 x2 與 y2 x2 = x1 + 20*math.cos(rot*deg)*self.scale y2 = y1 + 20*math.sin(rot*deg)*self.scale # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(rot+90) # 放大 scale 倍 if v == False: cgo.render(basic1, x1, y1, self.scale, 0) return x2, y2 ''' # 傳繪 A 函式內容 def a(x, y, scale=1, color=\"green\"): outstring = ''' # 利用 chain class 建立案例, 對應到 mychain 變數 mychain = chain(scale='''+str(scale)+''', fillcolor=\"'''+str(color)+'''\") # 畫 A # 左邊兩個垂直單元 x1, y1 = mychain.basic_rot('''+str(x)+\",\"+str(y)+''', 90) x2, y2 = mychain.basic_rot(x1, y1, 90) # 左斜邊兩個單元 x3, y3 = mychain.basic_rot(x2, y2, 80) x4, y4 = mychain.basic_rot(x3, y3, 71) # 最上方水平單元 x5, y5 = mychain.basic_rot(x4, y4, 0) # 右斜邊兩個單元 x6, y6 = mychain.basic_rot(x5, y5, -71) x7, y7 = mychain.basic_rot(x6, y6, -80) # 右邊兩個垂直單元 x8, y8 = mychain.basic_rot(x7, y7, -90) x9, y9 = mychain.basic_rot(x8, y8, -90) # 中間兩個水平單元 x10, y10 = mychain.basic_rot(x8, y8, -180) mychain.basic(x10, y10, x1, y1) ''' return outstring # 傳繪 B 函式內容 def b(x, y): outstring = ''' # 利用 chain class 建立案例, 對應到 mychain 變數 mychain = chain() # 畫 B # 左邊四個垂直單元 # 每一個字元間隔為 65 pixels #x1, y1 = mychain.basic_rot(0+ 65, 0, 90) x1, y1 = mychain.basic_rot('''+str(x)+\",\"+str(y)+''', 90) x2, y2 = mychain.basic_rot(x1, y1, 90) x3, y3 = mychain.basic_rot(x2, y2, 90) x4, y4 = mychain.basic_rot(x3, y3, 90) # 上方一個水平單元 x5, y5 = mychain.basic_rot(x4, y4, 0) # 右斜 -30 度 x6, y6 = mychain.basic_rot(x5, y5, -30) # 右上垂直向下單元 x7, y7 = mychain.basic_rot(x6, y6, -90) # 右斜 240 度 x8, y8 = mychain.basic_rot(x7, y7, 210) # 中間水平 mychain.basic(x8, y8, x2, y2) # 右下斜 -30 度 x10, y10 = mychain.basic_rot(x8, y8, -30) # 右下垂直向下單元 x11, y11 = mychain.basic_rot(x10, y10, -90) # 右下斜 240 度 x12, y12 = mychain.basic_rot(x11, y11, 210) # 水平接回起點 mychain.basic(x12,y12, '''+str(x)+\",\"+str(y)+''') ''' return outstring # 傳繪 C 函式內容 def c(x, y): outstring = ''' # 利用 chain class 建立案例, 對應到 mychain 變數 mychain = chain() # 上半部 # 左邊中間垂直起點, 圓心位於線段中央, y 方向再向上平移兩個鏈條圓心距單位 #x1, y1 = mychain.basic_rot(0+65*2, -10+10+20*math.sin(80*deg)+20*math.sin(30*deg), 90) x1, y1 = mychain.basic_rot('''+str(x)+\",\"+str(y)+'''-10+10+20*math.sin(80*deg)+20*math.sin(30*deg), 90) # 上方轉 80 度 x2, y2 = mychain.basic_rot(x1, y1, 80) # 上方轉 30 度 x3, y3 = mychain.basic_rot(x2, y2, 30) # 上方水平 x4, y4 = mychain.basic_rot(x3, y3, 0) # 下半部, 從起點開始 -80 度 #x5, y5 = mychain.basic_rot(0+65*2, -10+10+20*math.sin(80*deg)+20*math.sin(30*deg), -80) x5, y5 = mychain.basic_rot('''+str(x)+\",\"+str(y)+'''-10+10+20*math.sin(80*deg)+20*math.sin(30*deg), -80) # 下斜 -30 度 x6, y6 = mychain.basic_rot(x5, y5, -30) # 下方水平單元 x7, y7 = mychain.basic_rot(x6, y6, -0) ''' return outstring # 傳繪 D 函式內容 def d(x, y): outstring = ''' # 利用 chain class 建立案例, 對應到 mychain 變數 mychain = chain() # 左邊四個垂直單元 #x1, y1 = mychain.basic_rot(0+65*3, 0, 90) x1, y1 = mychain.basic_rot('''+str(x)+\",\"+str(y)+''', 90) x2, y2 = mychain.basic_rot(x1, y1, 90) x3, y3 = mychain.basic_rot(x2, y2, 90) x4, y4 = mychain.basic_rot(x3, y3, 90) # 上方一個水平單元 x5, y5 = mychain.basic_rot(x4, y4, 0) # 右斜 -40 度 x6, y6 = mychain.basic_rot(x5, y5, -40) x7, y7 = mychain.basic_rot(x6, y6, -60) # 右中垂直向下單元 x8, y8 = mychain.basic_rot(x7, y7, -90) # -120 度 x9, y9 = mychain.basic_rot(x8, y8, -120) # -140 x10, y10 = mychain.basic_rot(x9, y9, -140) # 水平接回原點 #mychain.basic(x10, y10, 0+65*3, 0, color=\"red\") mychain.basic(x10, y10, '''+str(x)+\",\"+str(y)+''') ''' return outstring def circle(x, y): outstring = ''' mychain = chain() x1, y1 = mychain.basic_rot('''+str(x)+\",\"+str(y)+''', 50) ''' for i in range(2, 10): outstring += \"x\"+str(i)+\", y\"+str(i)+\"=mychain.basic_rot(x\"+str(i-1)+\", y\"+str(i-1)+\", 90-\"+str(i*40)+\") \\n\" return outstring def circle1(x, y, degree=10): # 20 為鏈條兩圓距 # chain 所圍之圓圈半徑為 20/2/math.asin(degree*math.pi/180/2) # degree = math.asin(20/2/radius)*180/math.pi #degree = 10 first_degree = 90 - degree repeat = 360 / degree outstring = ''' mychain = chain() x1, y1 = mychain.basic_rot('''+str(x)+\",\"+str(y)+\", \"+str(first_degree)+''') ''' for i in range(2, int(repeat)+1): outstring += \"x\"+str(i)+\", y\"+str(i)+\"=mychain.basic_rot(x\"+str(i-1)+\", y\"+str(i-1)+\", 90-\"+str(i*degree)+\") \\n\" return outstring def circle2(x, y, degree=10): # 20 為鏈條兩圓距 # chain 所圍之圓圈半徑為 20/2/math.asin(degree*math.pi/180/2) # degree = math.asin(20/2/radius)*180/math.pi #degree = 10 first_degree = 90 - degree repeat = 360 / degree outstring = ''' mychain = chain() x1, y1 = mychain.basic_rot('''+str(x)+\",\"+str(y)+\", \"+str(first_degree)+''') ''' for i in range(2, int(repeat)+1): outstring += \"x\"+str(i)+\", y\"+str(i)+\"=mychain.basic_rot(x\"+str(i-1)+\", y\"+str(i-1)+\", 90-\"+str(i*degree)+\") \\n\" return outstring def twocircle(x, y): # 20 為鏈條兩圓距 # chain 所圍之圓圈半徑為 20/2/math.asin(degree*math.pi/180/2) # degree = math.asin(20/2/radius)*180/math.pi x = 50 y = 0 degree = 12 # 78, 66, 54, 42, 30, 18, 6度 #必須有某些 chain 算座標但是不 render first_degree = 90 - degree repeat = 360 / degree # 第1節也是 virtual chain outstring = ''' mychain = chain() x1, y1 = mychain.basic_rot('''+str(x)+\",\"+str(y)+\", \"+str(first_degree)+''', True) #x1, y1 = mychain.basic_rot('''+str(x)+\",\"+str(y)+\", \"+str(first_degree)+''') ''' # 這裡要上下各多留一節虛擬 chain, 以便最後進行連接 (x7, y7) 與 (x22, y22) for i in range(2, int(repeat)+1): #if i < 7 or i > 23: if i <= 7 or i >= 23: # virautl chain outstring += \"x\"+str(i)+\", y\"+str(i)+\"=mychain.basic_rot(x\"+str(i-1)+\", y\"+str(i-1)+\", 90-\"+str(i*degree)+\", True) \\n\" #outstring += \"x\"+str(i)+\", y\"+str(i)+\"=mychain.basic_rot(x\"+str(i-1)+\", y\"+str(i-1)+\", 90-\"+str(i*degree)+\") \\n\" else: outstring += \"x\"+str(i)+\", y\"+str(i)+\"=mychain.basic_rot(x\"+str(i-1)+\", y\"+str(i-1)+\", 90-\"+str(i*degree)+\") \\n\" p = -150 k = 0 degree = 20 # 70, 50, 30, 10 # 從 i=5 開始, 就是 virautl chain first_degree = 90 - degree repeat = 360 / degree # 第1節不是 virtual chain outstring += ''' #mychain = chain() p1, k1 = mychain.basic_rot('''+str(p)+\",\"+str(k)+\", \"+str(first_degree)+''') ''' for i in range(2, int(repeat)+1): if i >= 5 and i <= 13: # virautl chain outstring += \"p\"+str(i)+\", k\"+str(i)+\"=mychain.basic_rot(p\"+str(i-1)+\", k\"+str(i-1)+\", 90-\"+str(i*degree)+\", True) \\n\" #outstring += \"p\"+str(i)+\", k\"+str(i)+\"=mychain.basic_rot(p\"+str(i-1)+\", k\"+str(i-1)+\", 90-\"+str(i*degree)+\") \\n\" else: outstring += \"p\"+str(i)+\", k\"+str(i)+\"=mychain.basic_rot(p\"+str(i-1)+\", k\"+str(i-1)+\", 90-\"+str(i*degree)+\") \\n\" # 上段連接直線 # 從 p5, k5 作為起點 first_degree = 10 repeat = 11 outstring += ''' m1, n1 = mychain.basic_rot(p4, k4, '''+str(first_degree)+''') ''' for i in range(2, int(repeat)+1): outstring += \"m\"+str(i)+\", n\"+str(i)+\"=mychain.basic_rot(m\"+str(i-1)+\", n\"+str(i-1)+\", \"+str(first_degree)+\")\\n\" # 下段連接直線 # 從 p12, k12 作為起點 first_degree = -10 repeat = 11 outstring += ''' r1, s1 = mychain.basic_rot(p13, k13, '''+str(first_degree)+''') ''' for i in range(2, int(repeat)+1): outstring += \"r\"+str(i)+\", s\"+str(i)+\"=mychain.basic_rot(r\"+str(i-1)+\", s\"+str(i-1)+\", \"+str(first_degree)+\")\\n\" # 上段右方接點為 x7, y7, 左側則為 m11, n11 outstring += \"mychain.basic(x7, y7, m11, n11)\\n\" # 下段右方接點為 x22, y22, 左側則為 r11, s11 outstring += \"mychain.basic(x22, y22, r11, s11)\\n\" return outstring def eighteenthirty(x, y): ''' 從圖解法與符號式解法得到的兩條外切線座標點 (-203.592946177111, 0.0), (0.0, 0.0), (-214.364148466539, 56.5714145924675), (-17.8936874260919, 93.9794075692901) (-203.592946177111, 0.0), (0.0, 0.0), (-214.364148466539, -56.5714145924675), (-17.8936874260919, -93.9794075692901) 左邊關鍵鍊條起點 (-233.06, 49.48), 角度 20.78, 圓心 (-203.593, 0.0) 右邊關鍵鍊條起點 (-17.89, 93.9), 角度 4.78, 圓心 (0, 0) ''' # 20 為鏈條兩圓距 # chain 所圍之圓圈半徑為 20/2/math.asin(degree*math.pi/180/2) # degree = math.asin(20/2/radius)*180/math.pi x = 50 y = 0 degree = 20 first_degree = 20.78 startx = -233.06+100 starty = 49.48 repeat = 360 / degree # 先畫出左邊第一關鍵節 outstring = ''' mychain = chain() x1, y1 = mychain.basic_rot('''+str(startx)+\",\"+str(starty)+\", \"+str(first_degree)+''') ''' # 接著繪製左邊的非虛擬鍊條 for i in range(2, int(repeat)+1): if i >=2 and i <=11: # virautl chain #outstring += \"x\"+str(i)+\", y\"+str(i)+\"=mychain.basic_rot(x\"+str(i-1)+\", y\"+str(i-1)+\",\"+str(first_degree+degree-i*degree)+\") \\n\" outstring += \"x\"+str(i)+\", y\"+str(i)+\"=mychain.basic_rot(x\"+str(i-1)+\", y\"+str(i-1)+\",\"+str(first_degree+degree-i*degree)+\", True) \\n\" else: outstring += \"x\"+str(i)+\", y\"+str(i)+\"=mychain.basic_rot(x\"+str(i-1)+\", y\"+str(i-1)+\",\"+str(first_degree+degree-i*degree)+\") \\n\" # 接著處理右邊的非虛擬鍊條 # 先畫出右邊第一關鍵節 p = -17.89+100 k = 93.98 degree = 12 first_degree = 4.78 repeat = 360 / degree # 第1節不是 virtual chain outstring += ''' #mychain = chain() p1, k1 = mychain.basic_rot('''+str(p)+\",\"+str(k)+\", \"+str(first_degree)+''') ''' for i in range(2, int(repeat)+1): if i >=18: # virautl chain outstring += \"p\"+str(i)+\", k\"+str(i)+\"=mychain.basic_rot(p\"+str(i-1)+\", k\"+str(i-1)+\",\"+str(first_degree+degree-i*degree)+\", True) \\n\" #outstring += \"p\"+str(i)+\", k\"+str(i)+\"=mychain.basic_rot(p\"+str(i-1)+\", k\"+str(i-1)+\",\"+str(first_degree+degree-i*degree)+\") \\n\" else: outstring += \"p\"+str(i)+\", k\"+str(i)+\"=mychain.basic_rot(p\"+str(i-1)+\", k\"+str(i-1)+\",\"+str(first_degree+degree-i*degree)+\") \\n\" # 上段連接直線 # 從 x1, y1 作為起點 first_degree = 10.78 repeat = 10 outstring += ''' m1, n1 = mychain.basic_rot(x1, y1, '''+str(first_degree)+''') ''' for i in range(2, int(repeat)+1): outstring += \"m\"+str(i)+\", n\"+str(i)+\"=mychain.basic_rot(m\"+str(i-1)+\", n\"+str(i-1)+\", \"+str(first_degree)+\")\\n\" # 下段連接直線 # 從 x11, y11 作為起點 first_degree = -10.78 repeat = 10 outstring += ''' r1, s1 = mychain.basic_rot(x11, y11, '''+str(first_degree)+''') ''' for i in range(2, int(repeat)+1): outstring += \"r\"+str(i)+\", s\"+str(i)+\"=mychain.basic_rot(r\"+str(i-1)+\", s\"+str(i-1)+\", \"+str(first_degree)+\")\\n\" return outstring @ag100.route('/a') def draw_a(): return head_str + chain_str + a(0, 0) + tail_str @ag100.route('/b') def draw_b(): # 每個橫向字元距離為 65 pixels, 上下字距則為 110 pixels return head_str + chain_str + b(0+65, 0) + tail_str @ag100.route('/c') def draw_c(): # 每個橫向字元距離為 65 pixels return head_str + chain_str + c(0+65*2, 0) + tail_str @ag100.route('/d') def draw_d(): return head_str + chain_str + d(0+65*3, 0) + tail_str @ag100.route('/ab') def draw_ab(): #return head_str + chain_str + a(0, 0) + b(0+65, 0) + tail_str return head_str + chain_str + a(0, 0) + b(0, 0-110) + tail_str @ag100.route('/ac') def draw_ac(): return head_str + chain_str + a(0, 0) + c(0+65, 0) + tail_str @ag100.route('/bc') def draw_bc(): return head_str + chain_str + b(0, 0) + c(0+65, 0) + tail_str @ag100.route('/abc') def draw_abc(): return head_str + chain_str + a(0, 0) + b(0+65, 0) + c(0+65*2, 0) + tail_str @ag100.route('/aaaa') def draw_aaaa(): outstring = head_str + chain_str scale = 2 for i in range(20): scale = scale*0.9 outstring += a(0+10*i, 0, scale=scale) return outstring + tail_str #return head_str + chain_str + a(0, 0, scale=1) + a(0+65, 0, scale=0.8, color=\"red\") + a(0+65*2, 0, scale=0.6) + a(0+65*3, 0, scale=0.4, color=\"red\") + tail_str @ag100.route('/badc') def draw_badc(): return head_str + chain_str + b(0, 0) + a(0+65, 0) + d(0+65*2, 0) + c(0+65*3, 0) + tail_str @ag100.route('/abcd') def draw_abcd(): #return head_str + chain_str + a(0, 0) + b(0+65, 0) + c(0+65*2, 0) + d(0+65*3, 0) + tail_str return head_str + chain_str + a(0, 110) + b(0, 110-110) + c(0, 110-110*2) + d(0, 110-110*3) + tail_str @ag100.route('/circle') def drawcircle(): return head_str + chain_str + circle(0, 0) + tail_str @ag100.route('/circle1/<degree>', defaults={'x': 0, 'y': 0}) @ag100.route('/circle1/<x>/<degree>', defaults={'y': 0}) @ag100.route('/circle1/<x>/<y>/<degree>') #@ag100.route('/circle1/<int:x>/<int:y>/<int:degree>') def drawcircle1(x,y,degree): return head_str + chain_str + circle1(int(x), int(y), int(degree)) + tail_str @ag100.route('/circle2/<degree>', defaults={'x': 0, 'y': 0}) @ag100.route('/circle2/<x>/<degree>', defaults={'y': 0}) @ag100.route('/circle2/<x>/<y>/<degree>') #@ag100.route('/circle2/<int:x>/<int:y>/<int:degree>') def drawcircle2(x,y,degree): return head_str + chain_str + circle2(int(x), int(y), int(degree)) + tail_str @ag100.route('/twocircle/<x>/<y>') @ag100.route('/twocircle', defaults={'x':0, 'y':0}) def drawtwocircle(x,y): return head_str + chain_str + twocircle(int(x), int(y)) + tail_str @ag100.route('/eighteenthirty/<x>/<y>') @ag100.route('/eighteenthirty', defaults={'x':0, 'y':0}) def draweithteenthirdy(x,y): return head_str + chain_str + eighteenthirty(int(x), int(y)) + tail_str @ag100.route('/snap') # http://svg.dabbles.info/snaptut-base def snap(): outstring = ''' <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>網際 snap 繪圖</title> <!-- IE 9: display inline SVG --> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"> <script type=\"text/javascript\" src=\"https://brython.info/src/brython_dist.js\"></script> <script type=\"text/javascript\" src=\"/static/snap.svg-min.js\"></script> <script> window.onload=function(){ brython(1); } </script> </head> <body> <svg width=\"800\" height=\"800\" viewBox=\"0 0 800 800\" id=\"svgout\"></svg> <script type=\"text/python\"> from javascript import JSConstructor from browser import alert from browser import window, document # 透過 window 與 JSConstructor 從 Brython 物件 snap 擷取 Snap 物件的內容 snap = JSConstructor(window.Snap) s = snap(\"#svgout\") # 建立物件時, 同時設定 id 名稱 r = s.rect(10,10,100,100).attr({'id': 'rect'}) c = s.circle(100,100,50).attr({'id': 'circle'}) r.attr('fill', 'red') c.attr({ 'fill': 'blue', 'stroke': 'black', 'strokeWidth': 10 }) r.attr({ 'stroke': '#123456', 'strokeWidth': 20 }) s.text(180,100, '點按一下圖形').attr({'fill' : 'blue', 'stroke': 'blue', 'stroke-width': 0.2 }) g = s.group().attr({'id': 'tux'}) def hoverover(ev): g.animate({'transform': 's1.5r45,t180,20'}, 1000, window.mina.bounce) def hoverout(ev): g.animate({'transform': 's1r0,t180,20'}, 1000, window.mina.bounce) # callback 函式 def onSVGLoaded(data): #s.append(data) g.append(data) #g.hover(hoverover, hoverout ) g.text(300,100, '拿滑鼠指向我') # 利用 window.Snap.load 載入 svg 檔案 tux = window.Snap.load(\"/static/Dreaming_tux.svg\", onSVGLoaded) g.transform('t180,20') # 與視窗事件對應的函式 def rtoyellow(ev): r.attr('fill', 'yellow') def ctogreen(ev): c.attr('fill', 'green') # 根據物件 id 綁定滑鼠事件執行對應函式 document['rect'].bind('click', rtoyellow) document['circle'].bind('click', ctogreen) document['tux'].bind('mouseover', hoverover) document['tux'].bind('mouseleave', hoverout) </script> </body> </html> ''' return outstring @ag100.route('/snap_link') # http://svg.dabbles.info/ def snap_link(): outstring = ''' <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>網際 snap 繪圖</title> <!-- IE 9: display inline SVG --> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"> <script type=\"text/javascript\" src=\"https://brython.info/src/brython_dist.js\"></script> <script type=\"text/javascript\" src=\"/static/snap.svg-min.js\"></script> <script> window.onload=function(){ brython(1); } </script> </head> <body> <svg width=\"800\" height=\"800\" viewBox=\"0 0 800 800\" id=\"svgout\"></svg> <script type=\"text/python\"> from javascript import JSConstructor from browser import alert from browser import window, document # 透過 window 與 JSConstructor 從 Brython 物件 snap 擷取 Snap 物件的內容 snap = JSConstructor(window.Snap) # 使用 id 為 \"svgout\" 的 svg 標註進行繪圖 s = snap(\"#svgout\") offsetY = 50 # 是否標訂出繪圖範圍 #borderRect = s.rect(0,0,800,640,10,10).attr({ 'stroke': \"silver\", 'fill': \"silver\", 'strokeWidth': \"3\" }) g = s.group().transform('t250,120') r0 = s.rect(150,150,100,100,20,20).attr({ 'fill': \"orange\", 'opacity': \"0.8\", 'stroke': \"black\", 'strokeWidth': \"2\" }) c0 = s.circle(225,225,10).attr({ 'fill': \"silver\", 'stroke': \"black\", 'strokeWidth': \"4\" }).attr({ 'id': 'c0' }) g0 = s.group( r0,c0 ).attr({ 'id': 'g0' }) #g0.animate({ 'transform' : 't250,120r360,225,225' },4000) g0.appendTo( g ) g0.animate({ 'transform' : 'r360,225,225' },4000) # 讓 g0 可以拖動 g0.drag() r1 = s.rect(100,100,100,100,20,20).attr({ 'fill': \"red\", 'opacity': \"0.8\", 'stroke': \"black\", 'strokeWidth': \"2\" }) c1 = s.circle(175,175,10).attr({ 'fill': \"silver\", 'stroke': \"black\" , 'strokeWidth': \"4\"}).attr({ 'id': 'c1' }) g1 = s.group( r1,c1 ).attr({ 'id': 'g1' }) g1.appendTo( g0 ).attr({ 'id': 'g1' }) g1.animate({ 'transform' : 'r360,175,175' },4000) r2 = s.rect(50,50,100,100,20,20).attr({ 'fill': \"blue\", 'opacity': \"0.8\", 'stroke': \"black\", 'strokeWidth': \"2\" }) c2 = s.circle(125,125,10).attr({ 'fill': \"silver\", 'stroke': \"black\", 'strokeWidth': \"4\" }).attr({ 'id': 'c2' }) g2 = s.group(r2,c2).attr({ 'id': 'g2' }) g2.appendTo( g1 ); g2.animate( { 'transform' : 'r360,125,125' },4000); r3 = s.rect(0,0,100,100,20,20).attr({ 'fill': \"yellow\", 'opacity': \"0.8\", 'stroke': \"black\", 'strokeWidth': \"2\" }) c3 = s.circle(75,75,10).attr({ 'fill': \"silver\", 'stroke': \"black\", 'strokeWidth': \"4\" }).attr({ 'id': 'c3' }) g3 = s.group(r3,c3).attr({ 'id': 'g3' }) g3.appendTo( g2 ) g3.animate( { 'transform' : 'r360,75,75' },4000) r4 = s.rect(-50,-50,100,100,20,20).attr({ 'fill': \"green\", 'opacity': \"0.8\", 'stroke': \"black\", 'strokeWidth': \"2\" }) c4 = s.circle(25,25,10).attr({ 'fill': \"silver\", 'stroke': \"black\", 'strokeWidth': \"4\" }).attr({ 'id': 'c4' }) g4 = s.group(r4,c4).attr({ 'id': 'g4' }); g4.appendTo( g3 ) g4.animate( { 'transform' : 'r360,25,25' },4000) </script> </body> </html> ''' return outstring @ag100.route('/snap_gear') def snap_gear(): outstring = ''' <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>網際 snap 繪圖</title> <!-- IE 9: display inline SVG --> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"> <script type=\"text/javascript\" src=\"https://brython.info/src/brython_dist.js\"></script> <script type=\"text/javascript\" src=\"/static/snap.svg-min.js\"></script> <script> window.onload=function(){ brython(1); } </script> </head> <body> <svg width=\"800\" height=\"800\" viewBox=\"0 0 800 800\" id=\"svgout\"></svg> <script type=\"text/python\"> from javascript import JSConstructor from browser import alert from browser import window, document # 透過 window 與 JSConstructor 從 Brython 物件 snap 擷取 Snap 物件的內容 snap = JSConstructor(window.Snap) s = snap(\"#svgout\") # 畫直線 s.line(0, 0, 100, 100).attr({ 'fill': \"silver\", 'stroke': \"black\", 'strokeWidth': \"1\" }).attr({ 'id': 'line1' }) </script> </body> </html> ''' return outstring","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/zi-xing-che-chuan-dong-2d-lian-tiao-hui-tu-er.html"},{"title":"導入 Brython 與 Snap.svg 網際繪圖","text":"http://snapsvg.io/ 是一套 SVG 繪圖程式庫, 結合 http://brython.info/ 之後, 使用者可以直接在網際環境中利用 Python3 與 SVG 進行靜態或動態模擬繪圖. 也能逐步將 http://rattlecad.sourceforge.net/ 轉換到網際環境中. 其中, 2D 零組件繪圖可以採 SVG 完成, 而對應的 3D 零組件則可利用 https://www.onshape.com 完成. 首先是典型的 Snap.svg 動態繪圖: window.onload=function(){ brython(1); } from javascript import JSConstructor from browser import alert from browser import window, document # 透過 window 與 JSConstructor 從 Brython 物件 snap 擷取 Snap 物件的內容 snap = JSConstructor(window.Snap) # 使用 id 為 \"svgout\" 的 svg 標註進行繪圖 s = snap(\"#svgout\") offsetY = 50 # 是否標示出繪圖範圍 #borderRect = s.rect(0,0,800,640,10,10).attr({ 'stroke': \"silver\", 'fill': \"silver\", 'strokeWidth': \"3\" }) g = s.group().transform('t250,120') r0 = s.rect(150,150,100,100,20,20).attr({ 'fill': \"orange\", 'opacity': \"0.8\", 'stroke': \"black\", 'strokeWidth': \"2\" }) c0 = s.circle(225,225,10).attr({ 'fill': \"silver\", 'stroke': \"black\", 'strokeWidth': \"4\" }).attr({ 'id': 'c0' }) g0 = s.group( r0,c0 ).attr({ 'id': 'g0' }) #g0.animate({ 'transform' : 't250,120r360,225,225' },4000) g0.appendTo( g ) g0.animate({ 'transform' : 'r360,225,225' },4000) # 讓 g0 可以拖動 g0.drag() r1 = s.rect(100,100,100,100,20,20).attr({ 'fill': \"red\", 'opacity': \"0.8\", 'stroke': \"black\", 'strokeWidth': \"2\" }) c1 = s.circle(175,175,10).attr({ 'fill': \"silver\", 'stroke': \"black\" , 'strokeWidth': \"4\"}).attr({ 'id': 'c1' }) g1 = s.group( r1,c1 ).attr({ 'id': 'g1' }) g1.appendTo( g0 ).attr({ 'id': 'g1' }) g1.animate({ 'transform' : 'r360,175,175' },4000) r2 = s.rect(50,50,100,100,20,20).attr({ 'fill': \"blue\", 'opacity': \"0.8\", 'stroke': \"black\", 'strokeWidth': \"2\" }) c2 = s.circle(125,125,10).attr({ 'fill': \"silver\", 'stroke': \"black\", 'strokeWidth': \"4\" }).attr({ 'id': 'c2' }) g2 = s.group(r2,c2).attr({ 'id': 'g2' }) g2.appendTo( g1 ); g2.animate( { 'transform' : 'r360,125,125' },4000); r3 = s.rect(0,0,100,100,20,20).attr({ 'fill': \"yellow\", 'opacity': \"0.8\", 'stroke': \"black\", 'strokeWidth': \"2\" }) c3 = s.circle(75,75,10).attr({ 'fill': \"silver\", 'stroke': \"black\", 'strokeWidth': \"4\" }).attr({ 'id': 'c3' }) g3 = s.group(r3,c3).attr({ 'id': 'g3' }) g3.appendTo( g2 ) g3.animate( { 'transform' : 'r360,75,75' },4000) r4 = s.rect(-50,-50,100,100,20,20).attr({ 'fill': \"green\", 'opacity': \"0.8\", 'stroke': \"black\", 'strokeWidth': \"2\" }) c4 = s.circle(25,25,10).attr({ 'fill': \"silver\", 'stroke': \"black\", 'strokeWidth': \"4\" }).attr({ 'id': 'c4' }) g4 = s.group(r4,c4).attr({ 'id': 'g4' }); g4.appendTo( g3 ) g4.animate( { 'transform' : 'r360,25,25' },4000) Brython 程式碼: window.onload=function(){ brython(1); } from javascript import JSConstructor from browser import alert from browser import window, document # 透過 window 與 JSConstructor 從 Brython 物件 snap 擷取 Snap 物件的內容 snap = JSConstructor(window.Snap) # 使用 id 為 \"svgout\" 的 svg 標註進行繪圖 s = snap(\"#svgout\") offsetY = 50 # 是否標示出繪圖範圍 #borderRect = s.rect(0,0,800,640,10,10).attr({ 'stroke': \"silver\", 'fill': \"silver\", 'strokeWidth': \"3\" }) g = s.group().transform('t250,120') r0 = s.rect(150,150,100,100,20,20).attr({ 'fill': \"orange\", 'opacity': \"0.8\", 'stroke': \"black\", 'strokeWidth': \"2\" }) c0 = s.circle(225,225,10).attr({ 'fill': \"silver\", 'stroke': \"black\", 'strokeWidth': \"4\" }).attr({ 'id': 'c0' }) g0 = s.group( r0,c0 ).attr({ 'id': 'g0' }) #g0.animate({ 'transform' : 't250,120r360,225,225' },4000) g0.appendTo( g ) g0.animate({ 'transform' : 'r360,225,225' },4000) # 讓 g0 可以拖動 g0.drag() r1 = s.rect(100,100,100,100,20,20).attr({ 'fill': \"red\", 'opacity': \"0.8\", 'stroke': \"black\", 'strokeWidth': \"2\" }) c1 = s.circle(175,175,10).attr({ 'fill': \"silver\", 'stroke': \"black\" , 'strokeWidth': \"4\"}).attr({ 'id': 'c1' }) g1 = s.group( r1,c1 ).attr({ 'id': 'g1' }) g1.appendTo( g0 ).attr({ 'id': 'g1' }) g1.animate({ 'transform' : 'r360,175,175' },4000) r2 = s.rect(50,50,100,100,20,20).attr({ 'fill': \"blue\", 'opacity': \"0.8\", 'stroke': \"black\", 'strokeWidth': \"2\" }) c2 = s.circle(125,125,10).attr({ 'fill': \"silver\", 'stroke': \"black\", 'strokeWidth': \"4\" }).attr({ 'id': 'c2' }) g2 = s.group(r2,c2).attr({ 'id': 'g2' }) g2.appendTo( g1 ); g2.animate( { 'transform' : 'r360,125,125' },4000); r3 = s.rect(0,0,100,100,20,20).attr({ 'fill': \"yellow\", 'opacity': \"0.8\", 'stroke': \"black\", 'strokeWidth': \"2\" }) c3 = s.circle(75,75,10).attr({ 'fill': \"silver\", 'stroke': \"black\", 'strokeWidth': \"4\" }).attr({ 'id': 'c3' }) g3 = s.group(r3,c3).attr({ 'id': 'g3' }) g3.appendTo( g2 ) g3.animate( { 'transform' : 'r360,75,75' },4000) r4 = s.rect(-50,-50,100,100,20,20).attr({ 'fill': \"green\", 'opacity': \"0.8\", 'stroke': \"black\", 'strokeWidth': \"2\" }) c4 = s.circle(25,25,10).attr({ 'fill': \"silver\", 'stroke': \"black\", 'strokeWidth': \"4\" }).attr({ 'id': 'c4' }) g4 = s.group(r4,c4).attr({ 'id': 'g4' }); g4.appendTo( g3 ) g4.animate( { 'transform' : 'r360,25,25' },4000) 接著則是簡單的 SVG 檔案導入與滑鼠事件測試: from javascript import JSConstructor from browser import alert from browser import window, document # 透過 window 與 JSConstructor 從 Brython 物件 snap 擷取 Snap 物件的內容 snap = JSConstructor(window.Snap) s = snap(\"#svgout1\") # 建立物件時, 同時設定 id 名稱 r = s.rect(10,10,100,100).attr({'id': 'rect'}) c = s.circle(100,100,50).attr({'id': 'circle'}) r.attr('fill', 'red') c.attr({ 'fill': 'blue', 'stroke': 'black', 'strokeWidth': 10 }) r.attr({ 'stroke': '#123456', 'strokeWidth': 20 }) s.text(180,100, '點按一下圖形').attr({'fill' : 'blue', 'stroke': 'blue', 'stroke-width': 0.2 }) g = s.group().attr({'id': 'tux'}) def hoverover(ev): g.animate({'transform': 's1.5r45,t180,20'}, 1000, window.mina.bounce) def hoverout(ev): g.animate({'transform': 's1r0,t180,20'}, 1000, window.mina.bounce) # callback 函式 def onSVGLoaded(data): #s.append(data) g.append(data) #g.hover(hoverover, hoverout ) g.text(300,100, '將滑鼠指向企鵝') # 利用 window.Snap.load 載入 svg 檔案 tux = window.Snap.load(\"http://chiamingyen.github.io/kmolab_data/files/Dreaming_tux.svg\", onSVGLoaded) g.transform('t180,20') # 與視窗事件對應的函式 def rtoyellow(ev): r.attr('fill', 'yellow') def ctogreen(ev): c.attr('fill', 'green') # 根據物件 id 綁定滑鼠事件執行對應函式 document['rect'].bind('click', rtoyellow) document['circle'].bind('click', ctogreen) document['tux'].bind('mouseover', hoverover) document['tux'].bind('mouseleave', hoverout) Brython 程式碼: from javascript import JSConstructor from browser import alert from browser import window, document # 透過 window 與 JSConstructor 從 Brython 物件 snap 擷取 Snap 物件的內容 snap = JSConstructor(window.Snap) s = snap(\"#svgout1\") # 建立物件時, 同時設定 id 名稱 r = s.rect(10,10,100,100).attr({'id': 'rect'}) c = s.circle(100,100,50).attr({'id': 'circle'}) r.attr('fill', 'red') c.attr({ 'fill': 'blue', 'stroke': 'black', 'strokeWidth': 10 }) r.attr({ 'stroke': '#123456', 'strokeWidth': 20 }) s.text(180,100, '點按一下圖形').attr({'fill' : 'blue', 'stroke': 'blue', 'stroke-width': 0.2 }) g = s.group().attr({'id': 'tux'}) def hoverover(ev): g.animate({'transform': 's1.5r45,t180,20'}, 1000, window.mina.bounce) def hoverout(ev): g.animate({'transform': 's1r0,t180,20'}, 1000, window.mina.bounce) # callback 函式 def onSVGLoaded(data): #s.append(data) g.append(data) #g.hover(hoverover, hoverout ) g.text(300,100, '將滑鼠指向企鵝') # 利用 window.Snap.load 載入 svg 檔案 tux = window.Snap.load(\"http://chiamingyen.github.io/kmolab_data/files/Dreaming_tux.svg\", onSVGLoaded) g.transform('t180,20') # 與視窗事件對應的函式 def rtoyellow(ev): r.attr('fill', 'yellow') def ctogreen(ev): c.attr('fill', 'green') # 根據物件 id 綁定滑鼠事件執行對應函式 document['rect'].bind('click', rtoyellow) document['circle'].bind('click', ctogreen) document['tux'].bind('mouseover', hoverover) document['tux'].bind('mouseleave', hoverout)","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/dao-ru-brython-yu-snapsvg-wang-ji-hui-tu.html"},{"title":"自行車傳動 2D 鏈條繪圖","text":"利用 html canvas 完成的 2D 自行車鏈條繪圖練習: 左側鏈輪齒數為 18, 右側鏈輪齒數為 30. 參考用繪圖程式碼: 鏈條繪圖 class 定義: from flask import Blueprint, request ag100 = Blueprint('ag100', __name__, url_prefix='/ag100', template_folder='templates') head_str = ''' <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>網際 2D 鏈條繪圖</title> <!-- IE 9: display inline SVG --> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"> <script type=\"text/javascript\" src=\"http://brython.info/src/brython_dist.js\"></script> <script type=\"text/javascript\" src=\"http://cptocadp-2015fallhw.rhcloud.com/static/Cango-8v03.js\"></script> <script type=\"text/javascript\" src=\"http://cptocadp-2015fallhw.rhcloud.com/static/Cango2D-6v13.js\"></script> <script type=\"text/javascript\" src=\"http://cptocadp-2015fallhw.rhcloud.com/static/CangoAxes-1v33.js\"></script> </head> <body> <script> window.onload=function(){ brython(1); } </script> <canvas id=\"plotarea\" width=\"800\" height=\"800\"></canvas> ''' tail_str = ''' </script> </body> </html> ''' chain_str = ''' <script type=\"text/python\"> from javascript import JSConstructor from browser import alert from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea\") cgo.setWorldCoords(-250, -250, 500, 500) # 畫軸線 cgo.drawAxes(0, 240, 0, 240, { \"strokeColor\":\"#aaaaaa\", \"fillColor\": \"#aaaaaa\", \"xTickInterval\": 20, \"xLabelInterval\": 20, \"yTickInterval\": 20, \"yLabelInterval\": 20}) deg = math.pi/180 # 將繪製鏈條輪廓的內容寫成 class 物件 class chain(): # 輪廓的外型設為 class variable chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) def __init__(self, fillcolor=\"green\", border=True, strokecolor= \"tan\", linewidth=2, scale=1): self.fillcolor = fillcolor self.border = border self.strokecolor = strokecolor self.linewidth = linewidth self.scale = scale # 利用鏈條起點與終點定義繪圖 def basic(self, x1, y1, x2, y2): self.x1 = x1 self.y1 = y1 self.x2 = x2 self.y2 = y2 # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": self.fillcolor, \"border\": self.border, \"strokeColor\": self.strokecolor, \"lineWidth\": self.linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4*self.scale), \"PATH\") cmbr.appendPath(hole) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(math.atan2(y2-y1, x2-x1)/deg+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, self.scale, 0) # 利用鏈條起點與旋轉角度定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic_rot(self, x1, y1, rot, v=False): # 若 v 為 True 則為虛擬 chain, 不 render self.x1 = x1 self.y1 = y1 self.rot = rot self.v = v # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": self.fillcolor, \"border\": self.border, \"strokeColor\": self.strokecolor, \"lineWidth\": self.linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4*self.scale), \"PATH\") cmbr.appendPath(hole) # 根據旋轉角度, 計算 x2 與 y2 x2 = x1 + 20*math.cos(rot*deg)*self.scale y2 = y1 + 20*math.sin(rot*deg)*self.scale # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(rot+90) # 放大 scale 倍 if v == False: cgo.render(basic1, x1, y1, self.scale, 0) return x2, y2 ''' 利用鏈條元件傳繪出 A 字元的 Brython 程式碼: # 傳繪 A 函式內容 def a(x, y, scale=1, color=\"green\"): outstring = ''' # 利用 chain class 建立案例, 對應到 mychain 變數 mychain = chain(scale='''+str(scale)+''', fillcolor=\"'''+str(color)+'''\") # 畫 A # 左邊兩個垂直單元 x1, y1 = mychain.basic_rot('''+str(x)+\",\"+str(y)+''', 90) x2, y2 = mychain.basic_rot(x1, y1, 90) # 左斜邊兩個單元 x3, y3 = mychain.basic_rot(x2, y2, 80) x4, y4 = mychain.basic_rot(x3, y3, 71) # 最上方水平單元 x5, y5 = mychain.basic_rot(x4, y4, 0) # 右斜邊兩個單元 x6, y6 = mychain.basic_rot(x5, y5, -71) x7, y7 = mychain.basic_rot(x6, y6, -80) # 右邊兩個垂直單元 x8, y8 = mychain.basic_rot(x7, y7, -90) x9, y9 = mychain.basic_rot(x8, y8, -90) # 中間兩個水平單元 x10, y10 = mychain.basic_rot(x8, y8, -180) mychain.basic(x10, y10, x1, y1) ''' return outstring flask 框架程式中定義 A 繪圖連結: @ag100.route('/a') def draw_a(): return head_str + chain_str + a(0, 0) + tail_str 利用鏈條元件送出環繞 36 齒鏈齒輪的繪圖 Brython 程式碼: def circle36(x, y, degree=10): # 20 為鏈條輪廓之圓距 # chain 所圍之圓圈半徑為 20/2/math.asin(degree*math.pi/180/2) # degree = math.asin(20/2/radius)*180/math.pi #degree = 10 first_degree = 90 - degree repeat = 360 / degree outstring = ''' mychain = chain() x1, y1 = mychain.basic_rot('''+str(x)+\",\"+str(y)+\", \"+str(first_degree)+''') ''' for i in range(2, int(repeat)+1): outstring += \"x\"+str(i)+\", y\"+str(i)+\"=mychain.basic_rot(x\"+str(i-1)+\", y\"+str(i-1)+\", 90-\"+str(i*degree)+\") \\n\" return outstring 利用 circle36 函式, 搭配 flask 的 URL 連結多變數設定格式, 執行鏈條繪圖: @ag100.route('/circle36/<degree>', defaults={'x': 0, 'y': 0}) @ag100.route('/circle36/<x>/<degree>', defaults={'y': 0}) @ag100.route('/circle36/<x>/<y>/<degree>') #@ag100.route('/circle36/<int:x>/<int:y>/<int:degree>') def drawcircle36(x,y,degree): return head_str + chain_str + circle36(int(x), int(y), int(degree)) + tail_str","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/zi-xing-che-chuan-dong-2d-lian-tiao-hui-tu.html"},{"title":"歷年協同產品設計實習課程內容整理","text":"2015 Spring 協同產品設計實習課程網頁 , 2014 Spring 協同產品設計實習課程網頁 課程簡介 課程中文名稱: 協同產品設計實習 課程英文名稱: Collaborative Product Design Principles and Practices 課程主要介紹協同產品設計原理與協同產品設計流程的實踐 協同產品設計原理 牽涉多名與產品設計相關的成員 以完成產品開發作為共同目標 透過產品生命週期管理機制 成員分別或共同完成產品專案中的分項任務 協同產品設計流程的實踐 產品開發流程確認 成員角色確認 協同工作模式 產品生命週期管理系統 協同的背景 全球化帶來的密集與瞬息萬變的競爭, 即便是全球各領域目前領先的國際大公司都必須要靠快速併購, 才能具備克敵致勝的專業能力, 因此對於規模較小, 專業能力較不全面的公司與團隊, 為求生存, 必得積極尋求各方協同的機會. 以機械設計流程的角度言, 協同產品設計過程中主要的項目在資訊與知識層次上的協同. 協同的目的在追求速度, 效能, 多元, 互動與彈性 速度 - 推出新產品的速度, 修正既有錯誤的速度 效能 - 強調效率與功能, 持續降低成本 多元 - 多方嘗試, 多方檢視, 多方調控, 多方出擊 互動 - 有推有拉, 有來有往, 密切藕合 彈性 - 及時調整適應, 配合需求能夠加以變化 知識創建 知識分為隱性與顯性, 一般的 know-how 屬於技術性的隱性知識, 另一種隱性知識則稱為認知型隱性知識 認知型的隱性知識則包括團隊間的認知文化, 經驗與潛規則 顯性知識則泛指書本, 導引手冊, 指南等以文字, 影像, 語音, 圖表及多媒體型式, 清楚表達的資訊內容 通常在新產品開發過程中, 透過團隊間付出與能力上的競爭, 會激化出隱性知識的創建 隱性知識通常透過成員在組織間, 以較長時間浸濡方可傳承, 必須設法轉為顯性知識, 以加快並擴大知識所能產生的效益 協同產品設計公司的挑戰之一則是如何將新產品開發過程中的隱性知識轉化為顯性知識 顯性就是已經清楚表達出來的, 隱性就是存在但沒有清楚表達的 書本, 導引手冊是顯性知識, 隱性知識又分兩種, 一種是團隊間大家都知道「一定」要這樣做才可以解決問題的知識, 又稱 know-how 而另外一種隱性知識則是大家「一直」都這樣做的認知, 又稱文化, 習慣或潛規則 採用 Brython 與直線段繪製的漸開線正齒輪輪廓繪圖: from math import * # 準備在 id=\"plotarea\" 的 canvas 中繪圖 canvas = doc[\"plotarea\"] ctx = canvas.getContext(\"2d\") def create_line(x1, y1, x2, y2, width=3, fill=\"red\"): ctx.beginPath() ctx.lineWidth = width ctx.moveTo(x1, y1) ctx.lineTo(x2, y2) ctx.strokeStyle = fill ctx.stroke() # 導入數學函式後, 圓周率為 pi # deg 為角度轉為徑度的轉換因子 deg = pi/180. # # 以下分別為正齒輪繪圖與主 tkinter 畫布繪圖 # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 def gear(midx, midy, rp, n, 顏色): # 將角度轉換因子設為全域變數 global deg # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 create_line(midx, midy, midx, midy-rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a print(\"ra:\", ra) # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*cos(20*deg) print(\"rp:\", rp) print(\"rb:\", rb) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時 print(\"rd:\", rd) # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 dr=(ra-rb)/imax # tan(20*deg)-20*deg 為漸開線函數 sigma=pi/(2*n)+tan(20*deg)-20*deg for j in range(n): ang=-2.*j*pi/n+sigma ang2=2.*j*pi/n+sigma lxd=midx+rd*sin(ang2-2.*pi/n) lyd=midy-rd*cos(ang2-2.*pi/n) for i in range(imax+1): r=rb+i*dr theta=sqrt((r*r)/(rb*rb)-1.) alpha=theta-atan(theta) xpt=r*sin(alpha-ang) ypt=r*cos(alpha-ang) xd=rd*sin(-ang) yd=rd*cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=顏色) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt ''' the line from last end of dedendum point to the recent end of dedendum point ''' # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=顏色) for i in range(imax+1): r=rb+i*dr theta=sqrt((r*r)/(rb*rb)-1.) alpha=theta-atan(theta) xpt=r*sin(ang2-alpha) ypt=r*cos(ang2-alpha) xd=rd*sin(ang2) yd=rd*cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=顏色) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 create_line(lfx,lfy,rfx,rfy,fill=顏色) gear(400,400,300,20,\"blue\") 利用 Cango 程式庫, 繪製曲線與漸開線正齒輪輪廓: window.onload=function(){ brython(1); } # 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容 from browser import document as doc # 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換 from browser import window # 針對 Javascript 既有的物件, 則必須透過 JSConstructor 轉換 from javascript import JSConstructor import math # 主要用來取得畫布大小 canvas = doc[\"gear1\"] # 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx #ctx = canvas.getContext(\"2d\") # 針對類別的轉換, 將 Cango.js 中的 Cango 物件轉為 Python cango 物件 cango = JSConstructor(window.Cango) # 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換 shapedefs = window.shapeDefs # 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形 # in CangoAnimation.js #interpolate1 = window.interpolate # Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件 cobj = JSConstructor(window.Cobj) creategeartooth = JSConstructor(window.createGearTooth) # 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id=\"gear1\" 的 canvas 上 cgo = cango(\"gear1\") ###################################### # 畫正齒輪輪廓 ##################################### # n 為齒數 n = 17 # pa 為壓力角 pa = 25 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth m = 0.8*canvas.width/n # pr 為節圓半徑 pr = n*m/2 # gear Pitch radius # generate gear data = creategeartooth(m, n, pa) # Brython 程式中的 print 會將資料印在 Browser 的 console 區 #print(data) ''' data 印出來為: M 代表 Move to, L 代表 Line to, C 代表 Curve to 參考: https://www.w3.org/TR/SVG11/paths.html 齒輪函式庫: http://cadlab.mde.tw/post/js/gearUtils.js ['M', 213.42546567394663, -26.249132721692735, 'L', 216.4771485764625, -26.59457489332413, 'C', 218.01364355836117, -26.670135871173535, 222.6241377296874, -26.675359459917235, 230.33407980945245, -24.786115738049222, 239.516053270179, -22.484881644156854, 252.57720520079252, -17.521220042103984, 268.1953141424361, -6.908892817203213, 'A', 268.2352941176471, 268.2352941176471, 0, 0, 1, 268.1953141424361, 6.908892817203213, 'C', 252.57720520079252, 17.521220042103984, 239.516053270179, 22.484881644156854, 230.33407980945245, 24.786115738049222, 222.6241377296874, 26.675359459917235, 218.01364355836117, 26.670135871173535, 216.4771485764625, 26.59457489332413, 'L', 213.42546567394663, 26.249132721692735, 'A', 10.588235294117652, 10.588235294117652, 0, 0, 0, 201.7022692356982, 34.938415176795026, 'A', 204.70588235294116, 204.70588235294116, 0, 0, 1, 200.70297598253308, 40.28416192067229, 'A', 10.588235294117652, 10.588235294117652, 0, 0, 0, 208.49560022899982, 52.62158351789785] ''' gearTooth = cobj(data, \"SHAPE\", { \"fillColor\":\"#ddd0dd\", \"border\": True, \"strokeColor\": \"#606060\" }) gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中 gear = gearTooth.dup() # gear 為單一齒的輪廓資料 #cgo.render(gearTooth) # 利用單齒輪廓旋轉, 產生整個正齒輪外形 for i in range(1, n): # 將 gearTooth 中的資料複製到 newTooth newTooth = gearTooth.dup() # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear newTooth.rotate(360*i/n) # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號 gear.appendPath(newTooth, True) # trim move command = True # 建立軸孔 # add axle hole, hr 為 hole radius hr = 0.6*pr # diameter of gear shaft shaft = cobj(shapedefs.circle(hr), \"PATH\") shaft.revWinding() gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path cx = canvas.width/2 cy = canvas.height/2 gear.translate(cx, cy) # render 繪出靜態正齒輪輪廓 cgo.render(gear) 利用 Brython 將漸開線正齒輪輪廓繪圖, 寫為 spur.py 模組: #coding: utf-8 import math # 導入數學函式後, 圓周率為 pi # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 以下為正齒輪繪圖 # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 注意 n 為 52 齒時繪圖產生錯誤, 因為 base circle 與齒根圓大小未進行判斷, 必須要修正 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx, midy, midx, midy-rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(n): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) 假如將 spur.py 放入 Brython 函式庫 Lib/site-packages 目錄中, 則使用者可以導入 spur.py 後進行 齒輪組輪廓繪圖 : # 從 browser 導入 document from browser import document from math import * # 請注意, 這裡導入位於 Lib/site-packages 目錄下的 spur.py 檔案 import spur # 準備在 id=\"plotarea\" 的 canvas 中繪圖 canvas = document[\"plotarea\"] ctx = canvas.getContext(\"2d\") # 以下利用 spur.py 程式進行繪圖, 接下來的協同設計運算必須要配合使用者的需求進行設計運算與繪圖 # 其中並將工作分配給其他組員建立類似 spur.py 的相關零件繪圖模組 # midx, midy 為齒輪圓心座標, rp 為節圓半徑, n 為齒數, pa 為壓力角, color 為線的顏色 # Gear(midx, midy, rp, n=20, pa=20, color=\"black\"): # 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角 # 壓力角 pa 單位為角度 pa = 20 # m 為模數 m = 20 # 第1齒輪齒數 n_g1 = 17 # 第2齒輪齒數 n_g2 = 11 # 第3齒輪齒數 n_g3 = 13 # 計算兩齒輪的節圓半徑 rp_g1 = m*n_g1/2 rp_g2 = m*n_g2/2 rp_g3 = m*n_g3/2 # 繪圖第1齒輪的圓心座標 x_g1 = 400 y_g1 = 400 # 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同 x_g2 = x_g1 + rp_g1 + rp_g2 y_g2 = y_g1 # 第3齒輪的圓心座標 x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3 y_g3 = y_g1 # 將第1齒輪順時鐘轉 90 度 # 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖 ctx.save() # translate to the origin of second gear ctx.translate(x_g1, y_g1) # rotate to engage ctx.rotate(pi/2) # put it back ctx.translate(-x_g1, -y_g1) spur.Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, \"blue\") ctx.restore() # 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合 ctx.save() # translate to the origin of second gear ctx.translate(x_g2, y_g2) # rotate to engage ctx.rotate(-pi/2-pi/n_g2) # put it back ctx.translate(-x_g2, -y_g2) spur.Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, \"black\") ctx.restore() # 將第3齒輪逆時鐘轉 90 度之後, 再往回轉第2齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合 ctx.save() # translate to the origin of second gear ctx.translate(x_g3, y_g3) # rotate to engage # pi+pi/n_g2 為第2齒輪從順時鐘轉 90 度之後, 必須配合目前的標記線所作的齒輪 2 轉動角度, 要轉換到齒輪3 的轉動角度 # 必須乘上兩齒輪齒數的比例, 若齒輪2 大, 則齒輪3 會轉動較快 # 第1個 -pi/2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度 # -pi/n_g3 則是第3齒與第2齒定位線重合後, 必須再逆時鐘多轉一齒的轉角, 以便進行囓合 # (pi+pi/n_g2)*n_g2/n_g3 則是第2齒原定位線為順時鐘轉動 90 度, # 但是第2齒輪為了與第1齒輪囓合, 已經距離定位線, 多轉了 180 度, 再加上第2齒輪的一齒角度, 因為要帶動第3齒輪定位, # 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角, 因此乘上 n_g2/n_g3 ctx.rotate(-pi/2-pi/n_g3+(pi+pi/n_g2)*n_g2/n_g3) # put it back ctx.translate(-x_g3, -y_g3) spur.Spur(ctx).Gear(x_g3, y_g3, rp_g3, n_g3, pa, \"red\") ctx.restore() # 按照上面三個正齒輪的囓合轉角運算, 隨後的傳動齒輪轉角便可依此類推, 完成6個齒輪的囓合繪圖 利用 Pro/Web.Link 建立 PTC/Creo Parametric 網際參數繪圖範例: Creo 參數化零件 document.writeln (\"Error loading Pro/Web.Link header!\"); if (!pfcIsWindows()) netscape.security.PrivilegeManager.enablePrivilege(\"UniversalXPConnect\"); // 若第三輸入為 false, 表示僅載入 session, 但是不顯示 // ret 為 model open return var ret = document.pwl.pwlMdlOpen(\"cube.prt\", \"v:/tmp\", false); if (!ret.Status) { alert(\"pwlMdlOpen failed (\" + ret.ErrorCode + \")\"); } //將 ProE 執行階段設為變數 session var session = pfcGetProESession(); // 在視窗中打開零件檔案, 並且顯示出來 var window = session.OpenFile(pfcCreate(\"pfcModelDescriptor\").CreateFromFileName(\"cube.prt\")); var solid = session.GetModel(\"cube.prt\",pfcCreate(\"pfcModelType\").MDL_PART); var length,width,myf,myn,i,j,volume,count,d1Value,d2Value; // 將模型檔中的 length 變數設為 javascript 中的 length 變數 length = solid.GetParam(\"a1\"); // 將模型檔中的 width 變數設為 javascript 中的 width 變數 width = solid.GetParam(\"a2\"); //改變零件尺寸 //myf=20; //myn=20; volume=0; count=0; try { // 以下採用 URL 輸入對應變數 //createParametersFromArguments (); // 以下則直接利用 javascript 程式改變零件參數 for(i=0;i<=5;i++) { //for(j=0;j<=2;j++) //{ myf=100.0; myn=100.0+i*5.0; // 設定變數值, 利用 ModelItem 中的 CreateDoubleParamValue 轉換成 Pro/Web.Link 所需要的浮點數值 d1Value = pfcCreate (\"MpfcModelItem\").CreateDoubleParamValue(myf); d2Value = pfcCreate (\"MpfcModelItem\").CreateDoubleParamValue(myn); // 將處理好的變數值, 指定給對應的零件變數 length.Value = d1Value; width.Value = d2Value; //零件尺寸重新設定後, 呼叫 Regenerate 更新模型 solid.Regenerate(void null); //利用 GetMassProperty 取得模型的質量相關物件 properties = solid.GetMassProperty(void null); //volume = volume + properties.Volume; volume = properties.Volume; count = count + 1; alert(\"執行第\"+count+\"次,零件總體積:\"+volume); // 將零件存為新檔案 var newfile = document.pwl.pwlMdlSaveAs(\"cube.prt\", \"v:/tmp\", \"cube\"+count+\".prt\"); if (!newfile.Status) { alert(\"pwlMdlSaveAs failed (\" + newfile.ErrorCode + \")\"); } //} // 內圈 for 迴圈 } //外圈 for 迴圈 //alert(\"共執行:\"+count+\"次,零件總體積:\"+volume); //alert(\"零件體積:\"+properties.Volume); //alert(\"零件體積取整數:\"+Math.round(properties.Volume)); } catch(err) { alert (\"Exception occurred: \"+pfcGetExceptionType (err)); } 漸開線正齒輪減速機齒面寬設計運算與繪圖 樂高人偶以程式組立 樂高人偶以程式組立 2 樂高人偶以程式組立範例: if (!pfcIsWindows()) netscape.security.PrivilegeManager.enablePrivilege(\"UniversalXPConnect\"); var session = pfcGetProESession(); //建立擺放零件的位置矩陣 var identityMatrix = pfcCreate (\"pfcMatrix3D\"); for (var x = 0; x < 4; x++) for (var y = 0; y < 4; y++) { if (x == y) identityMatrix.Set (x, y, 1.0); else identityMatrix.Set (x, y, 0.0); } var transf = pfcCreate (\"pfcTransform3D\").Create (identityMatrix); //取得目前的工作目錄 var currentDir = session.getCurrentDirectory(); //以目前已開檔, 作為 model var model = session.CurrentModel; //查驗有無 model, 或 model 類別是否為組立件 if (model == void null || model.Type != pfcCreate (\"pfcModelType\").MDL_ASSEMBLY) throw new Error (0, \"Current model is not an assembly.\"); var assembly = model; function MAN_wai() { var descr = pfcCreate (\"pfcModelDescriptor\").CreateFromFileName (\"lego_waist.prt\"); // 若 link1.prt 在 session 則直接取用 var componentModel = session.GetModelFromDescr (descr); //若 link1.prt 不在 session 則從工作目錄中載入 session var componentModel = session.RetrieveModel(descr); //若 link1.prt 已經在 session 則放入組立檔中 if (componentModel != void null) { //注意這個 asmcomp 即為設定約束條件的本體 //asmcomp 為特徵物件,直接將零件, 以 transf 座標轉換放入組立檔案中 var asmcomp = assembly.AssembleComponent (componentModel, transf); } var ids = pfcCreate (\"intseq\"); //回傳序列模型中的功能，True:該功能只列出公共功能。 var components = assembly.ListFeaturesByType(true, pfcCreate (\"pfcFeatureType\").FEATTYPE_COMPONENT); //取得 assembly 項下的元件 id, 因為只有一個零件, 採用 index 0 取出其 featID //0為組合匯入順序第一個 var featID = components.Item(0).Id; ids.Append(featID); //在 assembly 模型中建立子零件所對應的路徑 //建立路徑變數，CreateComponentPath:回傳組件的路徑物件，把組立模型和的ID路徑給所需的組件。 var subPath = pfcCreate (\"MpfcAssembly\").CreateComponentPath( assembly, ids ); document.write(\"id 為:\"+subPath.ComponentIds(0)); //回傳實體模型，最後的組件路徑 subassembly = subPath.Leaf; var asmDatums = new Array (\"DTM4\",\"DTM5\",\"DTM6\"); var compDatums =new Array (\"DTM1\",\"DTM2\",\"DTM3\"); var relation = new Array (pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_ALIGN, pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_MATE); //建立約束條件變數 var constrs = pfcCreate (\"pfcComponentConstraints\"); for(var j = 0; j < 3; j++) { var asmItem = subassembly.GetItemByName (pfcCreate(\"pfcModelItemType\").ITEM_SURFACE,asmDatums [j]); //若無對應的組立參考面, 則啟用互動式平面選擇表單 flag if (asmItem == void null) { interactFlag = true; } //設定零件參考面, compItem 為 model item，零件參考面:\"FRONT\",\"TOP\",\"RIGHT\" var compItem = componentModel.GetItemByName (pfcCreate(\"pfcModelItemType\").ITEM_SURFACE, compDatums [j]); //若無對應的零件參考面, 則啟用互動式平面選擇表單 flag if (compItem == void null) { interactFlag = true; } //採用互動式設定相關的變數 var MpfcSelect = pfcCreate (\"MpfcSelect\"); //屬於 asmSel 的 asmItem 參考面。 var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, subPath); //屬於 compSel 的 compItem 參考面。 var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); //constr約束方式，ASM_CONSTRAINT_ALIGN 貼齊 var constr = pfcCreate (\"pfcComponentConstraint\").Create (relation[j]); //組立基準 constr.AssemblyReference = asmSel; //放置組件的基準。 constr.ComponentReference = compSel; //約束屬性 constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (true , false); //將互動選擇相關資料, 附加在程式約束變數之後 constrs.Append (constr); } //設定組立約束條件, 以 asmcomp 特徵進行約束條件設定 //請注意, 第二個變數必須為 void null 表示零件對零件進行約束, 若為 subPath, 則零件會與原始零件的平面進行約束 //(約束的組件,void null:如果約束只適用於組件，參數的值應該是空的) asmcomp.SetConstraints (constrs, void null); try { document.write(\"目前 Creo 的工作目錄: \"+currentDir); } catch (err) { alert (\"Exception occurred: \"+pfcGetExceptionType (err)); } } function MAN_1() { var descr = pfcCreate (\"pfcModelDescriptor\").CreateFromFileName (\"lego_body.prt\"); // 若 link1.prt 在 session 則直接取用 var componentModel = session.GetModelFromDescr (descr); //若 link1.prt 不在 session 則從工作目錄中載入 session var componentModel = session.RetrieveModel(descr); //若 link1.prt 已經在 session 則放入組立檔中 if (componentModel != void null) { //注意這個 asmcomp 即為設定約束條件的本體 //asmcomp 為特徵物件,直接將零件, 以 transf 座標轉換放入組立檔案中 //將指定的組件模型加到組立模組所指定的初始位置。 var asmcomp = assembly.AssembleComponent (componentModel, transf); } //設定組立檔中的三個定位面, 注意內定名稱與 Pro/E WF 中的 ASM_D_FRONT 不同, 而是 ASM_FRONT var asmDatums = new Array (\"ASM_FRONT\", \"ASM_TOP\", \"ASM_RIGHT\"); //設定零件檔中的三個定位面, 名稱與 Pro/E WF 中相同 var compDatums = new Array (\"FRONT\",\"TOP\",\"RIGHT\"); // 建立約束條件變數 var constrs = pfcCreate (\"pfcComponentConstraints\"); //利用迴圈分別約束組立與零件檔中的三個定位平面 for (var i = 0; i < 3; i++) { //設定組立參考面 ，GetItemByName:存取指定模型項目名稱， 組立參考面:ASM_FRONT\", \"ASM_TOP\", \"ASM_RIGHT。 var asmItem = assembly.GetItemByName (pfcCreate (\"pfcModelItemType\").ITEM_SURFACE,asmDatums [i]); //若無對應的組立參考面, 則啟用互動式平面選擇表單 flag if (asmItem == void null) { interactFlag = true; continue; } //設定零件參考面，零件參考面:\"FRONT\",\"TOP\",\"RIGHT\" var compItem = componentModel.GetItemByName (pfcCreate (\"pfcModelItemType\").ITEM_SURFACE,compDatums [i]); //若無對應的零件參考面, 則啟用互動式平面選擇表單 flag if (compItem == void null) { interactFlag = true; continue; } //建立 ids 變數, intseq 為 sequence of integers 為資料類別,使用者可以經由整數索引擷取此資料類別的元件,第一個索引為 0 var ids = pfcCreate (\"intseq\"); //建立路徑變數，CreateComponentPath:回傳組件的路徑物件，把組立模型和的ID路徑給所需的組件。 var path = pfcCreate (\"MpfcAssembly\").CreateComponentPath (assembly,ids); //採用互動式設定相關的變數 var MpfcSelect = pfcCreate (\"MpfcSelect\"); //屬於 asmSel 的 asmItem 參考面。 var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, path); //屬於 compSel 的 compItem 參考面。 var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); //constr約束方式，ASM_CONSTRAINT_ALIGN 貼齊 var constr = pfcCreate (\"pfcComponentConstraint\").Create ( pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_ALIGN); //組立基準 constr.AssemblyReference = asmSel; //放置組件的基準。 constr.ComponentReference = compSel; //約束屬性 constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (false, false); //將互動選擇相關資料, 附加在程式約束變數之後 constrs.Append (constr); } //設定組立約束條件，(約束的組件,void null:如果約束只適用於組件，參數的值應該是空的)。 asmcomp.SetConstraints (constrs, void null); try { document.write(\"目前 Creo 的工作目錄: \"+currentDir); } catch (err) { alert (\"Exception occurred: \"+pfcGetExceptionType (err)); } } function MAN_h() { var descr = pfcCreate (\"pfcModelDescriptor\").CreateFromFileName (\"lego_head.prt\"); // 若 link1.prt 在 session 則直接取用 var componentModel = session.GetModelFromDescr (descr); //若 link1.prt 不在 session 則從工作目錄中載入 session var componentModel = session.RetrieveModel(descr); //若 link1.prt 已經在 session 則放入組立檔中 if (componentModel != void null) { //注意這個 asmcomp 即為設定約束條件的本體 //asmcomp 為特徵物件,直接將零件, 以 transf 座標轉換放入組立檔案中 var asmcomp = assembly.AssembleComponent (componentModel, transf); } var ids = pfcCreate (\"intseq\"); //回傳序列模型中的功能，True:該功能只列出公共功能。 var components = assembly.ListFeaturesByType(true, pfcCreate (\"pfcFeatureType\").FEATTYPE_COMPONENT); //取得 assembly 項下的元件 id, 因為只有一個零件, 採用 index 0 取出其 featID var featID = components.Item(0).Id; ids.Append(featID); //在 assembly 模型中建立子零件所對應的路徑 //建立路徑變數，CreateComponentPath:回傳組件的路徑物件，把組立模型和的ID路徑給所需的組件。 var subPath = pfcCreate (\"MpfcAssembly\").CreateComponentPath( assembly, ids ); document.write(\"id 為:\"+subPath.ComponentIds(0)); //回傳實體模型，最後的組件路徑 subassembly = subPath.Leaf; var asmDatums = new Array (\"A_16\",\"DTM3\"); var compDatums =new Array (\"A_2\",\"DTM1\"); var relation = new Array (pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_ALIGN, pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_MATE); var relationItem = new Array(pfcCreate(\"pfcModelItemType\").ITEM_AXIS,pfcCreate(\"pfcModelItemType\").ITEM_SURFACE); //建立約束條件變數 var constrs = pfcCreate (\"pfcComponentConstraints\"); for(var j = 0; j < 2; j++) { var asmItem = subassembly.GetItemByName (relationItem[j],asmDatums [j]); //若無對應的組立參考面, 則啟用互動式平面選擇表單 flag if (asmItem == void null) { interactFlag = true; } //設定零件參考面, compItem 為 model item，零件參考面:\"FRONT\",\"TOP\",\"RIGHT\" var compItem = componentModel.GetItemByName (relationItem[j], compDatums [j]); //若無對應的零件參考面, 則啟用互動式平面選擇表單 flag if (compItem == void null) { interactFlag = true; } //採用互動式設定相關的變數 var MpfcSelect = pfcCreate (\"MpfcSelect\"); //屬於 asmSel 的 asmItem 參考面。 var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, subPath); //屬於 compSel 的 compItem 參考面。 var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); //constr約束方式，ASM_CONSTRAINT_ALIGN 貼齊 var constr = pfcCreate (\"pfcComponentConstraint\").Create (relation[j]); //組立基準 constr.AssemblyReference = asmSel; //放置組件的基準。 constr.ComponentReference = compSel; //約束屬性 constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (true , false); //將互動選擇相關資料, 附加在程式約束變數之後 constrs.Append (constr); } //設定組立約束條件, 以 asmcomp 特徵進行約束條件設定 //請注意, 第二個變數必須為 void null 表示零件對零件進行約束, 若為 subPath, 則零件會與原始零件的平面進行約束 //(約束的組件,void null:如果約束只適用於組件，參數的值應該是空的) asmcomp.SetConstraints (constrs, void null); try { document.write(\"目前 Creo 的工作目錄: \"+currentDir); } catch (err) { alert (\"Exception occurred: \"+pfcGetExceptionType (err)); } } function MAN_la() { var descr = pfcCreate (\"pfcModelDescriptor\").CreateFromFileName (\"lego_arm_lt.prt\"); // 若 link1.prt 在 session 則直接取用 var componentModel = session.GetModelFromDescr (descr); //若 link1.prt 不在 session 則從工作目錄中載入 session var componentModel = session.RetrieveModel(descr); //若 link1.prt 已經在 session 則放入組立檔中 if (componentModel != void null) { //注意這個 asmcomp 即為設定約束條件的本體 //asmcomp 為特徵物件,直接將零件, 以 transf 座標轉換放入組立檔案中 var asmcomp = assembly.AssembleComponent (componentModel, transf); } var ids = pfcCreate (\"intseq\"); //回傳序列模型中的功能，True:該功能只列出公共功能。 var components = assembly.ListFeaturesByType(true, pfcCreate (\"pfcFeatureType\").FEATTYPE_COMPONENT); //取得 assembly 項下的元件 id, 因為只有一個零件, 採用 index 0 取出其 featID var featID = components.Item(0).Id; ids.Append(featID); //在 assembly 模型中建立子零件所對應的路徑 //建立路徑變數，CreateComponentPath:回傳組件的路徑物件，把組立模型和的ID路徑給所需的組件。 var subPath = pfcCreate (\"MpfcAssembly\").CreateComponentPath( assembly, ids ); document.write(\"id 為:\"+subPath.ComponentIds(0)); //回傳實體模型，最後的組件路徑 subassembly = subPath.Leaf; var asmDatums = new Array (\"A_15\",\"DTM2\"); var compDatums =new Array (\"A_7\",\"TOP\"); var relationItem = new Array(pfcCreate(\"pfcModelItemType\").ITEM_AXIS,pfcCreate(\"pfcModelItemType\").ITEM_SURFACE); //建立約束條件變數 var constrs = pfcCreate (\"pfcComponentConstraints\"); for(var j = 0; j < 2; j++) { var asmItem = subassembly.GetItemByName (relationItem[j],asmDatums [j]); //若無對應的組立參考面, 則啟用互動式平面選擇表單 flag if (asmItem == void null) { interactFlag = true; } //設定零件參考面, compItem 為 model item，零件參考面:\"FRONT\",\"TOP\",\"RIGHT\" var compItem = componentModel.GetItemByName (relationItem[j], compDatums [j]); //若無對應的零件參考面, 則啟用互動式平面選擇表單 flag if (compItem == void null) { interactFlag = true; } //採用互動式設定相關的變數 var MpfcSelect = pfcCreate (\"MpfcSelect\"); //屬於 asmSel 的 asmItem 參考面。 var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, subPath); //屬於 compSel 的 compItem 參考面。 var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); //constr約束方式，ASM_CONSTRAINT_ALIGN 貼齊 var constr = pfcCreate (\"pfcComponentConstraint\").Create (pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_ALIGN); //組立基準 constr.AssemblyReference = asmSel; //放置組件的基準。 constr.ComponentReference = compSel; //約束屬性 constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (true , false); //將互動選擇相關資料, 附加在程式約束變數之後 constrs.Append (constr); } //設定組立約束條件, 以 asmcomp 特徵進行約束條件設定 //請注意, 第二個變數必須為 void null 表示零件對零件進行約束, 若為 subPath, 則零件會與原始零件的平面進行約束 //(約束的組件,void null:如果約束只適用於組件，參數的值應該是空的) asmcomp.SetConstraints (constrs, void null); try { document.write(\"目前 Creo 的工作目錄: \"+currentDir); } catch (err) { alert (\"Exception occurred: \"+pfcGetExceptionType (err)); } } function MAN_lh(){ var descr = pfcCreate (\"pfcModelDescriptor\").CreateFromFileName (\"lego_hand.prt\"); // 若 link1.prt 在 session 則直接取用 var componentModel = session.GetModelFromDescr (descr); //若 link1.prt 不在 session 則從工作目錄中載入 session var componentModel = session.RetrieveModel(descr); //若 link1.prt 已經在 session 則放入組立檔中 if (componentModel != void null) { //注意這個 asmcomp 即為設定約束條件的本體 //asmcomp 為特徵物件,直接將零件, 以 transf 座標轉換放入組立檔案中 var asmcomp = assembly.AssembleComponent (componentModel, transf); } var ids = pfcCreate (\"intseq\"); //回傳序列模型中的功能，True:該功能只列出公共功能。 var components = assembly.ListFeaturesByType(true, pfcCreate (\"pfcFeatureType\").FEATTYPE_COMPONENT); //取得 assembly 項下的元件 id, 因為只有一個零件, 採用 index 0 取出其 featID var featID = components.Item(2).Id; ids.Append(featID); //在 assembly 模型中建立子零件所對應的路徑 //建立路徑變數，CreateComponentPath:回傳組件的路徑物件，把組立模型和的ID路徑給所需的組件。 var subPath = pfcCreate (\"MpfcAssembly\").CreateComponentPath( assembly, ids ); document.write(\"id 為:\"+subPath.ComponentIds(0)); //回傳實體模型，最後的組件路徑 subassembly = subPath.Leaf; var asmDatums = new Array (\"A_8\",\"DTM1\"); var compDatums =new Array (\"A_1\",\"DTM3\"); var relation = new Array (pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_ALIGN, pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_MATE); var relationItem = new Array(pfcCreate(\"pfcModelItemType\").ITEM_AXIS,pfcCreate(\"pfcModelItemType\").ITEM_SURFACE); //建立約束條件變數 var constrs = pfcCreate (\"pfcComponentConstraints\"); for(var j = 0; j < 2; j++) { var asmItem = subassembly.GetItemByName (relationItem[j],asmDatums [j]); //若無對應的組立參考面, 則啟用互動式平面選擇表單 flag if (asmItem == void null) { interactFlag = true; } //設定零件參考面, compItem 為 model item，零件參考面:\"FRONT\",\"TOP\",\"RIGHT\" var compItem = componentModel.GetItemByName (relationItem[j], compDatums [j]); //若無對應的零件參考面, 則啟用互動式平面選擇表單 flag if (compItem == void null) { interactFlag = true; } //採用互動式設定相關的變數 var MpfcSelect = pfcCreate (\"MpfcSelect\"); //屬於 asmSel 的 asmItem 參考面。 var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, subPath); //屬於 compSel 的 compItem 參考面。 var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); //constr約束方式，ASM_CONSTRAINT_ALIGN 貼齊 var constr = pfcCreate (\"pfcComponentConstraint\").Create (relation[j]); //組立基準 constr.AssemblyReference = asmSel; //放置組件的基準。 constr.ComponentReference = compSel; //約束屬性 constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (true , false); //將互動選擇相關資料, 附加在程式約束變數之後 constrs.Append (constr); } //設定組立約束條件, 以 asmcomp 特徵進行約束條件設定 //請注意, 第二個變數必須為 void null 表示零件對零件進行約束, 若為 subPath, 則零件會與原始零件的平面進行約束 //(約束的組件,void null:如果約束只適用於組件，參數的值應該是空的) asmcomp.SetConstraints (constrs, void null); try { document.write(\"目前 Creo 的工作目錄: \"+currentDir); } catch (err) { alert (\"Exception occurred: \"+pfcGetExceptionType (err)); } } function MAN_rh(){ var descr = pfcCreate (\"pfcModelDescriptor\").CreateFromFileName (\"lego_hand.prt\"); // 若 link1.prt 在 session 則直接取用 var componentModel = session.GetModelFromDescr (descr); //若 link1.prt 不在 session 則從工作目錄中載入 session var componentModel = session.RetrieveModel(descr); //若 link1.prt 已經在 session 則放入組立檔中 if (componentModel != void null) { //注意這個 asmcomp 即為設定約束條件的本體 //asmcomp 為特徵物件,直接將零件, 以 transf 座標轉換放入組立檔案中 var asmcomp = assembly.AssembleComponent (componentModel, transf); } var ids = pfcCreate (\"intseq\"); //回傳序列模型中的功能，True:該功能只列出公共功能。 var components = assembly.ListFeaturesByType(true, pfcCreate (\"pfcFeatureType\").FEATTYPE_COMPONENT); //取得 assembly 項下的元件 id, 因為只有一個零件, 採用 index 0 取出其 featID var featID = components.Item(1).Id; ids.Append(featID); //在 assembly 模型中建立子零件所對應的路徑 //建立路徑變數，CreateComponentPath:回傳組件的路徑物件，把組立模型和的ID路徑給所需的組件。 var subPath = pfcCreate (\"MpfcAssembly\").CreateComponentPath( assembly, ids ); document.write(\"id 為:\"+subPath.ComponentIds(0)); //回傳實體模型，最後的組件路徑 subassembly = subPath.Leaf; var asmDatums = new Array (\"A_10\",\"DTM1\"); var compDatums =new Array (\"A_1\",\"DTM3\"); var relation = new Array (pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_ALIGN, pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_MATE); var relationItem = new Array(pfcCreate(\"pfcModelItemType\").ITEM_AXIS,pfcCreate(\"pfcModelItemType\").ITEM_SURFACE); //建立約束條件變數 var constrs = pfcCreate (\"pfcComponentConstraints\"); for(var j = 0; j < 2; j++) { var asmItem = subassembly.GetItemByName (relationItem[j],asmDatums [j]); //若無對應的組立參考面, 則啟用互動式平面選擇表單 flag if (asmItem == void null) { interactFlag = true; } //設定零件參考面, compItem 為 model item，零件參考面:\"FRONT\",\"TOP\",\"RIGHT\" var compItem = componentModel.GetItemByName (relationItem[j], compDatums [j]); //若無對應的零件參考面, 則啟用互動式平面選擇表單 flag if (compItem == void null) { interactFlag = true; } //採用互動式設定相關的變數 var MpfcSelect = pfcCreate (\"MpfcSelect\"); //屬於 asmSel 的 asmItem 參考面。 var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, subPath); //屬於 compSel 的 compItem 參考面。 var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); //constr約束方式，ASM_CONSTRAINT_ALIGN 貼齊 var constr = pfcCreate (\"pfcComponentConstraint\").Create (relation[j]); //組立基準 constr.AssemblyReference = asmSel; //放置組件的基準。 constr.ComponentReference = compSel; //約束屬性 constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (true , false); //將互動選擇相關資料, 附加在程式約束變數之後 constrs.Append (constr); } //設定組立約束條件, 以 asmcomp 特徵進行約束條件設定 //請注意, 第二個變數必須為 void null 表示零件對零件進行約束, 若為 subPath, 則零件會與原始零件的平面進行約束 //(約束的組件,void null:如果約束只適用於組件，參數的值應該是空的) asmcomp.SetConstraints (constrs, void null); try { document.write(\"目前 Creo 的工作目錄: \"+currentDir); } catch (err) { alert (\"Exception occurred: \"+pfcGetExceptionType (err)); } } function MAN_ll(){ var descr = pfcCreate (\"pfcModelDescriptor\").CreateFromFileName (\"lego_leg_lt.prt\"); // 若 link1.prt 在 session 則直接取用 var componentModel = session.GetModelFromDescr (descr); //若 link1.prt 不在 session 則從工作目錄中載入 session var componentModel = session.RetrieveModel(descr); //若 link1.prt 已經在 session 則放入組立檔中 if (componentModel != void null) { //注意這個 asmcomp 即為設定約束條件的本體 //asmcomp 為特徵物件,直接將零件, 以 transf 座標轉換放入組立檔案中 var asmcomp = assembly.AssembleComponent (componentModel, transf); } var ids = pfcCreate (\"intseq\"); //回傳序列模型中的功能，True:該功能只列出公共功能。 var components = assembly.ListFeaturesByType(true, pfcCreate (\"pfcFeatureType\").FEATTYPE_COMPONENT); //取得 assembly 項下的元件 id, 因為只有一個零件, 採用 index 0 取出其 featID //0為組合匯入順序第一個 var featID = components.Item(5).Id; ids.Append(featID); //在 assembly 模型中建立子零件所對應的路徑 //建立路徑變數，CreateComponentPath:回傳組件的路徑物件，把組立模型和的ID路徑給所需的組件。 var subPath = pfcCreate (\"MpfcAssembly\").CreateComponentPath( assembly, ids ); document.write(\"id 為:\"+subPath.ComponentIds(0)); //回傳實體模型，最後的組件路徑 subassembly = subPath.Leaf; var asmDatums = new Array (\"A_8\",\"DTM4\"); var compDatums =new Array (\"A_10\",\"DTM1\"); var relationItem = new Array(pfcCreate(\"pfcModelItemType\").ITEM_AXIS,pfcCreate(\"pfcModelItemType\").ITEM_SURFACE); //建立約束條件變數 var constrs = pfcCreate (\"pfcComponentConstraints\"); for(var j = 0; j < 2; j++) { var asmItem = subassembly.GetItemByName (relationItem[j],asmDatums [j]); //若無對應的組立參考面, 則啟用互動式平面選擇表單 flag if (asmItem == void null) { interactFlag = true; } //設定零件參考面, compItem 為 model item，零件參考面:\"FRONT\",\"TOP\",\"RIGHT\" var compItem = componentModel.GetItemByName (relationItem[j], compDatums [j]); //若無對應的零件參考面, 則啟用互動式平面選擇表單 flag if (compItem == void null) { interactFlag = true; } //採用互動式設定相關的變數 var MpfcSelect = pfcCreate (\"MpfcSelect\"); //屬於 asmSel 的 asmItem 參考面。 var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, subPath); //屬於 compSel 的 compItem 參考面。 var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); //constr約束方式，ASM_CONSTRAINT_ALIGN 貼齊 var constr = pfcCreate (\"pfcComponentConstraint\").Create (pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_ALIGN); //組立基準 constr.AssemblyReference = asmSel; //放置組件的基準。 constr.ComponentReference = compSel; //約束屬性 constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (true , false); //將互動選擇相關資料, 附加在程式約束變數之後 constrs.Append (constr); } //設定組立約束條件, 以 asmcomp 特徵進行約束條件設定 //請注意, 第二個變數必須為 void null 表示零件對零件進行約束, 若為 subPath, 則零件會與原始零件的平面進行約束 //(約束的組件,void null:如果約束只適用於組件，參數的值應該是空的) asmcomp.SetConstraints (constrs, void null); try { document.write(\"目前 Creo 的工作目錄: \"+currentDir); } catch (err) { alert (\"Exception occurred: \"+pfcGetExceptionType (err)); } } function MAN_ra(){ var descr = pfcCreate (\"pfcModelDescriptor\").CreateFromFileName (\"lego_arm_rt.prt\"); // 若 link1.prt 在 session 則直接取用 var componentModel = session.GetModelFromDescr (descr); //若 link1.prt 不在 session 則從工作目錄中載入 session var componentModel = session.RetrieveModel(descr); //若 link1.prt 已經在 session 則放入組立檔中 if (componentModel != void null) { //注意這個 asmcomp 即為設定約束條件的本體 //asmcomp 為特徵物件,直接將零件, 以 transf 座標轉換放入組立檔案中 var asmcomp = assembly.AssembleComponent (componentModel, transf); } var ids = pfcCreate (\"intseq\"); //回傳序列模型中的功能，True:該功能只列出公共功能。 var components = assembly.ListFeaturesByType(true, pfcCreate (\"pfcFeatureType\").FEATTYPE_COMPONENT); //取得 assembly 項下的元件 id, 因為只有一個零件, 採用 index 0 取出其 featID var featID = components.Item(0).Id; ids.Append(featID); //在 assembly 模型中建立子零件所對應的路徑 //建立路徑變數，CreateComponentPath:回傳組件的路徑物件，把組立模型和的ID路徑給所需的組件。 var subPath = pfcCreate (\"MpfcAssembly\").CreateComponentPath( assembly, ids ); document.write(\"id 為:\"+subPath.ComponentIds(0)); //回傳實體模型，最後的組件路徑 subassembly = subPath.Leaf; var asmDatums = new Array (\"A_14\",\"DTM1\"); var compDatums =new Array (\"A_9\",\"TOP\"); var relationItem = new Array(pfcCreate(\"pfcModelItemType\").ITEM_AXIS,pfcCreate(\"pfcModelItemType\").ITEM_SURFACE); //建立約束條件變數 var constrs = pfcCreate (\"pfcComponentConstraints\"); for(var j = 0; j < 2; j++) { var asmItem = subassembly.GetItemByName (relationItem[j],asmDatums [j]); //若無對應的組立參考面, 則啟用互動式平面選擇表單 flag if (asmItem == void null) { interactFlag = true; } //設定零件參考面, compItem 為 model item，零件參考面:\"FRONT\",\"TOP\",\"RIGHT\" var compItem = componentModel.GetItemByName (relationItem[j], compDatums [j]); //若無對應的零件參考面, 則啟用互動式平面選擇表單 flag if (compItem == void null) { interactFlag = true; } //採用互動式設定相關的變數 var MpfcSelect = pfcCreate (\"MpfcSelect\"); //屬於 asmSel 的 asmItem 參考面。 var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, subPath); //屬於 compSel 的 compItem 參考面。 var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); //constr約束方式，ASM_CONSTRAINT_ALIGN 貼齊 var constr = pfcCreate (\"pfcComponentConstraint\").Create (pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_ALIGN); //組立基準 constr.AssemblyReference = asmSel; //放置組件的基準。 constr.ComponentReference = compSel; //約束屬性 constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (true , false); //將互動選擇相關資料, 附加在程式約束變數之後 constrs.Append (constr); } //設定組立約束條件, 以 asmcomp 特徵進行約束條件設定 //請注意, 第二個變數必須為 void null 表示零件對零件進行約束, 若為 subPath, 則零件會與原始零件的平面進行約束 //(約束的組件,void null:如果約束只適用於組件，參數的值應該是空的) asmcomp.SetConstraints (constrs, void null); try { document.write(\"目前 Creo 的工作目錄: \"+currentDir); } catch (err) { alert (\"Exception occurred: \"+pfcGetExceptionType (err)); } } function MAN_rl(){ var descr = pfcCreate (\"pfcModelDescriptor\").CreateFromFileName (\"lego_leg_rt.prt\"); // 若 link1.prt 在 session 則直接取用 var componentModel = session.GetModelFromDescr (descr); //若 link1.prt 不在 session 則從工作目錄中載入 session var componentModel = session.RetrieveModel(descr); //若 link1.prt 已經在 session 則放入組立檔中 if (componentModel != void null) { //注意這個 asmcomp 即為設定約束條件的本體 //asmcomp 為特徵物件,直接將零件, 以 transf 座標轉換放入組立檔案中 var asmcomp = assembly.AssembleComponent (componentModel, transf); } var ids = pfcCreate (\"intseq\"); //回傳序列模型中的功能，True:該功能只列出公共功能。 var components = assembly.ListFeaturesByType(true, pfcCreate (\"pfcFeatureType\").FEATTYPE_COMPONENT); //取得 assembly 項下的元件 id, 因為只有一個零件, 採用 index 0 取出其 featID //0為組合匯入順序第一個 var featID = components.Item(5).Id; ids.Append(featID); //在 assembly 模型中建立子零件所對應的路徑 //建立路徑變數，CreateComponentPath:回傳組件的路徑物件，把組立模型和的ID路徑給所需的組件。 var subPath = pfcCreate (\"MpfcAssembly\").CreateComponentPath( assembly, ids ); document.write(\"id 為:\"+subPath.ComponentIds(0)); //回傳實體模型，最後的組件路徑 subassembly = subPath.Leaf; var asmDatums = new Array (\"A_8\",\"DTM5\"); var compDatums =new Array (\"A_10\",\"DTM1\"); var relationItem = new Array(pfcCreate(\"pfcModelItemType\").ITEM_AXIS,pfcCreate(\"pfcModelItemType\").ITEM_SURFACE); //建立約束條件變數 var constrs = pfcCreate (\"pfcComponentConstraints\"); for(var j = 0; j < 2; j++) { var asmItem = subassembly.GetItemByName (relationItem[j],asmDatums [j]); //若無對應的組立參考面, 則啟用互動式平面選擇表單 flag if (asmItem == void null) { interactFlag = true; } //設定零件參考面, compItem 為 model item，零件參考面:\"FRONT\",\"TOP\",\"RIGHT\" var compItem = componentModel.GetItemByName (relationItem[j], compDatums [j]); //若無對應的零件參考面, 則啟用互動式平面選擇表單 flag if (compItem == void null) { interactFlag = true; } //採用互動式設定相關的變數 var MpfcSelect = pfcCreate (\"MpfcSelect\"); //屬於 asmSel 的 asmItem 參考面。 var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, subPath); //屬於 compSel 的 compItem 參考面。 var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); //constr約束方式，ASM_CONSTRAINT_ALIGN 貼齊 var constr = pfcCreate (\"pfcComponentConstraint\").Create (pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_ALIGN); //組立基準 constr.AssemblyReference = asmSel; //放置組件的基準。 constr.ComponentReference = compSel; //約束屬性 constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (true , false); //將互動選擇相關資料, 附加在程式約束變數之後 constrs.Append (constr); } //設定組立約束條件, 以 asmcomp 特徵進行約束條件設定 //請注意, 第二個變數必須為 void null 表示零件對零件進行約束, 若為 subPath, 則零件會與原始零件的平面進行約束 //(約束的組件,void null:如果約束只適用於組件，參數的值應該是空的) asmcomp.SetConstraints (constrs, void null); try { document.write(\"目前 Creo 的工作目錄: \"+currentDir); } catch (err) { alert (\"Exception occurred: \"+pfcGetExceptionType (err)); } } function MAN_hat(){ var descr = pfcCreate (\"pfcModelDescriptor\").CreateFromFileName (\"lego_hat.prt\"); // 若 link1.prt 在 session 則直接取用 var componentModel = session.GetModelFromDescr (descr); //若 link1.prt 不在 session 則從工作目錄中載入 session var componentModel = session.RetrieveModel(descr); //若 link1.prt 已經在 session 則放入組立檔中 if (componentModel != void null) { //注意這個 asmcomp 即為設定約束條件的本體 //asmcomp 為特徵物件,直接將零件, 以 transf 座標轉換放入組立檔案中 var asmcomp = assembly.AssembleComponent (componentModel, transf); } var ids = pfcCreate (\"intseq\"); //回傳序列模型中的功能，True:該功能只列出公共功能。 var components = assembly.ListFeaturesByType(true, pfcCreate (\"pfcFeatureType\").FEATTYPE_COMPONENT); //取得 assembly 項下的元件 id, 因為只有一個零件, 採用 index 0 取出其 featID var featID = components.Item(3).Id; ids.Append(featID); //在 assembly 模型中建立子零件所對應的路徑 //建立路徑變數，CreateComponentPath:回傳組件的路徑物件，把組立模型和的ID路徑給所需的組件。 var subPath = pfcCreate (\"MpfcAssembly\").CreateComponentPath( assembly, ids ); document.write(\"id 為:\"+subPath.ComponentIds(0)); //回傳實體模型，最後的組件路徑 subassembly = subPath.Leaf; var asmDatums = new Array (\"A_2\",\"TOP\"); var compDatums =new Array (\"A_2\",\"FRONT\"); var relation = new Array (pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_ALIGN, pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_MATE); var relationItem = new Array(pfcCreate(\"pfcModelItemType\").ITEM_AXIS,pfcCreate(\"pfcModelItemType\").ITEM_SURFACE); //建立約束條件變數 var constrs = pfcCreate (\"pfcComponentConstraints\"); for(var j = 0; j < 2; j++) { var asmItem = subassembly.GetItemByName (relationItem[j],asmDatums [j]); //若無對應的組立參考面, 則啟用互動式平面選擇表單 flag if (asmItem == void null) { interactFlag = true; } //設定零件參考面, compItem 為 model item，零件參考面:\"FRONT\",\"TOP\",\"RIGHT\" var compItem = componentModel.GetItemByName (relationItem[j], compDatums [j]); //若無對應的零件參考面, 則啟用互動式平面選擇表單 flag if (compItem == void null) { interactFlag = true; } //採用互動式設定相關的變數 var MpfcSelect = pfcCreate (\"MpfcSelect\"); //屬於 asmSel 的 asmItem 參考面。 var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, subPath); //屬於 compSel 的 compItem 參考面。 var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); //constr約束方式，ASM_CONSTRAINT_ALIGN 貼齊 var constr = pfcCreate (\"pfcComponentConstraint\").Create (relation[j]); //組立基準 constr.AssemblyReference = asmSel; //放置組件的基準。 constr.ComponentReference = compSel; //約束屬性 constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (true , false); //將互動選擇相關資料, 附加在程式約束變數之後 constrs.Append (constr); } //設定組立約束條件, 以 asmcomp 特徵進行約束條件設定 //請注意, 第二個變數必須為 void null 表示零件對零件進行約束, 若為 subPath, 則零件會與原始零件的平面進行約束 //(約束的組件,void null:如果約束只適用於組件，參數的值應該是空的) asmcomp.SetConstraints (constrs, void null); try { document.write(\"目前 Creo 的工作目錄: \"+currentDir); } catch (err) { alert (\"Exception occurred: \"+pfcGetExceptionType (err)); } } function main() { MAN_1(); MAN_ra(); MAN_la(); MAN_h(); MAN_hat(); MAN_wai(); MAN_rh(); MAN_lh(); MAN_ll(); MAN_rl(); assembly.Regenerate (void null); session.GetModelWindow (assembly).Repaint(); } ? nutcracker 程式組立範例: if (!pfcIsWindows()) netscape.security.PrivilegeManager.enablePrivilege(\"UniversalXPConnect\"); var session = pfcGetProESession(); // 設定 config option session.SetConfigOption(\"comp_placement_assumptions\",\"no\"); // 建立擺放零件的位置矩陣 var identityMatrix = pfcCreate (\"pfcMatrix3D\"); for (var x = 0; x < 4; x++) for (var y = 0; y < 4; y++) { if (x == y) identityMatrix.Set (x, y, 1.0); else identityMatrix.Set (x, y, 0.0); } var transf = pfcCreate (\"pfcTransform3D\").Create (identityMatrix); // 取得目前的工作目錄 var currentDir = session.getCurrentDirectory(); // 以目前已開檔, 作為 model var model = session.CurrentModel; // 查驗有無 model, 或 model 類別是否為組立件 if (model == void null || model.Type != pfcCreate (\"pfcModelType\").MDL_ASSEMBLY) throw new Error (0, \"Current model is not an assembly.\"); var assembly = model; /**----------------------------------------------- fix -------------------------------------------------------------**/ var descr = pfcCreate (\"pfcModelDescriptor\").CreateFromFileName (\"nutcracker/fix.prt\"); // 若 link1.prt 在 session 則直接取用 var componentModel = session.GetModelFromDescr (descr); //若 link1.prt 不在 session 則從工作目錄中載入 session var componentModel = session.RetrieveModel(descr); //若 link1.prt 已經在 session 則放入組立檔中 if (componentModel != void null) { //注意這個 asmcomp 即為設定約束條件的本體 //asmcomp 為特徵物件,直接將零件, 以 transf 座標轉換放入組立檔案中 var asmcomp = assembly.AssembleComponent (componentModel, transf); } // 建立約束條件變數 var constrs = pfcCreate (\"pfcComponentConstraints\"); //設定組立檔中的三個定位面, 注意內定名稱與 Pro/E WF 中的 ASM_D_FRONT 不同, 而是 ASM_FRONT var asmDatums = new Array (\"ASM_FRONT\", \"ASM_TOP\", \"ASM_RIGHT\"); //設定零件檔中的三個定位面, 名稱與 Pro/E WF 中相同 var compDatums = new Array (\"FRONT\", \"TOP\", \"RIGHT\"); //建立 ids 變數, intseq 為 sequence of integers 為資料類別, 使用者可以經由整數索引擷取此資料類別的元件, 第一個索引為 0 var ids = pfcCreate (\"intseq\"); //建立路徑變數 var path = pfcCreate (\"MpfcAssembly\").CreateComponentPath (assembly, ids); //採用互動式設定相關的變數 var MpfcSelect = pfcCreate (\"MpfcSelect\"); //利用迴圈分別約束組立與零件檔中的三個定位平面 for (var i = 0; i < 3; i++) { //設定組立參考面 var asmItem = assembly.GetItemByName (pfcCreate (\"pfcModelItemType\").ITEM_SURFACE, asmDatums [i]); //若無對應的組立參考面, 則啟用互動式平面選擇表單 flag if (asmItem == void null) { interactFlag = true; continue; } //設定零件參考面 var compItem = componentModel.GetItemByName (pfcCreate (\"pfcModelItemType\").ITEM_SURFACE, compDatums [i]); //若無對應的零件參考面, 則啟用互動式平面選擇表單 flag if (compItem == void null) { interactFlag = true; continue; } var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, path); var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); var constr = pfcCreate (\"pfcComponentConstraint\").Create (pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_ALIGN); constr.AssemblyReference = asmSel; constr.ComponentReference = compSel; constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (false, false); //將互動選擇相關資料, 附加在程式約束變數之後 constrs.Append (constr); } //設定組立約束條件 asmcomp.SetConstraints (constrs, void null); /**-------------------------------------------------------------------------------------------------------------------**/ /**----------------------------------------------- fixture -------------------------------------------------------------**/ var descr = pfcCreate (\"pfcModelDescriptor\").CreateFromFileName (\"nutcracker/fixture.prt\"); var componentModel = session.GetModelFromDescr (descr); var componentModel = session.RetrieveModel(descr); if (componentModel != void null) { var asmcomp = assembly.AssembleComponent (componentModel, transf); } var components = assembly.ListFeaturesByType(true, pfcCreate (\"pfcFeatureType\").FEATTYPE_COMPONENT); var featID = components.Item(0).Id; ids.Append(featID); var subPath = pfcCreate (\"MpfcAssembly\").CreateComponentPath( assembly, ids ); subassembly = subPath.Leaf; var asmDatums = new Array (\"A_2\", \"RIGHT\"); var compDatums = new Array (\"A_3\", \"DTM1\"); var relation = new Array (pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_ALIGN, pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_MATE); var relationItem = new Array(pfcCreate(\"pfcModelItemType\").ITEM_AXIS,pfcCreate(\"pfcModelItemType\").ITEM_SURFACE); var constrs = pfcCreate (\"pfcComponentConstraints\"); for (var i = 0; i < 2; i++) { var asmItem = subassembly.GetItemByName (relationItem[i], asmDatums [i]); if (asmItem == void null) { interactFlag = true; continue; } var compItem = componentModel.GetItemByName (relationItem[i], compDatums [i]); if (compItem == void null) { interactFlag = true; continue; } var MpfcSelect = pfcCreate (\"MpfcSelect\"); var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, subPath); var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); var constr = pfcCreate (\"pfcComponentConstraint\").Create (relation[i]); constr.AssemblyReference = asmSel; constr.ComponentReference = compSel; constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (true, false); constrs.Append (constr); } asmcomp.SetConstraints (constrs, void null); /**-------------------------------------------------------------------------------------------------------------------**/ /**----------------------------------------------- cracker -------------------------------------------------------------**/ var descr = pfcCreate (\"pfcModelDescriptor\").CreateFromFileName (\"nutcracker/cracker.prt\"); var componentModel = session.GetModelFromDescr (descr); var componentModel = session.RetrieveModel(descr); if (componentModel != void null) { var asmcomp = assembly.AssembleComponent (componentModel, transf); } var ids = pfcCreate (\"intseq\"); ids.Append(featID); var subPath = pfcCreate (\"MpfcAssembly\").CreateComponentPath( assembly, ids ); subassembly = subPath.Leaf; var asmDatums = new Array (\"A_4\"); var compDatums = new Array (\"A_1\"); var relation = new Array (pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_ALIGN, pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_MATE); var relationItem = new Array(pfcCreate(\"pfcModelItemType\").ITEM_AXIS,pfcCreate(\"pfcModelItemType\").ITEM_SURFACE); var constrs = pfcCreate (\"pfcComponentConstraints\"); for (var i = 0; i < 1; i++) { var asmItem = subassembly.GetItemByName (relationItem[i], asmDatums [i]); if (asmItem == void null) { interactFlag = true; continue; } var compItem = componentModel.GetItemByName (relationItem[i], compDatums [i]); if (compItem == void null) { interactFlag = true; continue; } var MpfcSelect = pfcCreate (\"MpfcSelect\"); var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, subPath); var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); var constr = pfcCreate (\"pfcComponentConstraint\").Create (relation[i]); constr.AssemblyReference = asmSel; constr.ComponentReference = compSel; constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (true, false); constrs.Append (constr); } asmcomp.SetConstraints (constrs, void null); /**-------------------------------------------------------------------------------------------------------------------**/ /**----------------------------------------------- link -------------------------------------------------------------**/ var descr = pfcCreate (\"pfcModelDescriptor\").CreateFromFileName (\"nutcracker/link.prt\"); var componentModel = session.GetModelFromDescr (descr); var componentModel = session.RetrieveModel(descr); if (componentModel != void null) { var asmcomp = assembly.AssembleComponent (componentModel, transf); } var ids = pfcCreate (\"intseq\"); ids.Append(featID+2); var subPath = pfcCreate (\"MpfcAssembly\").CreateComponentPath( assembly, ids ); subassembly = subPath.Leaf; var asmDatums = new Array (\"A_2\",\"DTM1\"); var compDatums = new Array (\"A_1\",\"DTM1\"); var relation = new Array (pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_ALIGN, pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_MATE); var relationItem = new Array(pfcCreate(\"pfcModelItemType\").ITEM_AXIS,pfcCreate(\"pfcModelItemType\").ITEM_SURFACE); var constrs = pfcCreate (\"pfcComponentConstraints\"); for (var i = 0; i < 2; i++) { var asmItem = subassembly.GetItemByName (relationItem[i], asmDatums [i]); if (asmItem == void null) { interactFlag = true; continue; } var compItem = componentModel.GetItemByName (relationItem[i], compDatums [i]); if (compItem == void null) { interactFlag = true; continue; } var MpfcSelect = pfcCreate (\"MpfcSelect\"); var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, subPath); var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); var constr = pfcCreate (\"pfcComponentConstraint\").Create (relation[i]); constr.AssemblyReference = asmSel; constr.ComponentReference = compSel; constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (true, false); constrs.Append (constr); } asmcomp.SetConstraints (constrs, void null); /**-------------------------------------------------------------------------------------------------------------------**/ /**----------------------------------------------- handle -------------------------------------------------------------**/ var descr = pfcCreate (\"pfcModelDescriptor\").CreateFromFileName (\"nutcracker/handle.prt\"); var componentModel = session.GetModelFromDescr (descr); var componentModel = session.RetrieveModel(descr); if (componentModel != void null) { var asmcomp = assembly.AssembleComponent (componentModel, transf); } var relation = new Array (pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_ALIGN, pfcCreate (\"pfcComponentConstraintType\").ASM_CONSTRAINT_MATE); var relationItem = new Array(pfcCreate(\"pfcModelItemType\").ITEM_AXIS,pfcCreate(\"pfcModelItemType\").ITEM_SURFACE); var constrs = pfcCreate (\"pfcComponentConstraints\"); var ids = pfcCreate (\"intseq\"); ids.Append(featID); var subPath = pfcCreate (\"MpfcAssembly\").CreateComponentPath( assembly, ids ); subassembly = subPath.Leaf; var asmDatums = new Array (\"A_3\",\"DTM3\"); var compDatums = new Array (\"A_1\",\"DTM1\"); for (var i = 0; i < 2; i++) { var asmItem = subassembly.GetItemByName (relationItem[i], asmDatums [i]); if (asmItem == void null) { interactFlag = true; continue; } var compItem = componentModel.GetItemByName (relationItem[i], compDatums [i]); if (compItem == void null) { interactFlag = true; continue; } var MpfcSelect = pfcCreate (\"MpfcSelect\"); var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, subPath); var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); var constr = pfcCreate (\"pfcComponentConstraint\").Create (relation[i]); constr.AssemblyReference = asmSel; constr.ComponentReference = compSel; constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (true, false); constrs.Append (constr); } asmcomp.SetConstraints (constrs, void null); var ids = pfcCreate (\"intseq\"); ids.Append(featID+3); var subPath = pfcCreate (\"MpfcAssembly\").CreateComponentPath( assembly, ids ); subassembly = subPath.Leaf; var asmDatums = new Array (\"A_2\", \"DTM1\"); var compDatums = new Array (\"A_2\", \"DTM1\"); for (var i = 0; i < 2; i++) { var asmItem = subassembly.GetItemByName (relationItem[i], asmDatums [i]); if (asmItem == void null) { interactFlag = true; continue; } var compItem = componentModel.GetItemByName (relationItem[i], compDatums [i]); if (compItem == void null) { interactFlag = true; continue; } var MpfcSelect = pfcCreate (\"MpfcSelect\"); var asmSel = MpfcSelect.CreateModelItemSelection (asmItem, subPath); var compSel = MpfcSelect.CreateModelItemSelection (compItem, void null); var constr = pfcCreate (\"pfcComponentConstraint\").Create (relation[i]); constr.AssemblyReference = asmSel; constr.ComponentReference = compSel; constr.Attributes = pfcCreate (\"pfcConstraintAttributes\").Create (true, true); constrs.Append (constr); } asmcomp.SetConstraints (constrs, void null); /**-------------------------------------------------------------------------------------------------------------------**/ var session = pfcGetProESession (); var solid = session.CurrentModel; properties = solid.GetMassProperty(void null); var COG = properties.GravityCenter; document.write(\"MassProperty: \"); document.write(\"Mass:\"+(properties.Mass.toFixed(2))+\" pound \"); document.write(\"Average Density:\"+(properties.Density.toFixed(2))+\" pound/inch&#94;3 \"); document.write(\"Surface area:\"+(properties.SurfaceArea.toFixed(2))+\" inch&#94;2 \"); document.write(\"Volume:\"+(properties.Volume.toFixed(2))+\" inch&#94;3 \"); document.write(\"COG_X:\"+COG.Item(0).toFixed(2)+\" \"); document.write(\"COG_Y:\"+COG.Item(1).toFixed(2)+\" \"); document.write(\"COG_Z:\"+COG.Item(2).toFixed(2)+\" \"); try { document.write(\"Current Directory: \"+currentDir); } catch (err) { alert (\"Exception occurred: \"+pfcGetExceptionType (err)); } assembly.Regenerate (void null); session.GetModelWindow (assembly).Repaint(); PTC Creo Parametric 程式組立 Pro/Web.Link 相關參考檔案","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/li-nian-xie-tong-chan-pin-she-ji-shi-xi-ke-cheng-nei-rong-zheng-li.html"},{"title":"使用 flask-cors 延伸模組","text":"在 網際跨來源資源共享 2D 零件繪圖 中, 我們已經利用 flask 的 make_response 送出跨網址 ajax 導入資源的方法, 其中因為目前的 make_response 函式只能接受單一字串的 origins, 所以若需要同時支援 http://localhost:5000 與某一廣域的網址擷取程式段, 通常採用 response.headers['Access-Control-Allow-Origin'] = '*' 處理, 也就是允許所有的主機呼叫, 並使用對應函式所提供的 ajax 資源. 假如使用 flask 框架, 並且希望明確指定多台 ajax 資源共享的網址, 則可以使用 flask-cors 延伸模組 (這裡以 flask-cors 2.1.2 版為例). flask-cors 延伸模組的安裝共有三種情況: 假如是在 Windows 可攜 Python3 程式環境, 可以直接利用 pip install flask-cors 安裝. 假如是在 16.04 版之前的 Ubuntu (因為 Python2 與 Python3 共存),使用 必須使用 pip3 install flask-cors 安裝. 假如使用 OpenShift 雲端平台上的 Python3 應用程式, 則利用 setup.py 指定安裝 flask-cors 延伸模組. 實際操作時, 則必須先導入 flask.ext.cors 模組中的 cross_origin decorator 方法. from flask.ext.cors import cross_origin 然後在對應的協同繪圖函式中, 指定可以引用的網址, 例如, 允許 localhost 與 cdw2-ag100.rhcloud.com 擷取繪圖程式段的範例: # 畫 C 函式 @scrum1_task1.route('/scrum1_week8_c') @cross_origin(origins=['http://localhost', 'http://cdw2-ag100.rhcloud.com'], allow_headers=['Content-Type']) def week8_c(): outstring = ''' from javascript import JSConstructor from browser import alert from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea2\") cgo.setWorldCoords(-250, -250, 500, 500) # 畫軸線 cgo.drawAxes(0, 240, 0, 240, { \"strokeColor\":\"#aaaaaa\", \"fillColor\": \"#aaaaaa\", \"xTickInterval\": 20, \"xLabelInterval\": 20, \"yTickInterval\": 20, \"yLabelInterval\": 20}) deg = math.pi/180 # 將繪製鏈條輪廓的內容寫成 class 物件 class chain(): # 輪廓的外型設為成員變數 chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) # 利用鏈條起點與終點定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic(self, x1, y1, x2, y2, color=\"green\", border=True, linewidth=4, scale=1): self.x1 = x1 self.y1 = y1 self.x2 = x2 self.y2 = y2 self.color = color self.border = border self.linewidth = linewidth self.scale = scale # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(math.atan2(y2-y1, x2-x1)/deg+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, scale, 0) # 利用鏈條起點與旋轉角度定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic_rot(self, x1, y1, rot, color=\"green\", border=True, linewidth=4, scale=1): self.x1 = x1 self.y1 = y1 self.rot = rot self.color = color self.border = border self.linewidth = linewidth self.scale = scale # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 根據旋轉角度, 計算 x2 與 y2 x2 = x1 + 20*math.cos(rot*deg) y2 = y1 + 20*math.sin(rot*deg) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(rot+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, scale, 0) return x2, y2 # 利用 chain class 建立案例, 對應到 mychain 變數 mychain = chain() # 畫 C # 上半部 # 左邊中間垂直起點, 圓心位於線段中央, y 方向再向上平移兩個鏈條圓心距單位 x1, y1 = mychain.basic_rot(0+65*2, -10+10+20*math.sin(80*deg)+20*math.sin(30*deg), 90) # 上方轉 80 度 x2, y2 = mychain.basic_rot(x1, y1, 80) # 上方轉 30 度 x3, y3 = mychain.basic_rot(x2, y2, 30) # 上方水平 x4, y4 = mychain.basic_rot(x3, y3, 0) # 下半部, 從起點開始 -80 度 x5, y5 = mychain.basic_rot(0+65*2, -10+10+20*math.sin(80*deg)+20*math.sin(30*deg), -80) # 下斜 -30 度 x6, y6 = mychain.basic_rot(x5, y5, -30) # 下方水平單元 x7, y7 = mychain.basic_rot(x6, y6, -0, color=\"red\") ''' return outstring","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/shi-yong-flask-cors-yan-shen-mo-zu.html"},{"title":"網際跨來源資源共享 2D 零件繪圖","text":"跨來源資源共享 (Cross-Origin Resource Sharing): https://www.w3.org/TR/cors/ 機制是本地端從多個伺服器分別取得相關資源後, 以其中某一個伺服器的內容為主體進行近端程式執行的架構, 就協同機械設計流程而言, 可以應用在工程師與工程師之間的 2D 與 3D 零組件繪圖. 此地的 2D 零件繪圖以 Brython 加上 Cango Javascript 繪圖程式庫為例, 而 3D 零件繪圖則希望以 PTC Creo Parametric 的 Pro/Web.Link 二次開發進行練習. 以下將以 ag100 與 ladisai 等兩個網站的 2D 鏈條零件協同繪圖說明 Cross-Origin Resource Sharing 的用法. ag100 用戶對應的網站為 cdw2-ag100.rhcloud.com 而 ladisai 用戶對應的網站則為 cdw2-ladisai.rhcloud.com, 其中兩個網站都有 /ag100/scrum1_week8_abcd 繪圖函式, 其中 http://cdw2-ag100.rhcloud.com/ag100/scrum1_week8_abcd 零件繪圖, A 與 B 鏈條由 ag100 主體程式進行繪圖, 而 C 與 D 則交由 ladisai 用戶的網站提供. 因此 http://cdw2-ladisai.rhcloud.com/ag100/scrum1_week8_c 與 http://cdw2-ladisai.rhcloud.com/ag100/scrum1_week8_d 繪圖網站內容送出時, 必須指名可以讓 ag100 的對應網站進行跨來源呼叫, 也就是必須利用 flask 指定 response.headers['Access-Control-Allow-Origin'] = 'http://cdw2-ag100.rhcloud.com'. 利用瀏覽器開發工具檢視 http://cdw2-ladisai.rhcloud.com/ag100/scrum1_week8_c 所送出的 header 如下: 相同原理, http://cdw2-ladisai.rhcloud.com/ag100/scrum1_week8_abcd 零件繪圖, C 與 D 鏈條由 ladisai 主體程式進行繪圖, 而 A 與 B 則交由 ag100 用戶的網站提供, 因此, http://cdw2-ag100.rhcloud.com/ag100/scrum1_week8_a 與 http://cdw2-ag100.rhcloud.com/ag100/scrum1_week8_b 繪圖網站內容送出時, 必須指名可以讓 ladisai 的對應網站進行跨來源呼叫, 也就是必須利用 flask 指定 response.headers['Access-Control-Allow-Origin'] = 'http://cdw2-ladisai.rhcloud.com'. 利用瀏覽器開發工具檢視 http://cdw2-ag100.rhcloud.com/ag100/scrum1_week8_a 所送出的 header 如下: 以下就是 http://cdw2-ladisai.rhcloud.com/ag100/scrum1_week8_abcd 繪圖的對應原始碼: # on cdw2-ladisai.rhcloud.com @scrum1_task1.route('/scrum1_week8_abcd') def week8_abcd(): outstring = week8_main() #outstring += \" \" #outstring += \" \" outstring += \" \" outstring += \" \" outstring += \" \" outstring += \" \" outstring += week8_tail() return outstring 其中包含主體程式: # on cdw2-ladisai.rhcloud.com def week8_main(): outstring = ''' <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>網際 2D 繪圖</title> <!-- IE 9: display inline SVG --> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"> <script type=\"text/javascript\" src=\"http://brython.info/src/brython_dist.js\"></script> <script type=\"text/javascript\" src=\"http://cptocadp-2015fallhw.rhcloud.com/static/Cango-8v03.js\"></script> <script type=\"text/javascript\" src=\"http://cptocadp-2015fallhw.rhcloud.com/static/Cango2D-6v13.js\"></script> <script type=\"text/javascript\" src=\"http://cptocadp-2015fallhw.rhcloud.com/static/CangoAxes-1v33.js\"></script> </head> <body> <script> window.onload=function(){ brython(1); } </script> <canvas id=\"plotarea2\" width=\"800\" height=\"800\"></canvas> ''' return outstring 超文件收尾程式: # on cdw2-ladisai.rhcloud.com @scrum1_task1.route('/scrum1_week8_tail') def week8_tail(): return \"</body></html>\" ag100 網站繪製 A 的函式, 必須在標頭送出 response.headers['Access-Control-Allow-Origin'] = 'http://cdw2-ladisai.rhcloud.com', 才能讓 ladisai 網站跨來源呼叫. # on cdw2-ag100.rhcloud.com # 必須要 from flask import make_response @scrum1_task1.route('/scrum1_week8_a') def week8_a(): outstring = ''' from javascript import JSConstructor from browser import alert from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea2\") cgo.setWorldCoords(-250, -250, 500, 500) # 畫軸線 cgo.drawAxes(0, 240, 0, 240, { \"strokeColor\":\"#aaaaaa\", \"fillColor\": \"#aaaaaa\", \"xTickInterval\": 20, \"xLabelInterval\": 20, \"yTickInterval\": 20, \"yLabelInterval\": 20}) deg = math.pi/180 # 將繪製鏈條輪廓的內容寫成 class 物件 class chain(): # 輪廓的外型設為成員變數 chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) # 利用鏈條起點與終點定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic(self, x1, y1, x2, y2, color=\"green\", border=True, linewidth=4, scale=1): self.x1 = x1 self.y1 = y1 self.x2 = x2 self.y2 = y2 self.color = color self.border = border self.linewidth = linewidth self.scale = scale # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(math.atan2(y2-y1, x2-x1)/deg+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, scale, 0) # 利用鏈條起點與旋轉角度定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic_rot(self, x1, y1, rot, color=\"green\", border=True, linewidth=4, scale=1): self.x1 = x1 self.y1 = y1 self.rot = rot self.color = color self.border = border self.linewidth = linewidth self.scale = scale # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 根據旋轉角度, 計算 x2 與 y2 x2 = x1 + 20*math.cos(rot*deg) y2 = y1 + 20*math.sin(rot*deg) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(rot+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, scale, 0) return x2, y2 # 利用 chain class 建立案例, 對應到 mychain 變數 mychain = chain() # 畫 A # 左邊兩個垂直單元 x1, y1 = mychain.basic_rot(0, 0, 90) x2, y2 = mychain.basic_rot(x1, y1, 90) # 左斜邊兩個單元 x3, y3 = mychain.basic_rot(x2, y2, 80) x4, y4 = mychain.basic_rot(x3, y3, 71) # 最上方水平單元 x5, y5 = mychain.basic_rot(x4, y4, 0) # 右斜邊兩個單元 x6, y6 = mychain.basic_rot(x5, y5, -71) x7, y7 = mychain.basic_rot(x6, y6, -80) # 右邊兩個垂直單元 x8, y8 = mychain.basic_rot(x7, y7, -90) x9, y9 = mychain.basic_rot(x8, y8, -90) # 中間兩個水平單元 x10, y10 = mychain.basic_rot(x8, y8, -180) mychain.basic(x10, y10, x1, y1, color=\"red\") ''' response = make_response(outstring) response.headers['Access-Control-Allow-Headers'] = 'Content-Type' response.headers['Access-Control-Allow-Origin'] = 'http://cdw2-ladisai.rhcloud.com' response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE' response.headers['Access-Control-Max-Age'] = '86400' return response ag100 網站繪製 B 的函式, 必須在標頭送出 response.headers['Access-Control-Allow-Origin'] = 'http://cdw2-ladisai.rhcloud.com', 才能讓 ladisai 網站跨來源呼叫. # on cdw2-ag100.rhcloud.com # 必須要 from flask import make_response @scrum1_task1.route('/scrum1_week8_b') def week8_b(): outstring = ''' from javascript import JSConstructor from browser import alert from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea2\") cgo.setWorldCoords(-250, -250, 500, 500) # 畫軸線 cgo.drawAxes(0, 240, 0, 240, { \"strokeColor\":\"#aaaaaa\", \"fillColor\": \"#aaaaaa\", \"xTickInterval\": 20, \"xLabelInterval\": 20, \"yTickInterval\": 20, \"yLabelInterval\": 20}) deg = math.pi/180 # 將繪製鏈條輪廓的內容寫成 class 物件 class chain(): # 輪廓的外型設為成員變數 chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) # 利用鏈條起點與終點定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic(self, x1, y1, x2, y2, color=\"green\", border=True, linewidth=4, scale=1): self.x1 = x1 self.y1 = y1 self.x2 = x2 self.y2 = y2 self.color = color self.border = border self.linewidth = linewidth self.scale = scale # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(math.atan2(y2-y1, x2-x1)/deg+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, scale, 0) # 利用鏈條起點與旋轉角度定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic_rot(self, x1, y1, rot, color=\"green\", border=True, linewidth=4, scale=1): self.x1 = x1 self.y1 = y1 self.rot = rot self.color = color self.border = border self.linewidth = linewidth self.scale = scale # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 根據旋轉角度, 計算 x2 與 y2 x2 = x1 + 20*math.cos(rot*deg) y2 = y1 + 20*math.sin(rot*deg) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(rot+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, scale, 0) return x2, y2 # 利用 chain class 建立案例, 對應到 mychain 變數 mychain = chain() # 畫 B # 左邊四個垂直單元 x1, y1 = mychain.basic_rot(0+ 65, 0, 90) x2, y2 = mychain.basic_rot(x1, y1, 90) x3, y3 = mychain.basic_rot(x2, y2, 90) x4, y4 = mychain.basic_rot(x3, y3, 90) # 上方一個水平單元 x5, y5 = mychain.basic_rot(x4, y4, 0) # 右斜 -30 度 x6, y6 = mychain.basic_rot(x5, y5, -30) # 右上垂直向下單元 x7, y7 = mychain.basic_rot(x6, y6, -90) # 右斜 240 度 x8, y8 = mychain.basic_rot(x7, y7, 210) # 中間水平 mychain.basic(x8, y8, x2, y2) # 右下斜 -30 度 x10, y10 = mychain.basic_rot(x8, y8, -30) # 右下垂直向下單元 x11, y11 = mychain.basic_rot(x10, y10, -90) # 右下斜 240 度 x12, y12 = mychain.basic_rot(x11, y11, 210) # 水平接回起點 mychain.basic(x12,y12, 0, 0, color=\"red\") ''' response = make_response(outstring) response.headers['Access-Control-Allow-Headers'] = 'Content-Type' response.headers['Access-Control-Allow-Origin'] = 'http://cdw2-ladisai.rhcloud.com' response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE' response.headers['Access-Control-Max-Age'] = '86400' return response 最後, 配合送到 ag100 主機的 scrum1_task1.py 程式版本: https://github.com/2015fallhw/cdw2/blob/6aed4cad87f21317c1f337dcf4d1dfec9a06277c/users/s2a/g100/scrum1_task1.py , 與之前未採用跨主機的程式呼叫差異, 分別為從 flask 模組導入 make_response 函式, 以及透過 response 介入傳送特定 Cross-Origin Resources Sharing 所需的 headers.","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/wang-ji-kua-lai-yuan-zi-yuan-gong-xiang-2d-ling-jian-hui-tu.html"},{"title":"2016Spring 課程期中自評","text":"本學期各班課程將依照下列時程規劃, 完成所有學員的期中自評工作. 協同產品設計實習課程: 期中自評的任務描述: on kmolab 加上 on cdw2 wiki 的補充說明. 自評要求: 各學員自評分數與依據內容必須呈現在 http://2015fallhw.github.io/cdw2/ (自評查驗將透過 Tags->學員學號進行) 以及期限內所指定的即時試算表上 (2a 期限為 2016.04.25 (一) 下課前, 2b 期限為 2016.04.21 (四) 下課前, 期中成績將在 2016.04.29 (五) 中午前送出, 期中成績評定為不及格學員, 申請最後 review 期限為第十二週上課結束前). 各組員的自評內容必須包括: 自評成績, 期中報告操作流程介紹, 期中報告心得, 以及期中報告內容參考連結等. 網際內容管理: 期中自評的任務描述: 第七週到第九週自評 . 自評要求: 各學員自評分數與依據內容必須呈現在 http://wp-ladisai.rhcloud.com/ 以及期限內所指定的即時試算表上 (1a 期限為 2016.04.22 (五) 下課前, 期中成績將在 2016.04.29 (五) 中午前送出, 期中成績評定為不及格學員, 申請最後 review 期限為第十二週上課結束前). 各組員的自評內容必須包括: 自評成績, 期中報告操作流程介紹, 期中報告心得, 以及期中報告內容參考連結等.","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/2016spring-ke-cheng-qi-zhong-zi-ping.html"},{"title":"2D 鏈條零組件繪圖","text":"2D 鏈條輪廓繪圖的目的在讓學員了解如何透過數值運算與程式技巧, 完成產品開發流程中所被交付的零組件繪圖. 何謂 atan2() 函數？ Python3 物件導向 程式方法. <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>網際 2D 繪圖</title> <!-- IE 9: display inline SVG --> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"> <script type=\"text/javascript\" src=\"http://brython.info/src/brython_dist.js\"></script> <script type=\"text/javascript\" src=\"http://cptocadp-2015fallhw.rhcloud.com/static/Cango-8v03.js\"></script> <script type=\"text/javascript\" src=\"http://cptocadp-2015fallhw.rhcloud.com/static/Cango2D-6v13.js\"></script> <script type=\"text/javascript\" src=\"http://cptocadp-2015fallhw.rhcloud.com/static/CangoAxes-1v33.js\"></script> </head> <body> <script> window.onload=function(){ brython(1); } </script> <canvas id=\"plotarea2\" width=\"800\" height=\"800\"></canvas> <script type=\"text/python\"> from javascript import JSConstructor from browser import alert from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea2\") cgo.setWorldCoords(-250, -250, 500, 500) # 畫軸線 cgo.drawAxes(0, 240, 0, 240, { \"strokeColor\":\"#aaaaaa\", \"fillColor\": \"#aaaaaa\", \"xTickInterval\": 20, \"xLabelInterval\": 20, \"yTickInterval\": 20, \"yLabelInterval\": 20}) deg = math.pi/180 # 將繪製鏈條輪廓的內容寫成 class 物件 class chain(): # 輪廓的外型設為成員變數 chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) # 利用鏈條起點與終點定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic(self, x1, y1, x2, y2, color=\"green\", border=True, linewidth=4, scale=1): self.x1 = x1 self.y1 = y1 self.x2 = x2 self.y2 = y2 self.color = color self.border = border self.linewidth = linewidth self.scale = scale # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(math.atan2(y2-y1, x2-x1)/deg+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, scale, 0) # 利用鏈條起點與旋轉角度定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic_rot(self, x1, y1, rot, color=\"green\", border=True, linewidth=4, scale=1): self.x1 = x1 self.y1 = y1 self.rot = rot self.color = color self.border = border self.linewidth = linewidth self.scale = scale # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 根據旋轉角度, 計算 x2 與 y2 x2 = x1 + 20*math.cos(rot*deg) y2 = y1 + 20*math.sin(rot*deg) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(rot+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, scale, 0) return x2, y2 # 利用 chain class 建立案例, 對應到 mychain 變數 mychain = chain() # 畫 A # 左邊兩個垂直單元 x1, y1 = mychain.basic_rot(0, 0, 90) x2, y2 = mychain.basic_rot(x1, y1, 90) # 左斜邊兩個單元 x3, y3 = mychain.basic_rot(x2, y2, 80) x4, y4 = mychain.basic_rot(x3, y3, 71) # 最上方水平單元 x5, y5 = mychain.basic_rot(x4, y4, 0) # 右斜邊兩個單元 x6, y6 = mychain.basic_rot(x5, y5, -71) x7, y7 = mychain.basic_rot(x6, y6, -80) # 右邊兩個垂直單元 x8, y8 = mychain.basic_rot(x7, y7, -90) x9, y9 = mychain.basic_rot(x8, y8, -90) # 中間兩個水平單元 x10, y10 = mychain.basic_rot(x8, y8, -180) mychain.basic(x10, y10, x1, y1, color=\"red\") # 畫 B # 左邊四個垂直單元 x1, y1 = mychain.basic_rot(0+ 65, 0, 90) x2, y2 = mychain.basic_rot(x1, y1, 90) x3, y3 = mychain.basic_rot(x2, y2, 90) x4, y4 = mychain.basic_rot(x3, y3, 90) # 上方一個水平單元 x5, y5 = mychain.basic_rot(x4, y4, 0) # 右斜 -30 度 x6, y6 = mychain.basic_rot(x5, y5, -30) # 右上垂直向下單元 x7, y7 = mychain.basic_rot(x6, y6, -90) # 右斜 240 度 x8, y8 = mychain.basic_rot(x7, y7, 210) # 中間水平 mychain.basic(x8, y8, x2, y2) # 右下斜 -30 度 x10, y10 = mychain.basic_rot(x8, y8, -30) # 右下垂直向下單元 x11, y11 = mychain.basic_rot(x10, y10, -90) # 右下斜 240 度 x12, y12 = mychain.basic_rot(x11, y11, 210) # 水平接回起點 mychain.basic(x12,y12, 0, 0, color=\"red\") # 畫 C # 上半部 # 左邊中間垂直起點, 圓心位於線段中央, y 方向再向上平移兩個鏈條圓心距單位 x1, y1 = mychain.basic_rot(0+65*2, -10+10+20*math.sin(80*deg)+20*math.sin(30*deg), 90) # 上方轉 80 度 x2, y2 = mychain.basic_rot(x1, y1, 80) # 上方轉 30 度 x3, y3 = mychain.basic_rot(x2, y2, 30) # 上方水平 x4, y4 = mychain.basic_rot(x3, y3, 0) # 下半部, 從起點開始 -80 度 x5, y5 = mychain.basic_rot(0+65*2, -10+10+20*math.sin(80*deg)+20*math.sin(30*deg), -80) # 下斜 -30 度 x6, y6 = mychain.basic_rot(x5, y5, -30) # 下方水平單元 x7, y7 = mychain.basic_rot(x6, y6, -0, color=\"red\") # 畫 D # 左邊四個垂直單元 x1, y1 = mychain.basic_rot(0+65*3, 0, 90) x2, y2 = mychain.basic_rot(x1, y1, 90) x3, y3 = mychain.basic_rot(x2, y2, 90) x4, y4 = mychain.basic_rot(x3, y3, 90) # 上方一個水平單元 x5, y5 = mychain.basic_rot(x4, y4, 0) # 右斜 -40 度 x6, y6 = mychain.basic_rot(x5, y5, -40) x7, y7 = mychain.basic_rot(x6, y6, -60) # 右中垂直向下單元 x8, y8 = mychain.basic_rot(x7, y7, -90) # -120 度 x9, y9 = mychain.basic_rot(x8, y8, -120) # -140 x10, y10 = mychain.basic_rot(x9, y9, -140) # 水平接回原點 mychain.basic(x10, y10, 0+65*3, 0, color=\"red\") </script> </body> </html> 繪圖結果如下: window.onload=function(){ brython(1); } from browser import alert from browser import window import math cango = window.Cango.new cobj = window.Cobj.new shapedefs = window.shapeDefs obj2d = window.Obj2D.new cgo = cango(\"plotarea2\") cgo.setGridboxRHC(10, 10, 100, 100) cgo.fillGridbox(\"lightyellow\") cgo.setWorldCoords(-10, -10, 300, 300) # 畫軸線 cgo.drawAxes(0, 240, 0, 240, { \"strokeColor\":\"#aaaaaa\", \"fillColor\": \"#aaaaaa\", \"xTickInterval\": 20, \"xLabelInterval\": 20, \"yTickInterval\": 20, \"yLabelInterval\": 20}) deg = math.pi/180 # 將繪製鏈條輪廓的內容寫成 class 物件 class chain(): # 輪廓的外型設為成員變數 chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) # 利用鏈條起點與終點定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic(self, x1, y1, x2, y2, color=\"green\", border=True, linewidth=4, scale=1): self.x1 = x1 self.y1 = y1 self.x2 = x2 self.y2 = y2 self.color = color self.border = border self.linewidth = linewidth self.scale = scale # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(math.atan2(y2-y1, x2-x1)/deg+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, scale, 0) # 利用鏈條起點與旋轉角度定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic_rot(self, x1, y1, rot, color=\"green\", border=True, linewidth=4, scale=1): self.x1 = x1 self.y1 = y1 self.rot = rot self.color = color self.border = border self.linewidth = linewidth self.scale = scale # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 根據旋轉角度, 計算 x2 與 y2 x2 = x1 + 20*math.cos(rot*deg) y2 = y1 + 20*math.sin(rot*deg) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(rot+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, scale, 0) return x2, y2 # 利用 chain class 建立案例, 對應到 mychain 變數 mychain = chain() # 畫 A # 左邊兩個垂直單元 x1, y1 = mychain.basic_rot(0, 0, 90) x2, y2 = mychain.basic_rot(x1, y1, 90) # 左斜邊兩個單元 x3, y3 = mychain.basic_rot(x2, y2, 80) x4, y4 = mychain.basic_rot(x3, y3, 71) # 最上方水平單元 x5, y5 = mychain.basic_rot(x4, y4, 0) # 右斜邊兩個單元 x6, y6 = mychain.basic_rot(x5, y5, -71) x7, y7 = mychain.basic_rot(x6, y6, -80) # 右邊兩個垂直單元 x8, y8 = mychain.basic_rot(x7, y7, -90) x9, y9 = mychain.basic_rot(x8, y8, -90) # 中間兩個水平單元 x10, y10 = mychain.basic_rot(x8, y8, -180) mychain.basic(x10, y10, x1, y1, color=\"red\") # 畫 B # 左邊四個垂直單元 x1, y1 = mychain.basic_rot(0+ 65, 0, 90) x2, y2 = mychain.basic_rot(x1, y1, 90) x3, y3 = mychain.basic_rot(x2, y2, 90) x4, y4 = mychain.basic_rot(x3, y3, 90) # 上方一個水平單元 x5, y5 = mychain.basic_rot(x4, y4, 0) # 右斜 -30 度 x6, y6 = mychain.basic_rot(x5, y5, -30) # 右上垂直向下單元 x7, y7 = mychain.basic_rot(x6, y6, -90) # 右斜 240 度 x8, y8 = mychain.basic_rot(x7, y7, 210) # 中間水平 mychain.basic(x8, y8, x2, y2) # 右下斜 -30 度 x10, y10 = mychain.basic_rot(x8, y8, -30) # 右下垂直向下單元 x11, y11 = mychain.basic_rot(x10, y10, -90) # 右下斜 240 度 x12, y12 = mychain.basic_rot(x11, y11, 210) # 水平接回起點 mychain.basic(x12,y12, 0, 0, color=\"red\") # 畫 C # 上半部 # 左邊中間垂直起點, 圓心位於線段中央, y 方向再向上平移兩個鏈條圓心距單位 x1, y1 = mychain.basic_rot(0+65*2, -10+10+20*math.sin(80*deg)+20*math.sin(30*deg), 90) # 上方轉 80 度 x2, y2 = mychain.basic_rot(x1, y1, 80) # 上方轉 30 度 x3, y3 = mychain.basic_rot(x2, y2, 30) # 上方水平 x4, y4 = mychain.basic_rot(x3, y3, 0) # 下半部, 從起點開始 -80 度 x5, y5 = mychain.basic_rot(0+65*2, -10+10+20*math.sin(80*deg)+20*math.sin(30*deg), -80) # 下斜 -30 度 x6, y6 = mychain.basic_rot(x5, y5, -30) # 下方水平單元 x7, y7 = mychain.basic_rot(x6, y6, -0, color=\"red\") # 畫 D # 左邊四個垂直單元 x1, y1 = mychain.basic_rot(0+65*3, 0, 90) x2, y2 = mychain.basic_rot(x1, y1, 90) x3, y3 = mychain.basic_rot(x2, y2, 90) x4, y4 = mychain.basic_rot(x3, y3, 90) # 上方一個水平單元 x5, y5 = mychain.basic_rot(x4, y4, 0) # 右斜 -40 度 x6, y6 = mychain.basic_rot(x5, y5, -40) x7, y7 = mychain.basic_rot(x6, y6, -60) # 右中垂直向下單元 x8, y8 = mychain.basic_rot(x7, y7, -90) # -120 度 x9, y9 = mychain.basic_rot(x8, y8, -120) # -140 x10, y10 = mychain.basic_rot(x9, y9, -140) # 水平接回原點 mychain.basic(x10, y10, 0+65*3, 0, color=\"red\") 將上述程式拆解成 scrum1 與 scrum2 兩人協同繪圖的結果: http://cdw2-ag100.rhcloud.com/ag100/scrum1_week8_abc 與 http://cdw2-ladisai.rhcloud.com/ag100/scrum1_week8_abc 版本程式的 scrum1_task1.py: https://github.com/2015fallhw/cdw2/blob/6622e2381ebb3c6f1116e5bf63096a8d74122ec7/users/s2a/g100/scrum1_task1.py 版本程式的 scrum2_task2.py: https://github.com/2015fallhw/cdw2/blob/6622e2381ebb3c6f1116e5bf63096a8d74122ec7/users/s2a/g100/scrum2_task1.py","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/2d-lian-tiao-ling-zu-jian-hui-tu.html"},{"title":"協同產品設計實習期中報告","text":"2016spring 的協同產品設計課程, 導入了 git 版次管理的 collaborator (各組組長) 與 pull request (各組組員)協同模式, 由於 Github 提供了免費的多人協同方案, 讓兩班 133 名學員(2a: 62, 2b: 71)可以各自在本地端與遠端的倉儲分支資料中進行改版. 從 協同產品設計實習課程 tag 可以查閱與協同產品設計實習有關的頁面, 期中報告內容 ( cdw2 倉儲 wiki ) 則包含 2D/3D 鏈條零組件的繪圖, 2D 零件繪圖以 Cango 繪圖程式庫 與 Brython 程式語言 為主, 實際的繪圖程式採用 Flask 框架 , 可以在近端與 Openshift 雲端 平台上執行繪圖. 至於 3D 零組件繪圖則要求在 Onshape 雲端 CAD 系統中完成. 以下為期中報告的任務 (Task 1) 執行參考流程: 網際協同 2D 零組件繪圖: 計算鏈條輪廓圓弧相切點座標 以下符號式運算使用 sympy, 並且能夠直接在 Jupyter hub 環境中執行, 若 隨身 Python3 程式環境 無 sympy 模組, 可以 pip install sympy 安裝. 假設上方圓弧圓心位於原點, 且鏈條輪廓上下垂直沒有轉角. \\((x1, y1)\\) 設為左側圓弧的圓心座標, \\((x2, y2)\\) 則為上方圓弧與左側圓弧的相切點座標, \\((x3, y3)\\) 則為下方圓弧與左側圓弧的相切點座標. \\((x2-0)**2 + (y2-0)**2 - 7*7 = 0\\) , 表示 \\((x2, y2)\\) 位於圓心 (0, 0), 半徑 7 的圓上. \\((x1-x2)**2+(y1-y2)**2 -40**2 = 0\\) , 表示 \\((x2, y2)\\) 也同時位於圓心 \\((x1, y1)\\) , 半徑 40 的圓上. \\((x1-x3)**2+(y1-y3)**2 -40**2 = 0\\) , 表示 \\((x3, y3)\\) 位於圓心 \\((x1, y1)\\) , 半徑 40 的圓上. \\((x1-0)**2+(y1-0)**2 -47**2 = 0\\) , 表示 \\((x1, y1)\\) 與 (0, 0) 兩個圓弧的圓心距離為 (40+7). \\((x1)**2+(y1+20)**2 -47**2 = 0\\) , 表示 \\((x1, y1)\\) 與 (0, -20) 兩個圓弧的圓心距離也是 (40+7). \\(x2 - x3 = 0\\) , 表示鏈條輪廓上下垂直沒有轉角, 所以 \\(x2 = x3\\) . from sympy import * # center ot radius 40 x1 = Symbol('x1') y1 = Symbol('y1') # upper tangent point x2 = Symbol('x2') y2 = Symbol('y2') # lower tangent point x3 = Symbol('x3') y3 = Symbol('y3') answer = solve([(x2-0)**2 + (y2-0)**2 - 7*7, (x1-x2)**2+(y1-y2)**2 -40**2, (x1-x3)**2+(y1-y3)**2 -40**2, (x1)**2+(y1)**2 -47**2, \\ (x1)**2+(y1+20)**2 -47**2, x2 -x3], [x1, y1, x2, y2, x3, y3]) group = 1 for i in answer: try: g.es(\"group\", group, \":\") except: print(\"group\", group, \":\") for j in i: try: g.es(j.evalf(5)) except: print(j.evalf(5)) group += 1 計算出的結果: 左邊半徑 40 的圓心座標 (-45.924, -10.000) 左上方的切點座標 (-6.8397, -1.4894) 左下方的切點座標 (-6.8397, -18.511) 右邊半徑 40 的圓心座標 (45.924, -10.000) 右上方切點座標 (6.8397, -1.4894) 右下方切點座標 (6.8397, -18.511) 根據四個切點的座標, 利用 Cango 與 Brython 完成單一鍊條輪廓繪圖: <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>網際 2D 繪圖</title> <!-- IE 9: display inline SVG --> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"> <script type=\"text/javascript\" src=\"http://brython.info/src/brython_dist.js\"></script> <script type=\"text/javascript\" src=\"http://cptocadp-2015fallhw.rhcloud.com/static/Cango-8v03.js\"></script> <script type=\"text/javascript\" src=\"http://cptocadp-2015fallhw.rhcloud.com/static/Cango2D-6v13.js\"></script> <script type=\"text/javascript\" src=\"http://cptocadp-2015fallhw.rhcloud.com/static/CangoAxes-1v33.js\"></script> </head> <body> <script> window.onload=function(){ brython(1); } </script> <canvas id=\"plotarea\" width=\"800\" height=\"800\"></canvas> <script type=\"text/python\"> from javascript import JSConstructor from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea\") cgo.setWorldCoords(-250, -250, 500, 500) # 決定要不要畫座標軸線 cgo.drawAxes(0, 240, 0, 240, { \"strokeColor\":\"#aaaaaa\", \"fillColor\": \"#aaaaaa\", \"xTickInterval\": 20, \"xLabelInterval\": 20, \"yTickInterval\": 20, \"yLabelInterval\": 20}) deg = math.pi/180 def O(x, y, rx, ry, rot, color, border, linewidth): # 旋轉必須要針對相對中心 rot not working yet chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) cmbr = cobj(cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 放大 5 倍 cgo.render(cmbr, x, y, 5, rot) O(0, 0, 0, 0, 0, \"lightyellow\", True, 4) # 準備標示出4個點的座標 (放大 5 倍) cgo.drawText(\"各點的座標值放大5倍\", (-6.8397*5)-50, (-1.4894*5)+20, {\"fontSize\": 12, \"fontWeight\": 1200, \"lorg\":5 }) # 左上角點 cgo.drawText(\"(-6.8397, -1.4894)\", (-6.8397*5)-50, (-1.4894*5), {\"fontSize\": 12, \"fontWeight\": 1200, \"lorg\":5 }) cgo.drawShape(shapedefs.circle(4), (-6.8397*5), (-1.4894*5), {\"fillColor\": \"red\"}) # 右上角點 cgo.drawText(\"(6.8397, -1.4894)\", (6.8397*5)+50, (-1.4894*5)+20, {\"fontSize\": 12, \"fontWeight\": 1200, \"lorg\":5 }) cgo.drawShape(shapedefs.circle(4), (6.8397*5), (-1.4894*5), {\"fillColor\": \"red\"}) # 左下角點 cgo.drawText(\"(-6.8397, -18.511)\", (-6.8397*5)-50, (-18.511*5), {\"fontSize\": 12, \"fontWeight\": 1200, \"lorg\":5 }) cgo.drawShape(shapedefs.circle(4), (-6.8397*5), (-18.511*5), {\"fillColor\": \"red\"}) # 右下角點 cgo.drawText(\"(6.8397, -18.511)\", (6.8397*5)+50, (-18.511*5), {\"fontSize\": 12, \"fontWeight\": 1200, \"lorg\":5 }) cgo.drawShape(shapedefs.circle(4), (6.8397*5), (-18.511*5), {\"fillColor\": \"red\"}) </script> </body> </html> 繪圖結果如下: window.onload=function(){ brython(1); } from javascript import JSConstructor from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea\") cgo.setWorldCoords(-250, -250, 500, 500) # 決定要不要畫座標軸線 cgo.drawAxes(0, 240, 0, 240, { \"strokeColor\":\"#aaaaaa\", \"fillColor\": \"#aaaaaa\", \"xTickInterval\": 20, \"xLabelInterval\": 20, \"yTickInterval\": 20, \"yLabelInterval\": 20}) deg = math.pi/180 def O(x, y, rx, ry, rot, color, border, linewidth): chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) cmbr = cobj(cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 放大 5 倍 cgo.render(cmbr, x, y, 5, rot) O(0, 0, 0, 0, 0, \"lightyellow\", True, 4) # 準備標示出4個點的座標 (放大 5 倍) cgo.drawText(\"各點的座標值放大5倍\", (-6.8397*5)-50, (-1.4894*5)+20, {\"fontSize\": 12, \"fontWeight\": 1200, \"lorg\":5 }) # 左上角點 cgo.drawText(\"(-6.8397, -1.4894)\", (-6.8397*5)-50, (-1.4894*5), {\"fontSize\": 12, \"fontWeight\": 1200, \"lorg\":5 }) cgo.drawShape(shapedefs.circle(4), (-6.8397*5), (-1.4894*5), {\"fillColor\": \"red\"}) # 右上角點 cgo.drawText(\"(6.8397, -1.4894)\", (6.8397*5)+50, (-1.4894*5)+20, {\"fontSize\": 12, \"fontWeight\": 1200, \"lorg\":5 }) cgo.drawShape(shapedefs.circle(4), (6.8397*5), (-1.4894*5), {\"fillColor\": \"red\"}) # 左下角點 cgo.drawText(\"(-6.8397, -18.511)\", (-6.8397*5)-50, (-18.511*5), {\"fontSize\": 12, \"fontWeight\": 1200, \"lorg\":5 }) cgo.drawShape(shapedefs.circle(4), (-6.8397*5), (-18.511*5), {\"fillColor\": \"red\"}) # 右下角點 cgo.drawText(\"(6.8397, -18.511)\", (6.8397*5)+50, (-18.511*5), {\"fontSize\": 12, \"fontWeight\": 1200, \"lorg\":5 }) cgo.drawShape(shapedefs.circle(4), (6.8397*5), (-18.511*5), {\"fillColor\": \"red\"}) 上述 2D 鏈條輪廓繪圖因為採用 Cango 與 Brython, 可以直接利用 Javascript 在 html 網頁上執行繪圖, 此特點與 PTC Creo Parametric 中的 Pro/Web.Link 3D 零組件繪圖模式相同, 但是為了要能夠利用雲端網際環境進行協同, 還必須要透過 Web Server based 的 Python3 wsgi 程式來派送 2D 與 3D 零組件的繪圖 (也可以採用 Java, Node.js 或其他 Web Server based 的程式方法完成). 這裡的 Web Based Server 程式採用 Python3 與 Flask, 並且可以在近端與 Openshift 雲端派送上述的 2D 鏈條輪廓繪圖, 而此一協同架構隨後將應用到 PTC Creo Parametric 中的 Pro/Web.Link 3D 零組件繪圖, 比較不同的是, 在 Windows 環境下, Pro/Web.Link 的執行只能在嵌入式的 IE 瀏覽器中執行, 而且無法與支援較新 Javascript 版本的 Brython 結合. 換言之, 隨後的 Pro/Web.Link 3D 零組件繪圖, 必須採用純 Javascript 程式, 而且只能在 Creo Parametric 的嵌入式 IE 中執行. Github cdw2 倉儲協同規劃 接下來, 為了要能夠在 Github 倉儲中實現近端與 Openshift 平台上的 Python3 Flask wsgi 程式 2D 零組件繪圖, 同時利用 Github Pages 來集結各組所完成的期中報告結果, 我們決定要將 cdw2 倉儲分為 master 與 gh-pages 的分支版本, 而且不可合併. cdw2 的 master 可以直接在近端完成 2D 零組件繪圖, 而且同一組程式將利用 git remote add 由各組組員送到各自的 Openshift Python3 應用程式上執行, 而且各組員所完成的期中報告結果, 可以利用 cdw2 倉儲中的 gh-pages 分支, 以 Pelican 靜態網誌 的架構執行協同內容管理. 2D 零組件協同繪圖 (注意畫布名稱必須與上列繪圖名稱不同): <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>網際 2D 繪圖</title> <!-- IE 9: display inline SVG --> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"> <script type=\"text/javascript\" src=\"http://brython.info/src/brython_dist.js\"></script> <script type=\"text/javascript\" src=\"http://cptocadp-2015fallhw.rhcloud.com/static/Cango-8v03.js\"></script> <script type=\"text/javascript\" src=\"http://cptocadp-2015fallhw.rhcloud.com/static/Cango2D-6v13.js\"></script> <script type=\"text/javascript\" src=\"http://cptocadp-2015fallhw.rhcloud.com/static/CangoAxes-1v33.js\"></script> </head> <body> <script> window.onload=function(){ brython(1); } </script> <canvas id=\"plotarea2\" width=\"800\" height=\"600\"></canvas> <script type=\"text/python\"> from javascript import JSConstructor from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea2\") cgo.setWorldCoords(-250, -250, 500, 500) # 決定要不要畫座標軸線 cgo.drawAxes(0, 240, 0, 240, { \"strokeColor\":\"#aaaaaa\", \"fillColor\": \"#aaaaaa\", \"xTickInterval\": 20, \"xLabelInterval\": 20, \"yTickInterval\": 20, \"yLabelInterval\": 20}) deg = math.pi/180 def O(x, y, rx, ry, rot, color, border, linewidth): # 旋轉必須要針對相對中心 rot not working yet chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) cmbr = cobj(cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 放大 5 倍 cgo.render(cmbr, x, y, 5, rot) O(0, 0, 0, 0, 0, \"red\", True, 4) </script> <!-- 以下為第2位組員的零件繪圖 --> <script type=\"text/python\"> from javascript import JSConstructor from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea2\") cgo.setWorldCoords(-250, -250, 500, 500) deg = math.pi/180 def O2(x, y, rx, ry, rot, color, border, linewidth): # 旋轉必須要針對相對中心 rot not working yet chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) cmbr = cobj(cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # basic1 轉 120 度 basic1.rotate(120) # 放大 5 倍 cgo.render(basic1, x, y, 5, rot) O2(0, 0, 0, 0, 0, \"blue\", True, 4) </script> <!-- 以下為第3位組員的零件繪圖 --> <script type=\"text/python\"> from javascript import JSConstructor from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea2\") cgo.setWorldCoords(-250, -250, 500, 500) deg = math.pi/180 def O3(x, y, rx, ry, rot, color, border, linewidth): # 旋轉必須要針對相對中心 rot not working yet chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) cmbr = cobj(cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # basic1 轉 90 度 basic1.rotate(90) # 平移到 O2 的鏈條端點 basic1.translate(20*math.cos(30*deg), 20*math.sin(30*deg)) # 放大 5 倍 cgo.render(basic1, x, y, 5, rot) O3(0, 0, 0, 0, 0, \"green\", True, 4) </script> </body> </html> 2D 協同繪圖結果如下: from javascript import JSConstructor from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea2\") cgo.setWorldCoords(-250, -250, 500, 500) # 決定要不要畫座標軸線 cgo.drawAxes(0, 240, 0, 240, { \"strokeColor\":\"#aaaaaa\", \"fillColor\": \"#aaaaaa\", \"xTickInterval\": 20, \"xLabelInterval\": 20, \"yTickInterval\": 20, \"yLabelInterval\": 20}) deg = math.pi/180 def O(x, y, rx, ry, rot, color, border, linewidth): # 旋轉必須要針對相對中心 rot not working yet chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) cmbr = cobj(cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 放大 5 倍 cgo.render(cmbr, x, y, 5, rot) O(0, 0, 0, 0, 0, \"red\", True, 4) from javascript import JSConstructor from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea2\") cgo.setWorldCoords(-250, -250, 500, 500) deg = math.pi/180 def O2(x, y, rx, ry, rot, color, border, linewidth): # 旋轉必須要針對相對中心 rot not working yet chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) cmbr = cobj(cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # basic1 轉 120 度 basic1.rotate(120) # 放大 5 倍 cgo.render(basic1, x, y, 5, rot) O2(0, 0, 0, 0, 0, \"blue\", True, 4) from javascript import JSConstructor from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea2\") cgo.setWorldCoords(-250, -250, 500, 500) deg = math.pi/180 def O3(x, y, rx, ry, rot, color, border, linewidth): # 旋轉必須要針對相對中心 rot not working yet chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) cmbr = cobj(cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # basic1 轉 90 度 basic1.rotate(90) # 平移到 O2 的鏈條端點 basic1.translate(20*math.cos(30*deg), 20*math.sin(30*deg)) # 放大 5 倍 cgo.render(basic1, x, y, 5, rot) O3(0, 0, 0, 0, 0, \"green\", True, 4) 完成上述 2D 零組件協同繪圖後, 各組組長就可以直接將 cdw2 master 分支上的 wsgi 程式, 先在本地端測試無誤後, 再提交推送到 2015fallhw/cdw2, 若為組員則需透過 pull request, 以拉回請求的方式, 要求組長將 master 分支上的 wsgi 改版資料, 設法合併到 2015fallhw/cdw2 倉儲中. 這裡利用 scrum1 示範帳號, 將上述 2D 零組件繪圖程式提交推送到 2015fallhw/cdw2 後, 再利用 git remote add openshift ssh://123e6d7b22d5271fb220000c9@cdw2-ladisai.rhcloud.com/~/git/cdw2.git/, 透過 /home/.ssh/id_rsa 中 OpenSSL 格式的 private key, 與 Openshift 應用程式上 settings 中的 public key 對應, 取得權限後, 以 git push openshift 將 cdw2 master 的資料送到 Openshift 平台上執行, 所得結果為: http://cdw2-ladisai.rhcloud.com/ag100/scrum1_demo1 http://cdw2-ladisai.rhcloud.com/ag100/scrum1_demo2 http://cdw2-ladisai.rhcloud.com/ag100/scrum1_demo3 所對應的 2015fallhw/cdw2 提交版本為: https://github.com/2015fallhw/cdw2/tree/92ccd643061f2fb43030a9423c825f425963d481 scrum1_task1.py 版本為: https://github.com/2015fallhw/cdw2/blob/92ccd643061f2fb43030a9423c825f425963d481/users/s2a/g100/scrum1_task1.py scrum2_task1.py 版本則為: https://github.com/2015fallhw/cdw2/blob/92ccd643061f2fb43030a9423c825f425963d481/users/s2a/g100/scrum2_task1.py 最後, 當各組員首次建立 Openshift 平台上與 2015fallhw/cdw2 倉儲 master 分支對應的 wsgi 應用程式時, 可以將 https://github.com/2015fallhw/cdw2.git 列為該應用程式的原始碼, 當 2015fallhw/cdw2 倉儲 master 分支版本不斷改版後, 各組員可以利用類似 git clone ssh://123e6d7b22d5271fb220000c9@cdw2-ladisai.rhcloud.com/~/git/cdw2.git/ cdw2_openshift 將倉儲資料 clone 到近端後, 進入 cdw2_openshift 目錄後, 以 git rm -rf * 將所有先前的版本內容全數刪除後, 再放入 2015fallhw/cdw2 倉儲 master 分支中的最新版本資料後, 以 git add -A, git commit -m \"提交訊息\", git push 等提交與推送指令, 將 wsgi 程式送到對應的 Openshift 平台應用程式上執行, 每次各組有新的對應程式改版後, 再採用相同模式更新 Openshift 平台上的程式版本, 避免在 Openshift 對應倉儲中處理衝突問題. 2D 鏈條繪圖範例 from javascript import JSConstructor from browser import alert from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea3\") cgo.setGridboxRHC(10, 10, 100, 100) cgo.fillGridbox(\"lightyellow\") cgo.setWorldCoords(-10, -10, 300, 300) # 畫軸線 cgo.drawAxes(0, 240, 0, 240, { \"strokeColor\":\"#aaaaaa\", \"fillColor\": \"#aaaaaa\", \"xTickInterval\": 20, \"xLabelInterval\": 20, \"yTickInterval\": 20, \"yLabelInterval\": 20}) deg = math.pi/180 # 將繪製鏈條輪廓的內容寫成 class 物件 class chain(): # 輪廓的外型設為成員變數 chamber = \"M -6.8397, -1.4894 \\ A 7, 7, 0, 1, 0, 6.8397, -1.4894 \\ A 40, 40, 0, 0, 1, 6.8397, -18.511 \\ A 7, 7, 0, 1, 0, -6.8397, -18.511 \\ A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) # 利用鏈條起點與終點定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic(self, x1, y1, x2, y2, color=\"green\", border=True, linewidth=4, scale=1): self.x1 = x1 self.y1 = y1 self.x2 = x2 self.y2 = y2 self.color = color self.border = border self.linewidth = linewidth self.scale = scale # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(math.atan2(y2-y1, x2-x1)/deg+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, scale, 0) # 利用鏈條起點與旋轉角度定義繪圖, 使用內定的 color, border 與 linewidth 變數 def basic_rot(self, x1, y1, rot, color=\"green\", border=True, linewidth=4, scale=1): self.x1 = x1 self.y1 = y1 self.rot = rot self.color = color self.border = border self.linewidth = linewidth self.scale = scale # 注意, cgo.Chamber 為成員變數 cmbr = cobj(self.cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"tan\", \"lineWidth\": linewidth }) # hole 為原點位置 hole = cobj(shapedefs.circle(4), \"PATH\") cmbr.appendPath(hole) # 根據旋轉角度, 計算 x2 與 y2 x2 = x1 + 20*math.cos(rot*deg) y2 = y1 + 20*math.sin(rot*deg) # 複製 cmbr, 然後命名為 basic1 basic1 = cmbr.dup() # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角 basic1.rotate(rot+90) # 放大 scale 倍 cgo.render(basic1, x1, y1, scale, 0) return x2, y2 # 利用 chain class 建立案例, 對應到 mychain 變數 mychain = chain() # 畫 A # 左邊兩個垂直單元 x1, y1 = mychain.basic_rot(0, 0, 90) x2, y2 = mychain.basic_rot(x1, y1, 90) # 左斜邊兩個單元 x3, y3 = mychain.basic_rot(x2, y2, 80) x4, y4 = mychain.basic_rot(x3, y3, 71) # 最上方水平單元 x5, y5 = mychain.basic_rot(x4, y4, 0) # 右斜邊兩個單元 x6, y6 = mychain.basic_rot(x5, y5, -71) x7, y7 = mychain.basic_rot(x6, y6, -80) # 右邊兩個垂直單元 x8, y8 = mychain.basic_rot(x7, y7, -90) x9, y9 = mychain.basic_rot(x8, y8, -90) # 中間兩個水平單元 x10, y10 = mychain.basic_rot(x8, y8, -180) mychain.basic(x10, y10, x1, y1, color=\"red\") # 畫 B # 左邊四個垂直單元 x1, y1 = mychain.basic_rot(0+ 65, 0, 90) x2, y2 = mychain.basic_rot(x1, y1, 90) x3, y3 = mychain.basic_rot(x2, y2, 90) x4, y4 = mychain.basic_rot(x3, y3, 90) # 上方一個水平單元 x5, y5 = mychain.basic_rot(x4, y4, 0) # 右斜 -30 度 x6, y6 = mychain.basic_rot(x5, y5, -30) # 右上垂直向下單元 x7, y7 = mychain.basic_rot(x6, y6, -90) # 右斜 240 度 x8, y8 = mychain.basic_rot(x7, y7, 210) # 中間水平 mychain.basic(x8, y8, x2, y2) # 右下斜 -30 度 x10, y10 = mychain.basic_rot(x8, y8, -30) # 右下垂直向下單元 x11, y11 = mychain.basic_rot(x10, y10, -90) # 右下斜 240 度 x12, y12 = mychain.basic_rot(x11, y11, 210) # 水平接回起點 mychain.basic(x12,y12, 0, 0, color=\"red\") # 畫 C # 上半部 # 左邊中間垂直起點, 圓心位於線段中央, y 方向再向上平移兩個鏈條圓心距單位 x1, y1 = mychain.basic_rot(0+65*2, -10+10+20*math.sin(80*deg)+20*math.sin(30*deg), 90) # 上方轉 80 度 x2, y2 = mychain.basic_rot(x1, y1, 80) # 上方轉 30 度 x3, y3 = mychain.basic_rot(x2, y2, 30) # 上方水平 x4, y4 = mychain.basic_rot(x3, y3, 0) # 下半部, 從起點開始 -80 度 x5, y5 = mychain.basic_rot(0+65*2, -10+10+20*math.sin(80*deg)+20*math.sin(30*deg), -80) # 下斜 -30 度 x6, y6 = mychain.basic_rot(x5, y5, -30) # 下方水平單元 x7, y7 = mychain.basic_rot(x6, y6, -0, color=\"red\") # 畫 D # 左邊四個垂直單元 x1, y1 = mychain.basic_rot(0+65*3, 0, 90) x2, y2 = mychain.basic_rot(x1, y1, 90) x3, y3 = mychain.basic_rot(x2, y2, 90) x4, y4 = mychain.basic_rot(x3, y3, 90) # 上方一個水平單元 x5, y5 = mychain.basic_rot(x4, y4, 0) # 右斜 -40 度 x6, y6 = mychain.basic_rot(x5, y5, -40) x7, y7 = mychain.basic_rot(x6, y6, -60) # 右中垂直向下單元 x8, y8 = mychain.basic_rot(x7, y7, -90) # -120 度 x9, y9 = mychain.basic_rot(x8, y8, -120) # -140 x10, y10 = mychain.basic_rot(x9, y9, -140) # 水平接回原點 mychain.basic(x10, y10, 0+65*3, 0, color=\"red\") 3D 鏈條繪圖範例 Onshape 字母 A 鏈條組立檔案 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); var location_protocol = (false) ? 'https' : document.location.protocol; if (location_protocol !== 'http' && location_protocol !== 'https') location_protocol = 'https:'; mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/xie-tong-chan-pin-she-ji-shi-xi-qi-zhong-bao-gao.html"},{"title":"任務一 2D 協同繪圖之二","text":"這裡要介紹的是 scrum-2 組員利用 forked cdw2 倉儲版本, git clone 到近端後, 以 git checkout gh-pages 轉到 Github Pages 對應的網頁資料上工作. 在 users/s2a/g100 目錄下建立 scrum2.leo 後, 就利用 Leo Editor 在 content 目錄中, 建立 .md 檔案, 完成後先在近端利用 local-pelican 測試結果, 若能夠正確轉換 Pelican post 目錄中的網誌, 就可以再用 gh-pages-pelican 按鈕, 將 post 目錄中轉成遠端網頁所需要的格式 (主要是讓 disqus 留言系統可以正常運作). 然後 scrum-2 用戶就可以利用 git add -A, git commit -m \"提交註記訊息\", 以及 git push origin gh-pages 將近端的版本提交推送到 scrum-2 自己 forked 的 cdw2 倉儲. 接著, scrum-2 用戶就必須登入到 github, 然後從自己帳號下的 scrum-2/cdw2 倉儲中建立 pull request. 因為 scrum-2 要將 gh-pages 分支的資料版本, 以拉回請求 (pull request) 的方式送到 2015fallhw/cdw2 倉儲, 而這項請求, 必須由 ag100 的組長來進行檢查並且設法完成版本的衝突解決與合併. 建立 pull request 時, scrum-2 必須確定基底互刻 (base fork) 為 2015fallhw/cdw2 倉儲中的 gh-pages 分支, 而標頭互刻 (head fork) 則為 scrum-2/cdw2 倉儲中的 gh-pages 分支, 其間 Github 還特別顯示 \"Can't automatically merge\", 表示這個拉回請求無法自動合併, scrum-1 組長必須要採用手動合併. 接著 scrum-2 組員按下 Create pull request 按鈕, 並在 comment 表單中寫下此一拉回請求的改版要點, 完成後的請求連結為 https://github.com/2015fallhw/cdw2/pull/169 . 接下來的 pull request 審核與合併工作就落在 scrum-1 組長的身上, scrum-1 登入 Github 後, 進入 2015fallhw/cdw2 倉儲. 點下 https://github.com/2015fallhw/cdw2/pull/169 pull request. 這時可以看到 \"This branch has conflicts that must be resolved\", 表示 scrum-1 必須手動處理衝突與合併. 假如 scrum-1 近端沒有 https://github.com/2015fallhw/cdw2.git 倉儲的版本資料, 必須要利用 git clone 複製到本地端, 然後確定分支指在 gh-pages 分支上. Github 針對此一流程, 建立的基本步驟如下: Step 1: From your project repository, check out a new branch and test the changes. git checkout -b scrum-2-gh-pages gh-pages git pull https://github.com/scrum-2/cdw2.git gh-pages Step 2: Merge the changes and update on GitHub. git checkout gh-pages git merge --no-ff scrum-2-gh-pages git push origin gh-pages 有關 git checkout 指令, 使用 -b 表示要利用 git branch 建立新分支 scrum-2-gh-pages, 同時切換到該分支, 至於 start-point 指的是該新建立的分支, 其對應分支起點為 gh-pages. 假如 scrum-1 近端的倉儲資料已經在之前使用 -b 建立過 scrum-2-gh-pages 分支, 且 start-point 設為 gh-pages 分支, 則必須改用 git checkout scrum-2-gh-pages 接著執行 git pull https://github.com/scrum-2/cdw2.git gh-pages, 拉回 scrum-2/cdw2 的 gh-pages 分支版本資料, 這時 users/s2a/g100/scrum2.leo 因為無法自動合併而無法從 Leo Editor 開啟, 必須用純文字編輯器打開後解決衝突. 開啟 scrum2.leo 後, 看到的第1段衝突為: <<<<<<< HEAD @clean scrum2-20160330.md @clean scrum2-20160330-1.md ======= @clean scrum2-20160330-2.md >>>>>>> 61b5812abdc9cdb907dbd1b865194e5bdb70bbdf 表示 scrum-1 近端版本有 @clean scrum2-20160330.md 與 @clean scrum2-20160330-1.md 等兩個節點, 而 scrum-2 pull request 的版本則有 @clean scrum2-20160330-2.md 節點, 這裡必須保留這3個分別建立網誌文章的 .md 檔案, 因此刪除衝突標示符號後即可. 過程中 scrum-1 組長可以根據 content 目錄中的組員對應 .md 檔案來解決 .leo 檔案中的衝突, 同時各組員也必須經常利用反向的 pull request, 儘量自行在 task 1 任務執行期間跟上 2015fallhw/cdw2 的最新版本, 才能減少組長審查組員 pull request 的版本差異. 完成 scrum-2 pull request 版本的合併後, scrum-1 必須利用近端與遠端按鈕建立 Pelican 網誌後, 進行近端的版本提交, git add -A 與 git commit -m \"提交訊息\", 之後繼續執行 scrum-2-gh-pages 與 gh-pages 分支版本的合併. 先利用 git checkout gh-pages 將分支轉為 gh-pages, 然後執行的指令為 git merge --no-ff scrum-2-gh-pages, 其中的 --no-ff 表示合併時不使用快進 (fast-forward) 模式. 而是考量互刻 (fork) 分支後, 2015fallhw/cdw2 的版本可能已經被其他協同組員改版, 必須將這些版本資料納入合併. 接著必須要再利用近端與遠端按鈕進行 post 目錄中網誌資料的轉檔後, 就可以提交推送到遠端的 cdw2 倉儲 gh-pages 分支. 步驟為: git add -A git commit -m \"提交訊息\" git push origin gh-pages 最後, 當組長 scrum-1 完成 scrum-2 pull request 的合併後, scrum-2 就可以利用反向 pull request 更新 scrum-2/cdw2 gh-pages 分支上的版本資料.","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/ren-wu-yi-2d-xie-tong-hui-tu-zhi-er.html"},{"title":"任務一 2D 協同繪圖","text":"假設 2a CD 課程中有第 100 組, 由四位組員: scrum-1, scrum-2, scrum-3 與 scrum-4 所組成, 且 scrum-1 為組長. 在協同產品設計課程中, scrum-1 將會是 cdw2 倉儲的 collaborator, 可以直接將本地端的 CDW2 倉儲版本資料提交推送到遠端, 其餘三人則必須透過 Pull Requests 進行協同. scrum-1 可以直接 git clone cdw2, 然後改版提交推送, 其他組員參與協同的方法都是先根據 http://chiamingyen.github.io/kmolab/blog/xie-tong-chan-pin-she-ji-shi-xi-de-wang-ji-2d-xie-tong-hui-tu.html 中的說明. 登入 Github 後, 以瀏覽器連結到 https://github.com/2015fallhw/cdw2 後, 按一下右上方的 Fork 鍵後, 就可建立與原始倉儲互有關聯的\"互刻\"內容. scrum-1 git clone cdw2 倉儲後, 可以在本地端就工作目錄中的內容進行處理. 由於現在 cdw2 倉儲中的 master 與 gh-pages 已經徹底分離, master 分支主要用來執行 Python3 wsgi 程式, 而 gh-pages 分支則要協同各組回報的資料, 以 Github Pages 的網頁呈現. 在 cdw2 master 分支上的工作: git clone cdw2 倉儲, 以 git branch 指令確定工作目錄中的資料為 master 分支. 在 users/s2a/g100 分組目錄中, 建立 scrum1.leo, 主要目的建立 scrum1_task1.py 然後在近端測試後, 要利用 git remote add 建立同步設定後, 再推送到各分組自行建立的 OpenShift 應用程式倉儲, 然後再將結果回報到 cdw2 的 gh-pages 分支的 Pelican 網站. 首先是在 scrum1_task1.py 程式中, 利用 Flask 的 Blueprint() 建立藍圖, 且名稱為 scrum1_task1, 這個變數名稱, 就是後面用來指定路徑 decorator 用的藍圖案例, 從這裡可以知道隨後測試可以 /ag100/scrum1_task1 呼叫 task1() 函式傳回的繪圖程式. 接著則是在 myflaskapp.py 檔案中, 利用 import users.s2a.g100.scrum1_task1 導入 scrum1_task1.py 程式內容, 且在 flask app 註冊的時候, 利用 app.register_blueprint(users.s2a.g100.scrum1_task1.scrum1_task1) 註冊 scrum1_task1.py 程式中的 scrum1_task1 藍圖變數. 完整的程式碼: https://github.com/2015fallhw/cdw2/blob/efc0bf77c01c2d4218f16fb0603bb5ed27639e1b/users/s2a/g100/scrum1_task1.py 完成上述的 /ag100/scrum1_task1 繪圖的本地端測試後, 可以正常顯示繪圖內容後, 將 master 分支的版本提交推送到 https://github.com/2015fallhw/cdw2.git 倉儲後, 接著就利用組長所登記的 OpenShift python3 應用程式, 將原始碼指到 https://github.com/2015fallhw/cdw2.git 後就可以完成 ag100 組所對應的 http://cdw2-ag100.rhcloud.com/ag100/scrum1_task1 . 最後,為了將 ag100 組員 scrum-1 所完成的繪圖結果回報到 https://github.com/2015fallhw/cdw2.git 的 gh-pages 網頁, 因此將本地端的 cdw2 切換到 gh-pages 分支, 並且複製 users 目錄中的 template.leo 檔案, 並且建立 s2a/g100 目錄, 再將 template.leo 存為 scrum1.leo 後, 進行修改. scrum1.leo 是 ag100 組員 scrum-1 所對應的 .leo 檔案, 目的是要建立 content 目錄中的 .md 檔案, 並在本地端用近端按鈕將 .md 轉為 Pelican 網誌, 進行檢視後, 然後再利用遠端按鈕將資料轉為遠端專用格式, 以提交推送到 cdw2 倉儲的 gh-pages 分支. scrum1.leo 位於 users/s2a/g100 目錄中, 編輯 .md 檔案時必須特別注意: Title: scrum1-回報 ag100 scrum1 初步繪圖主機與連結 必須加入 scrum1 個人學號, 以免多組員使用相同文章標題後, Pelican 無法轉成 html, 因為設定中是以 Title 名稱來決定最後 .html 的檔名. 其次則是要在 Category: 中標示自己的組別, 這裡的標題為 ag100, 表示 scrum-1 組員為甲班 g100 的成員. 寫完文章後, 先將滑鼠停在 @button local pelican 節點, 然後按上方的 local-pelican 按鈕, 完成轉換為 html 後, 打開 cdw2 倉儲中 gh-pages 分支中的 index.html 檢查是否正確轉檔, 若是, 則再將滑鼠停在 @button gh-pages pelican 節點, 再按上方的 gh-pages-pelican 按鈕後, 將版本資料提交推送到 cdw2 的 gh-pages 分支中. 因為這裡要推送到 gh-pages 分支, 若以指令推送, 必須使用 git push origin gh-pages, 若是需要拉回 gh-pages 的分支版本, 則使用 git pull origin gh-pages 指令. 當 scrum-1 用戶完成 cdw2 gh-pages 分支版次資料後, 所新增的網誌文章為: http://2015fallhw.github.io/cdw2/post/scrum1-hui-bao-ag100-scrum1-chu-bu-hui-tu-zhu-ji-yu-lian-jie.html","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/ren-wu-yi-2d-xie-tong-hui-tu.html"},{"title":"協同流程的規劃與實踐","text":"隨著分散式版次管理系統技術的不斷進展, 各種軟硬體協同開發流程的規劃也跟著日漸多元, 當然, 從機械設計的角度來看, Onshape 的推出, 或許可以讓過去許多無緣一窺大型制式 PDM 或 PLM 系統的學員, 透過免費帳號的使用, 稍微體會一個版本多方推升改版所帶來的便利. 而在這個課程中, 我們則透過 Github 協同倉儲的運作, 從學員分組、指定組長、安排座位、各組組長設為倉儲直接協同者 (collaborator)、其他組員以 Pull Request 參與協同, 一直到本地端 Solvespace 的零件輪廓繪製, 進而透過 SVG (Scalable Vector Graphics) 格式將零件斷面輪廓搬上全球資訊網, 然後以各組協同完成網際 2D 組件繪圖告一段落. 其中的程式皆以 Python3 完成, 工具組則包含 Leo Editor, Github 倉儲, Git client, Github Pages, Flask 框架, WSGI 協定, OpenShift 雲端平台等. 以雲端上的學員分組到安排座位, 初步的說明在 電腦教室分組研究 , 而當各組組長確立後, 則必須要利用 Github API 自動建立對應協同倉儲, 並且自動按照協同產品設計期程與內容規劃, 將各組組長設為各協同倉儲的直接協同者 (collaborator), 以便審核該組組員透過 Pull Request 送出的協同內容版次合併事宜. 針對此一自動建立 Github 倉儲與納組長為直接協同者的流程, 我們將利用 https://github.com/sigmavirus24/github3.py 與 https://github.com/mitsuhiko/flask , 在 OpenShift 平台上完成. 讀取學員分組基本資料 content = '''40323101,40323102,40323103,40323108,40323124,, 40323109,40323130,40323135,40323136,40323138,40323144, 40323111,40323117,40323118,40323119,40323120,40323122, 40323110,40323113,40323116,40323121,40323151,, 40323112,40323133,40323147,40323152,40323155,40323156, 40323105,40323106,40323107,40323146,40223153,40023139, 40123119,40123141,40123149,40123216,40123227,40123255,40023234 40323125,40323126,40323132,40323149,40323150,40323153, 40323123,40323131,40323137,40323143,40323145,40323154, 40323127,40323128,40323139,40323141,,, ''' result = [] # splitlines() 方法會將每一行內容作為字串後傳回分割行資料數列 for line in content.splitlines(): try: g.es(line.split(\",\")) except: print(line.split(\",\")) #各行字串再以逗點隔開成為各組學號數列, 再一一放入 result 數列中 result.append(line.split(\",\")) try: g.es(result) except: print(result) 組內學號排序, 以及組間之組長學號排序 # 依照總組數, 逐一取出各組學號數列進行排序 for i in range(len(result)): #學號遞增排序 group_list = sorted(list(filter(None, result[i]))) #學號遞減排序 group_list = sorted(list(filter(None, result[i])), reverse=True) group_sorted.append(group_list) #根據各組第一位組員學號, 進行各組間排序, 以訂出組序 final_result = sorted(group_sorted) #學號遞減排序 #final_result = sorted(group_sorted, reverse=True) 當確定各組組長以及各組的組序後, 就可以利用下列流程, 自動建立對應倉儲, 並將組長納為 collaborator: #導入 github3.py import github3 # account 為要加為 collaborator 的用戶名稱 account = \"github_account_to_be_added_as_collaborator\" # user_account 為 repository 倉儲擁有者的帳號 user_account = \"your_github_account\" repository = \"your_repository\" #url = \"https://github.com/your_github_account/your_repository.git\" # 登入系統 g = github3.login(\"your_github_account\", \"your_github_password\") # 以下則新增協同者 #若新增 collaborator 成功傳回 True 否則傳回 False result = g.repository(user_account, repository).add_collaborator(account): #移除 collaborator #result = g.repository(user_account, repository).remove_collaborator(account): 建立新倉儲( 參考 ): repo = {} keys = ['name', 'description', 'homepage', 'private', 'has_issues', 'has_wiki', 'has_downloads'] for key in keys: try: repo[key] = raw_input(key + ': ') except KeyboardInterrupt: pass r = None if repo.get('name'): r = g.create_repo(repo.pop('name'), **repo) if r: print(\"Created {0} successfully.\".format(r.name)) 最後則配合 http://cadlab.mde.tw 的電腦教室配置, 依據已經完成分組的名單, 以依組序分別取出單一組員, 排入各排座位, 以分散各組組員, 令其儘量透過網路與系統資料進行協同產品設計. 分組與列出座位表的程式如下: @app.route('/optionaction', methods=['POST']) def optionaction(): # 最後傳回的字串為 out_string out_string = \"\" # 程式內需要暫時使用的 tmp_string tmp_string = \"\" # 傳回字串中, 用來說明排序原則的 desc_string desc_string = \"\" result = [] group_sorted = [] num_of_stud = 0 # 每組至多 7 人 max_num_in_one_group = 7 # 電腦教室配置, 共有 9 排 total_column = 9 # 上面為相關變數的初始值設定, 以下開始取出 data_a 或 data_b 進行處理, 由 option3 傳回值決定 if request.form[\"option3\"] == \"2a\": content = request.form[\"data_a\"] else: content = request.form[\"data_b\"] #result = content.splitlines() for line in content.splitlines(): result.append(list(line.split(\",\"))) # i 為行序 for i in range(len(result)): # j 為組員序 for j in range(len(result[i])): tmp_string += result[i][j] + \", \" out_string += \"第\" + str(i+1) + \"排資料:\"+ tmp_string + \" \" tmp_string = \"\" for i in range(len(result)): # 開始進入組內排序, 根據 request.form[\"option1\"] 的值決定遞增或遞減 if request.form[\"option1\"] == \"遞增\": group_list = sorted(list(filter(None, result[i]))) else: group_list = sorted(list(filter(None, result[i])), reverse=True) group_sorted.append(group_list) if request.form[\"option1\"] == \"遞增\": desc_string += \"組內學號最小者為組長.\" else: desc_string += \"組內學號最大者為組長.\" # 開始進入組間組長學號排序, 根據 request.form[\"option2\"] 的值決定遞增或遞減 if request.form[\"option2\"] == \"遞增\": desc_string += \"各組長中學號最小者為第1組.\" final_result = sorted(group_sorted) else: desc_string += \"各組長中學號最大者為第1組.\" final_result = sorted(group_sorted, reverse=True) out_string += \" \" + desc_string + \" \" # i 為行序 for i in range(len(final_result)): # j 為組員序 for j in range(len(final_result[i])): num_of_stud += 1 tmp_string += final_result[i][j] + \",\" out_string += \"第\" + str(i+1) + \"組:\"+ tmp_string + \" \" tmp_string = \"\" #return \"總共有\" + str(i+) + \"組\" # group_num 為總組數 group_num = i + 1 # 截至這裡, 已經完成選組長, 以及定組序的工作 ,接下來要排座位, 並且印出座位表 # 先算每班的總人數 #return \"總共有\"+ str(num_of_stud) + \"人\" seat_by_column = [] for row in range(max_num_in_one_group): # 每組最多 7 人 #for row in range(7): # 這裡的 11 為總組數 #for column in range(11): for column in range(group_num): # 因為各分組數列的長度並不相同, 但是最長的有 7 位組員, 因此若無法取得的資料 (因為索引超值), 就補上空字串 try: seat_by_column.append(final_result[column][row]) except: seat_by_column.append(\"\") # seat_by_column 為去除空白字串前的座位數列 # 然後利用 filter(None, seat_by_column) 去除空白字串, 就可以得到以 column 為主的座位排序 seat_by_column = list(filter(None, seat_by_column)) # 然後每 N 個取為 1 排, 即可得到以排為主的座位序列, 而 N 則視全班人數除以 9, 也就是 total_column 進位決定, 因為共有 9 排 N = math.ceil(num_of_stud/total_column) # for debug #return str(num_of_stud) + \":\" + str(total_column) + \":\" + str(N) column_list = [seat_by_column[n:n+N] for n in range(0, len(seat_by_column), N)] # 列出每 N 個組員一排的數列 column_list # 接下來要納入以排為主的座位 # 根據 column_list, 建立一個 dictionary, 其中學號為 index, 座位號為對應值 seat_dict = {} for column in range(len(column_list)): for i in range(N): try: seat_dict.update({column_list[column][i]: (column, i)}) except: seat_dict.update({\"\": \"\"}) # 開始準備用順序列出學員座號 # 根據學號, 排序 dictionary 的方法 import operator seat_dict_sort = sorted(seat_dict.items(), key = operator.itemgetter(0), reverse = False) # 依照學號順序, 列出座位表 out_string += \" 按照學號次序列出座位表: \" for i in range(1, len(seat_dict_sort)): out_string += str(i) + \":\"+ str(seat_dict_sort[i]) + \" \" # 結束準備用順序列出學員座號 # dont know why .reverse() did not work, 只有 [::-1] 可以 reverse list elements #g.es(column_list[::-1]) # 因為經由 zip 逐一重新 transpose 的列資料, 必須配合最大 (也就是總共有 7 列, 也就是 N 的值) 列數補上空白字串 (也就是空位) # 所以不能使用 zip, 而必須導入 zip_longest 模組方法 from itertools import zip_longest final_seat = list(zip_longest(*column_list[::-1], fillvalue=\"\")) # 列出最後的座位表 #g.es(final_seat) # 最後轉成 html table 標註格式 out_string += \" \" out_string += \" \" out_string += \" 講台 \" for row in range(len(final_seat)): out_string += \" \" # 因為每一 row 有 9, 也就是 total_column 個位子 for i in range(total_column): try: if i%2 != 0: out_string += \" \" + str(final_seat[row][i]) + \" \" else: out_string += \" \" + str(final_seat[row][i]) + \" \" except: out_string += \" \" out_string += \" \" out_string += \" \" return out_string # 等運算或資料處理結束後, 再將相關值送到對應的 template 進行資料的展示 #return render_template('optionaction.html', option_list1=option_list1, option_list2=option_list2)","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/xie-tong-liu-cheng-de-gui-hua-yu-shi-jian.html"},{"title":"SVG 檔案解讀","text":"利用 Python 的 xml 模組, 可以讀出一個 SVG 檔案的尺寸與路徑字串. from xml.dom import minidom svg_file = \"cd_task1_chain_ss.svg\" # 利用 minidom 解讀 svg 檔案 doc = minidom.parse(svg_file) # 設法取得 svg 檔案的長與寬, 並且去除 mm 單位字串 width = float([path.getAttribute('width') for path in doc.getElementsByTagName('svg')][0].replace(\"mm\", \"\")) height = float([path.getAttribute('height') for path in doc.getElementsByTagName('svg')][0].replace(\"mm\", \"\")) # 取得 svg 的路徑字串 path_strings = [path.getAttribute('d') for path in doc.getElementsByTagName('path')][0] doc.unlink() print(\"width:\", width, \"\\nheight:\", height, \"\\npath:\", path_strings)","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/svg-dang-an-jie-du.html"},{"title":"Cango 全球資訊網繪圖程式庫","text":"Cango 是一套 Canvas Graphics Library, 以 Javascript 編寫, 為了將它導入機械設計產品開發流程, 透過 Brython 程式呼叫. 以 Solvespace 繪製輪廓圖: http://chiamingyen.github.io/kmolab_data/files/cd_task1_chain_profile.slvs 從 Solvespace 輪廓圖長出 3D 零件後, 以 export 2D section SVG 圖檔: http://chiamingyen.github.io/kmolab_data/files/cd_task1_chain_ss.svg 從 cd_task1_chain_ss.svg 圖檔, 可以得知斷面圖檔寬度為 26.696mm, 而高度為 47.906mm, 且 SVG 各點的座標原點位於圖檔的左下角落點. 從此資訊就可以算出 svgToCgoSVG 函式中的座標 offset 值為 (26.696/2, 47.906/2+10) (因為上下兩個圓弧的圓心距離 20 mm), 而 Solvespace 轉出 SVG 時將上下圓弧分別截為三段表示. 下圖中綠色輪廓繪圖數據即來自 Solvespace. window.onload=function(){ brython(1); } from javascript import JSConstructor from browser import window import math cango = JSConstructor(window.Cango) cobj = JSConstructor(window.Cobj) shapedefs = window.shapeDefs obj2d = JSConstructor(window.Obj2D) cgo = cango(\"plotarea\") #cgo.setWorldCoords(-300, -300, 600, 600) cgo.setWorldCoords(-200, -200, 400, 400) #畫座標軸線 cgo.drawAxes(0, 190, 0, 190, { \"strokeColor\":\"#aaaaaa\", \"fillColor\": \"#aaaaaa\", \"xTickInterval\": 10, \"xLabelInterval\": 20, \"yTickInterval\": 10, \"yLabelInterval\": 20}) deg = math.pi/180 #選擇長弧, 且向內畫弧 def chain1(x, y, rx, ry, rot, color, border, linewidth): # 旋轉必須要針對相對中心 rot not working yet chamber = \"M -6.8397, -1.4894 A 7, 7, 0, 1, 0, 6.8397, -1.4894 A 40, 40, 0, 0, 1, 6.8397, -18.511 A 7, 7, 0, 1, 0, -6.8397, -18.511 A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) cmbr = cobj(cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"black\", \"lineWidth\": linewidth }) # 尺寸放大兩倍 cgo.render(cmbr, x, y, 2, rot) cgo.drawText(\"1-長向內\", x, y-10, {\"fontSize\":10, \"fontWeight\": 1200, \"lorg\":5 }) # 選擇短弧, 且向內畫弧 def chain2(x, y, rx, ry, rot, color, border, linewidth): # 旋轉必須要針對相對中心 rot not working yet chamber = \"M -6.8397, -1.4894 A 7, 7, 0, 0, 0, 6.8397, -1.4894 A 40, 40, 0, 0, 1, 6.8397, -18.511 A 7, 7, 0, 1, 0, -6.8397, -18.511 A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) cmbr = cobj(cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"black\", \"lineWidth\": linewidth }) # 尺寸放大兩倍 cgo.render(cmbr, x, y, 2, rot) cgo.drawText(\"2-短向內\", x, y-10, {\"fontSize\":10, \"fontWeight\": 1200, \"lorg\":5 }) #選擇長弧, 且向外畫弧 def chain3(x, y, rx, ry, rot, color, border, linewidth): # 旋轉必須要針對相對中心 rot not working yet chamber = \"M -6.8397, -1.4894 A 7, 7, 0, 1, 1, 6.8397, -1.4894 A 40, 40, 0, 0, 1, 6.8397, -18.511 A 7, 7, 0, 1, 0, -6.8397, -18.511 A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) cmbr = cobj(cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"black\", \"lineWidth\": linewidth }) # 尺寸放大兩倍 cgo.render(cmbr, x, y, 2, rot) cgo.drawText(\"3-長向外\", x, y-30, {\"fontSize\":10, \"fontWeight\": 1200, \"lorg\":5 }) #選擇短弧, 且向外畫弧 def chain4(x, y, rx, ry, rot, color, border, linewidth): # 旋轉必須要針對相對中心 rot not working yet chamber = \"M -6.8397, -1.4894 A 7, 7, 0, 0, 1, 6.8397, -1.4894 A 40, 40, 0, 0, 1, 6.8397, -18.511 A 7, 7, 0, 1, 0, -6.8397, -18.511 A 40, 40, 0, 0, 1, -6.8397, -1.4894 z\" cgoChamber = window.svgToCgoSVG(chamber) cmbr = cobj(cgoChamber, \"SHAPE\", { \"fillColor\": color, \"border\": border, \"strokeColor\": \"black\", \"lineWidth\": linewidth }) # 尺寸放大兩倍 cgo.render(cmbr, x, y, 2, rot) cgo.drawText(\"4-短向外\", x, y-30, {\"fontSize\":10, \"fontWeight\": 1200, \"lorg\":5 }) #利用 boundary 界定出繪圖的範圍 def boundary(): chamber = \"M -200, -200 L 200, -200 L 200, 200 L -200, 200z\" cgoChamber = window.svgToCgoSVG(chamber) cmbr = cobj(cgoChamber, \"PATH\", { \"fillColor\": \"black\", \"border\": True, \"strokeColor\": \"black\", \"lineWidth\": 5 }) # 尺寸放大兩倍 cgo.render(cmbr, 0, 0, 1, 0) #cgo.drawText(\"2-短向內\", x, y-10, {\"fontSize\":10, \"fontWeight\": 1200, \"lorg\":5 }) def drawSpiral(): chamber = \"M 289.16,447.14 \\ C 233.33,399.03 267.47,290.34 364.53,265.28 \\ 408.88,269.91 448.14,282.58 483.22,303.79 \\ 391.79,287.12 292.99,369.50 331.90,451.11 \\ 318.79,447.43 302.35,446.61 289.16,447.14 z\" cgoChamber = window.svgToCgoSVG(chamber, -287, -536) cmbr = cobj(cgoChamber, \"SHAPE\", { \"fillColor\":\"lightyellow\", \"strokeColor\":\"tan\", \"lineWidthWC\":4, \"border\":True }) #cgo.drawShape(shapedefs.circle(8),0 ,0 , {\"fillColor\":\"tan\"}) cmbr.scale(0.5) scl = 1 for i in range(50): scl = scl/(1.08) cgo.render(cmbr, 0, 0, scl, -i*24.5) # 從 solvespace 轉出的 SVG (必須長出實體, 然後選擇斷面後, 以 export 2D section 轉出 SVG) # width='26.696mm' height='47.906mm', 且原點在左下角落 def solvespace(x, y): centerx = 26.696/2 centery = 47.906/2+10 chamber = \"M16.772 7.656 \\ A7.000,7.000 0 0,1 8.924,7.656 \\ A7.000,7.000 0 0,1 6.008,14.942 \\ A40.000,40.000 0 0,1 6.008,31.964 \\ A7.000,7.000 0 0,0 8.924,39.250 \\ A7.000,7.000 0 0,0 16.772,39.250 \\ A7.000,7.000 0 0,0 19.688,31.964 \\ A40.000,40.000 0 0,1 19.688,14.942 \\ A7.000,7.000 0 0,0 16.772,7.656z\" # 以其中一個相切點作為關鍵原點 # -centerx 為 x 座標的 offset 值, 也就是新原點位於 (centerx, centery) cgoChamber = window.svgToCgoSVG(chamber, -centerx, -centery) cmbr = cobj(cgoChamber, \"SHAPE\", { \"fillColor\": \"green\", \"border\": True, \"strokeColor\": \"black\", \"lineWidth\": 4 }) # 尺寸放大兩倍 cgo.render(cmbr, x, y, 2, 0) cgo.drawText(\"從 ss 轉出\", x, y-30, {\"fontSize\":10, \"fontWeight\": 1200, \"lorg\":5 }) boundary() drawSpiral() yellow = \"#f4c20d\" white = \"#ffffff\" chain1(0, 0, 0, 0, 0, white, True, 4) chain2(35, 0, 0, 0, 0, white, True, 4) chain3(70, 0, 0, 0, 0, white, True, 4) chain4(105, 0, 0, 0, 0, white, True, 4) solvespace(140, 0)","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/cango-quan-qiu-zi-xun-wang-hui-tu-cheng-shi-ku.html"},{"title":"協同產品設計實習的網際 2D 協同繪圖","text":"在這個範例中, 所有參與協同的機械設計課程學員, 透過 Github 的 pull request 機制進行協同繪圖程式開發, 而各組組長則以 collaborator 的角色負責審核各組員送出的 pull requests, 本繪圖任務中的基本單 2D 繪圖單元, 是由 4 個彼此相切的圓弧所組成, 各組必須根據幾何約束條件求出各相切點的座標後, 使用指定的網際繪圖程式庫, 著手結合各組員, 在一致的內容格式規劃下, 完成所要求的 2D 組件繪圖. 任務倉儲: https://github.com/2015fallhw/cdw2 兩位虛擬組員, 分別是位於 s2a 中的 g100 , 以及位於 s2b 中的 g99 . 在 cdw2 倉儲 1.1 版本中 https://github.com/2015fallhw/cdw2/releases 已經完成 http://cdw2-ladisai.rhcloud.com/ag100/task2 的範例繪圖. 而此一範例繪圖的程式碼來自 s2b g99 的 task0.py , 且 Github 的倉儲資料以 git remote add 與 OpenShift 平台上的雲端應用程式倉儲進行同步. Task1 任務: 請各組利用上述協同繪圖所提供的鏈條元件輪廓, 完成下列字母排列方式中的 ABCD 4個字母繪圖, 且每一位組員在各字母中必須至少繪製一小截鏈條, 各組所完成的規劃過程與結果, 則必須在 cdw2 倉儲對應的 http://2015fallhw.github.io/cdw2/ Github Pages 網頁中完成.","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/xie-tong-chan-pin-she-ji-shi-xi-de-wang-ji-2d-xie-tong-hui-tu.html"},{"title":"利用 Leo Editor 執行程式開發","text":"Leo Editor 是一套利用大綱模式與程式方法管理多元資料的 Python3 + PyQt 單機應用程式. 所謂的大綱模式, 指的是 Leo Editor 將所有的內容分為大綱與內文, 而每一個大綱資料可以擁有下屬大綱, 使用者可以利用階層式的方法來管理各種文字資料. 至於所謂管理多元資料的程式方法, Leo Editor 發明了許多大綱標題上的指令, 以及大綱內文中的語法指令來協助使用者管理資料. 這裡我們先簡單介紹 @edit 與 @clean 在 Python3 程式開發上的應用. Leo Editor 基本的使用模式如下: 開啟 Leo Editor 後, 使用者可以新增一個 .leo 檔案, 並在其中加入大綱標題(或者稱為節點), 以及在大綱標題對應的內文中輸入資料. 當使用者決定 .leo 各大綱內文中所儲存的資料, 希望能夠單獨以一個檔案的格式存在, 就可以修改內文對應的標題, 放入 @edit myfile.txt, 當使用者儲存 .leo 檔案時, Leo Editor 就會根據 @edit 標題指令的指示, 將內文資料以 myfile.txt 存檔, 並在 Log 區註記檔案已經建立. 假如上述儲存在大綱對應內文的資料是 Python3 格式的程式碼, 那麼使用者只要將滑鼠停留在該程式內文中, 然後按下 Ctrl + b, 就可以執行這個程式, 並且通常使用者會使用 g.es() 來取代 print(), 直接在 Leo Editor 中進行程式碼的測試. 換言之, 假如使用者在步驟 2. 將檔案存為 myprog.py, 這個 Python 程式就可以與其他的程式套件結合, 成為各種應用套件, 整個 Leo Editor 就是在這樣的環境下開發, 而且是採用 PyQt 作為圖形介面程式庫, 使用者可以在 leo/core/LeoPyRef.leo 中的 Code 節點中看到這些程式碼. 實際操作: 開啟 Leo Editor, 利用 File->New 新增一個 .leo 檔案, 按下 Ctrl + i, 以 insert 的方法加入一個大綱(節點), 在內文中放入: try: g.es(\"hello\") except: print(\"hello\") 然後按下 Ctrl + b, 就可以在 Leo 中看到程式執行時, 以 g.es(\"hello\"), 將字串送到 Log 視窗, 這裡的 g 是 Leo Editor 程式中的一個模組, 包含廣域函式與類別, 而 g.es 就是其中的一個 echo string 方法. 而且 g 是 Leo Editor 套件中一個很大的模組, 假如您真的想看看 g 在 5.1 版中的所有 439 個函式與類別, 可以利用 g.es(len(list(dir(g)))) 列出 g 的函式與類別個數 ,或者以 g.es(list(dir(g))) 列出這個大數列. 假如我們希望將目前 .leo 檔中唯一的大綱內容存成 myprog.py, 只要將此內文程式的標題改為 \"@edit myprog.py\", 然後存 .leo 檔案即可. 此時, Leo Editor 的 Log pane 中將註記 myprog.py 已經建立的訊息, 而且使用者可以在操作系統的檔案架構中, 利用 python3 myprog.py 來執行這個 myprog.py 程式. 最後一個例子是, Leo Editor 可以透過 @clean 節點指令, refresh 已經存在外部的 myclass.py 物件導向程式碼, 以階層架構的方式讀進 myclass.py 的內容, 之後, 使用者在 Leo Editor 修改 myclass.py 的程式內容, 將在存檔後存入 myclass.py, 若離開 Leo Editor 之後, myclass.py 內容修改, Leo Editor 將在打開對應 .leo 檔案時, 讀進 myclass.py 最新的內容. 利用 Leo Editor 的節點指令, @clean 導入下列已經存在檔案系統中的 myclass.py 程式碼, 只要新增一個節點, 並且標題輸入 \"@clean myclass.py\", 而且確定 .leo 檔案與 myclass.py 位於相同目錄中, 然後點選 @clean myclass.py 節點, 以滑鼠右鍵拉出 refresh from disk, Leo Editor 就會以階層架構讀進 myclass.py. myclass.py 的程式碼如下: class 僱員: '僱員物件' 人員總數 = 0 def __init__(self, 職稱, 薪水): self.職稱 = 職稱 self.薪水 = 薪水 僱員.人員總數 += 1 def 列出個數(self): try: g.es(\"總共有人員 %d\" % 僱員.人員總數) except: print(\"總共有人員 %d\" % 僱員.人員總數) def 列出基本資料(self): try: g.es(\"職稱 : \", self.職稱, \", 薪水: \", self.薪水) except: print(\"職稱 : \", self.職稱, \", 薪水: \", self.薪水) \"開始利用僱員物件建立案例\" 僱員1 = 僱員(\"王一名\", 55000) \"建立另外一位僱員\" 僱員2 = 僱員(\"林人二\", 65000) 僱員1.列出基本資料() 僱員2.列出基本資料() try: g.es(\"目前為止, 有 %d 位僱員\" % 僱員.人員總數) except: print(\"目前為止, 有 %d 位僱員\" % 僱員.人員總數) 以上的 Leo Editor 導引教學內容,可以從 https://github.com/chiamingyen/leoeditor_tutorial 中下載.","tags":"Project","url":"https://chiamingyen.github.io/kmolab/blog/li-yong-leo-editor-zhi-xing-cheng-shi-kai-fa.html"},{"title":"WCM 電腦教室分組研究","text":"在網際內容管理的課程中, 有一個針對電腦教室實際的配置, 讓學員自行籌組, 然後再依據各組組員的學號排序選出組長後, 再根據各組長的學號排序決定組序, 這裡希望採用 Flask 網際框架, 並且將 Github 倉儲中的程式與 OpenShift 上的應用程式同步, 以便讓機械設計學員體會之後如何應用類似的網際流程來提升產品開發的效能. 在網際內容管理的 研究主題 中, 列出與全球資訊網應用相關的軟體與硬體內容管理, 其中透過全球資訊網應用程式, 能夠讓使用者: 直接利用瀏覽器輸入基本資料 讓使用者選擇處理基本資料的方法 利用雲端上的主機進行資訊的運算或處理 處理結束後, 使用者可以在瀏覽器上檢視處理結果 ,然後再設法利用資料庫儲存這些資料, 並依照需求進行下一階段的工作 而上述處理資料的流程與許多機械設計的流程類似: 使用者利用瀏覽器輸入基本的設計需求 (例如, 從機械元件設計資料庫中, 選擇以漸開線正齒輪組, 輸入傳遞功率與減速需求, 設計減速機) 使用者利用網際選單, 進一步選擇設計條件 (例如, 使用者可以選擇安全係數, 某一個齒輪的齒數或材料或熱處理的方法等) 網際機械設計程式根據使用者的輸入與設計要求, 選擇既定的設計運算流程, 其中包括自動查表, 自動選擇適用的配合零組件 處理或運算結數後, 使用者可以直接從瀏覽器取得設計結果 (例如, 系統直接完成各零組件的參數繪圖, 使用者可以選擇零件格式下載, 進行下一步的原型列印與組裝測試) 先看看目前這個簡單的分組程式操作畫面: 使用者輸入各組自行籌組的資料, 這裡實際上採用雲端即時試算表讓所有組員同時利用瀏覽器輸入分組資料後, 轉進表單: 分別選擇組內排序方法, 選出組長 ,然後再選各組間的組長排序方法 ,定出組序, 按下 Select, 即可列出分組結果: 上述這個基本的 Flask 程式配置流程, 請參考 http://project.mde.tw/blog/yen-wang-ji-flask-cheng-shi-jia-gou.html . 有了能夠接受網際表單的 Flask 程式後, 分別將程式與 Leo Editor 專案資料送到 Github 倉儲 https://github.com/2015fallhw/simpleflask , 然後再利用本地端的 git remote add 與 OpenShift 上的雲端程式同步 http://simpleflask-2014openshift.rhcloud.com/option , 就能夠讓使用者直接在瀏覽器執行自動分組的流程. 有關這個版次的程式, 請參考 https://github.com/2015fallhw/simpleflask/tree/c153e0a1d192138646be192c207541a527f91c45","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/wcm-dian-nao-jiao-shi-fen-zu-yan-jiu.html"},{"title":"全球資訊網上的內容管理系統","text":"這裡要舉的例子為架構在 OpenShift 平台上的 CMSimply, 目前採用 Python3 與 Cherrypy 編寫, 使用者只要建立帳號後, 將內容管理平台的原始碼, 架構在雲端平台, 馬上就能擁有一個可儲存機械設計相關內容的網站. 由於本課程的目的, 不僅要將機械設計的各式內容送到雲端上的 CMSimply, 而且還要修改 Python3 內容管理系統的程式碼, 因此必須在本地端建立 rsa 格式的 key pair. 在 Windows 平台上, 可以利用 puttygen: http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html 完成, 使用步驟如下: 開啟 puttygen.exe 後, 以 Generate 按鈕後, 移動滑鼠後即可完成. 將 Public key 送到 OpenShift 帳號中的 settings 處. 按 Conversions 功能表, 以 export OpenSSH 格式的 private key, 存到 home 目錄下的 .ssh 目錄中, 且以 id_rsa 命名檔案. 之後若需從 OpenShift git clone 與這把 key 對應的應用程式, OpenShift 端會利用 settings 上所登錄的 public key 與 .ssh 目錄中的 id_rsa 進行驗證, 必須通過驗證才能順利完成倉儲的 git clone. 在 Ubuntu 平台上, 除了利用 ssh-keygen -t rsa 來建立 rsa 格式的 key pair 外, 其他步驟同 Windows. 至於在 Windows 配合 Filezilla 與 OpenShift 雲端應用程式相連時, 必須利用 pageant.exe 載入 private key 後才能通過認証, 而在 Ubuntu 則可以透過 ssh-add ~/.ssh/id_rsa, 載入對應的 private key.","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/quan-qiu-zi-xun-wang-shang-de-nei-rong-guan-li-xi-tong.html"},{"title":"機械設計流程的內容與管理","text":"機械設計流程中可能產生的內容, 可分為口語表達、文字表達、2D 圖像、3D 表達、解析表達與實體表達等六大類. 所謂的口語表達即是在機械設計過程中採口頭方式呈現, 可以利用錄音方式將口語表達轉為 mp3, 或者採逐字稿, 轉為文字檔, 然後上傳到網際內容管理系統. 文字表達就網際而言, 就是利用 html 將文字內容寫在全球資訊網路上, 也可以整理成 pdf, 或其他格式的文字檔, 然後再上傳到網際內容管理系統 而 2D 圖像, 可以是一張照片, 手繪圖, 說明圖檔, 流程圖, 或者是產品的工程圖, 通常以 png、jpeg 或 gif 副檔名檔案格式. 3D 表達, 包括一般影片、模擬動畫、CAD 零件, CAD 組件等. 解析表達就是與機械設計相關的理論分析, 可以是方程式推導, 設計流程最佳化或各類型 CAE 模擬分析. 實體表達就是實際做出實體的過程, 牽涉許多不同類型的製造程序, 一旦根據前述的五種表達方式模擬與規劃之後, 透過原型實驗測試來驗證機械設計的可行性與可靠度. 以下則是利用 2D 圖像來表達數學式: 在文章中, 一旦啟用 render_math plugin, 就可以利用一前一後的 $ 與數學式相連的方式來呈現符號. 例如: 前後用 $ 符號包圍 e=mc&#94;2, 可以得到: \\(e=mc&#94;2\\) 也可以利用一對 $$ 符號界定方程式, 利用 LaTeX 語法來表示: x&#94;2 被一前一後的兩個 $$ 包圍, 可以得到: $$ x&#94;2 $$ A_\\text{c} = (\\pi/4) d&#94;2 則得到: $$ A_\\text{c} = (\\pi/4) d&#94;2 $$ \\alpha{}_t(i) = P(O_1, O_2, … O_t, q_t = S_i \\lambda{}) 則得到: $$ \\alpha{}_t(i) = P(O_1, O_2, … O_t, q_t = S_i \\lambda{}) $$ \\cos (2\\theta) = \\cos&#94;2 \\theta - \\sin&#94;2 \\theta 則得到: $$ \\cos (2\\theta) = \\cos&#94;2 \\theta - \\sin&#94;2 \\theta $$ \\int_0&#94;\\infty e&#94;{-x&#94;2} dx=\\frac{\\sqrt{\\pi}}{2} 則得到: $$ \\int_0&#94;\\infty e&#94;{-x&#94;2} dx=\\frac{\\sqrt{\\pi}}{2} $$ y =x&#94;4 + 4 \\nonumber \\ =(x&#94;2+2)&#94;2 -4x&#94;2 \\nonumber \\ \\le(x&#94;2+2)&#94;2 則成為: $$ y =x&#94;4 + 4 \\nonumber \\\\ =(x&#94;2+2)&#94;2 -4x&#94;2 \\nonumber \\\\ \\le(x&#94;2+2)&#94;2 $$ \\lim_{x \\to a} f(x) 則成為: $$ \\lim_{x \\to a} f(x) $$ 而程式碼的部份, 則使用 syntaxhighlighter 來顯示: # python 程式碼 # 定義一個 myfunction 函式 def myfunciont(): # 設定變數 i 與 10 對應 i = 10 # 啟動一個 for 重複迴圈, 以 j 為指標變數 for j in range(i): # 在迴圈中列印 j 變數的對應值 print(j) # 呼叫 myfunction 函式 myfunction() if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); var location_protocol = (false) ? 'https' : document.location.protocol; if (location_protocol !== 'http' && location_protocol !== 'https') location_protocol = 'https:'; mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/ji-jie-she-ji-liu-cheng-de-nei-rong-yu-guan-li.html"},{"title":"利用 Github 執行協同設計專案","text":"Github 的分散式版次管理, 可以讓機械設計工程師體會非同步協同的團隊合作模式, 在眾目睽睽之下, 所有與設計相關的細節都能夠加以保留. 協同設計規劃 協同產品設計實習的專案倉儲位於 https://github.com/2015fallhw/2016springcd , 其中的 gh-pages 分支可以對應到 Github Pages 的網頁 http://2015fallhw.github.io/2016springcd/ , 而需要依賴 Python 程式作為伺服器端的同步對應網站, 則位於 http://cd-2015fallhw.rhcloud.com/ . 實習課程運作前的任務為 Task0: http://chiamingyen.github.io/kmolab/blog/2016-spring-cd-task0.html 主旨在利用 Python 程式對所有學員進行分組, 每一組 4-7 人, 經過自由籌組之後, 利用雲端即時試算表, 收集各組組員的學號後, 根據學號遞增排列, 分別排出組序並決定各組組長後, 各組長將納為 https://github.com/2015fallhw/2016springcd 倉儲與 http://cd-2015fallhw.rhcloud.com/ OpenShift 網站的協同管理者. 各組組長的任務在協助審核或回應各協同組員所提交的 Pull Request 改版資料, 而各改版資料的內容即在分別解決各組所被交付的實習任務. Task0: http://chiamingyen.github.io/kmolab/blog/2016-spring-cd-task0.html 的實習任務目的, 希望各組能夠利用 OpenShift 雲端系統中的 Python3 應用程式, 以 Flask 網際框架: http://flask.pocoo.org/ , 建立自動分組的網際程式, 而這個程式延伸自先前的計算機程式與電腦輔助設計實習課程的內容: https://github.com/2015fallhw/cptocadp . 希望以 Ethercalc 所採集到的分組學號原始資料作為輸入, 使用者可以利用 Task0 網際程式, 輸入這些原始資料後, 選擇組長排序規定 (遞增或遞減), 並選擇定組序規定 (遞增或遞減) 後, 網際程式可以自動列出各組組長名單, 各組組員名單, 以及依照電腦教室座位列表的學員座位表, 還有依照學號次序排列的座位表等. Task0 實習任務牽涉如何利用 Python 程式讀取資料檔, 按照各行資料納入數列資料結構, 如何進行數列的排序, 如何根據電腦教室的座位約束條件, 將學員逐一按照特定方法納入座位. Task0 實習任務的相關程式架構, 可以修改為網際機械元件設計系統, 使用者提供基本輸入要求, 網際輔助設計程式便可以根據設計條件執行運算後列出結果. Github 的 Pull Request 協同 使用 Github 的 Pull Request 協同之前, 各協同組員必須先登入 Github 後, fork https://github.com/2015fallhw/2016springcd 父倉儲, 之後所有的組員協同將在各自 fork 後的子倉儲中進行. 完成上述 fork 倉儲之後,各使用者利用 git clone 將這個 fork 的子倉儲複製到近端, 然後再依據 master 分支 (用於與 OpenShift 網站同步) 或 gh-pages 分支 (用於 Github Pages 網站) 中的內容, 切換各分支內容到近端工作目錄中工作. 為了方便, 也可以讓 master 與 gh-pages 分支的資料同步, 然後再將 master 版本資料推送到 OpenShift 雲端網站中開機啟動運行. 當各組員在近端倉儲完成特定任務後, 可以利用 ungit: https://github.com/FredrikNoren/ungit 或 sourcetree: https://www.sourcetreeapp.com/ 或可攜 sourcetree: https://github.com/cosmomill/SourceTreePortable 或 git 命令套件: https://github.com/msysgit/msysgit/releases , 將近端資料提交推送到個人的子倉儲中, 然後再透過 pull request, 請求各組組長將子倉儲的改版資料納入父倉儲中. 當 Taks0 任務結束後, 各組組員可以透過 Pull Request 逆轉提交的方式, 設法自動或手動合併遠端 https://github.com/2015fallhw/2016springcd 倉儲的資料, 然後再透過 git pull 的方式拉到近端, 以便用協同倉儲的最新資料執行 Task1. Github Pull Request 逆轉 Pull Request 的功能在 fork 某一倉儲資料後進行改版後, 可以要求原倉儲管理者 (這裡的管理者係指各組組長), 將各組員的改版資料併入父倉儲, 而當原始倉儲經過各組協同, 不斷改版後, 各參與 Pull Request 的學員, 則可以利用 Github 的 Pull Request 逆轉設定, 更新自己的倉儲資料內容. 所謂的 Pull Request 逆轉方法, 其觀念正好與 Pull Request 相反, 因為 Pull Request 希望被 fork 的原始倉儲 (父倉儲) 能夠取回已經被改版的各組員倉儲 (子倉儲) 資料, 而所謂的 Pull Request 逆轉, 就是各組員在各自的倉儲中, 新增 Pull Request, 但是要將 Pull Request 的 base 與 head 的兩端資料選項互換, 也就是將 base fork 設為子倉儲的分支, 而 head fork 就設為父倉儲的對應分支, 如此就可以透過此一 Pull Request 從父倉儲取得最新的資料內容, 而在 Github 的 New Pull Request 頁面中, 就提供了這個 switching base 的功能. 在以下的範例畫面中, 2015fallhw/2016springcd 為父倉儲, coursemdetw 登入 Github 後, 連結到 https://github.com/2015fallhw/2016springcd , 就可以 fork 此一倉儲, 操作後回到 coursemdetw/2016springcd 倉儲畫面如下: 接著 coursemdetw 用戶將 https://github.com/coursemdetw/2016springcd 資料 git clone 到近端, 然後對 master 分支中的資料進行改版後提交推送回 https://github.com/coursemdetw/2016springcd 倉儲, 操作後畫面如下: 接著, 因為子倉儲的資料已經改版, 所以 Github 的對應倉儲頁面中, 出現了 New pull request 的按鈕, 表示可以利用新增 pull request, 請求父倉儲將此一版本拉回合併, 按下 New pull request 之後的畫面如下, 特別注意, 這個時候的 base fork 為 2015fallhw/2016springcd 父倉儲的 master 分支, 而 head fork 則為 coursemdetw/2016springcd 子倉儲的 master 分支, 表示請求的新版本內容為 head fork, 希望併入 base fork 中. 當子倉儲的使用者按下 Create pull request 後的畫面: 此時從 coursemdetw 的 pull request 畫面中, 可以看到這個版本與父倉儲的版本沒有衝突, 可以自動合併, 但是 coursemdetw 沒有權限合併, 必須讓父倉儲的管理者 (各組組長將具有此權限), 檢查此一 pull request 的請求內容, 確定沒有問題後, 再將資料納入父倉儲中. 當組長登入 Github, 進入父倉儲之後, 便可以合併上述組員的 pull request, 操作後畫面如下: 此時, 另外一位組員 course-mde-tw, 原先與 coursemdetw 組員同時在組員改版之前 fork 了父倉儲的資料, 但此時 course-mde-tw 若希望能夠取得已經透過 pull request 流程併入父倉儲的資料, 則可以登入 Github 後, 利用反向的 pull request 設定, 就可以更新資料, 取得 coursemdetw 組員併入父倉儲的資料. course-mde-tw 登入 Github 後進入自己的子倉儲, 然後按下 New pull request 的按鈕後, 進入如下的畫面, 其中, 所謂的 pull request reversing 就是按下 switching the base 按鈕. 先看一下上一個畫面中的 base fork 為 2015fallhw/2016springcd 中的 master 分支, 而 head fork 則為 course-mde-tw/2016springcd 中的 master 分支, 表示一般的 pull request 是從子倉儲 (head fork) 將資料併入父倉儲 (base fork). 但是, 現在 course-mde-tw 用戶希望能夠從父倉儲取得最新資料, 因此必須就必須按下 switch the base 後, 如下一個畫面, 讓 base fork 變成 course-mde-tw/2016springcd, 而 head fork 則設為 2015fallhw/2016springcd, 表示此一請求是從父倉儲取版本資料. course-mde-tw 用戶按下上一個畫面中的 Create pull request 按鈕後, 進入下一個畫面, 可以填寫 pull request 的標題與說明. course-mde-tw 填寫完 pull request 的請求後, 按下送出, 就可以在此一 pull request 中具備同意權, 因為版本資料是從父倉儲更新到子倉儲, 若兩端資料沒有衝突就可以直接在 Github 的畫面中, 按下 Merge pull request 自動完成合併, 畫面如下圖.","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/li-yong-github-zhi-xing-xie-tong-she-ji-zhuan-an.html"},{"title":"KMOL 可攜程式系統改版","text":"將原有的 nodejs 目錄刪除, 改用 NodeJSPortable, 位於 apps 目錄下, 仍以 start_ungit.bat 啟動 直接下載: 2016springkmol.7z https://my.pcloud.com/publink/show?code=XZT4I4Ztpna2PMhDtVAOQKD7FI6CyfFf2H7 利用 git clone 下載: https://github.com/chiamingyen/kmol2016.git 在電腦輔助設計室 http://cadlab.mde.tw 時 下載 fix2016.zip .","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/kmol-ke-xi-cheng-shi-xi-tong-gai-ban.html"},{"title":"About Lektor Content Management System","text":"初探 Lektor 內容管理系統, 假如它能在第1時間就支援 Python3, 應該會更棒 http://lucumr.pocoo.org/2015/12/21/introducing-lektor/ https://github.com/lektor/lektor https://github.com/lektor Lektor 的作者說, 我們與其他類似的工具都不相同: https://www.getlektor.com/docs/what/ Lektor 是靜態文件網頁 也是內容管理系統 還能當作程式框架 可以協同, 也允許同步 有人說, Lektor 很像 http://urubu.jandecaluwe.com/ , 但有更好的管理環境 https://www.getlektor.com/docs/what/ 網站的資料就放在 https://github.com/lektor/lektor-website 只不過, 目前的 Desktop 應用程式只能用在 OsX 系統, 而 Python 也只支援 2.7 版, 真是可惜! 有關目前只能支援 Python 2.7 的情形, 幾乎就與當年 Flask 推出時的情況一樣, 也許作者對於 Python 2.7 版比較熟, 可能要再等一陣子, 才能在 Python3 的環境中使用了. 所以, 現階段, 想要靜態網頁系統, 而且自外於 Pelican: https://github.com/getpelican/pelican , 只能先從 http://urubu.jandecaluwe.com/ 看起. 另外, 假如想要脫離 Python3 一些些, 可以從 https://github.com/meteor/meteor 入手.","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/about-lektor-content-management-system.html"},{"title":"Create an online Ethercalc site","text":"利用 OpenShift 與 Ethercalc, 自行建立一個雲端線上試算表 試算表的功能非常多元, 一旦將試算表以多人可即時更新內容的架構搬上雲端, 功能將會更加實用. https://github.com/audreyt/ethercalc 可以說是目前最符合雲端使用的試算表程式, 試算表的引擎採用通用公共授權( https://gist.github.com/audreyt/3985324 , https://www.socialtext.net/open/cpal ). Ethercalc 的實際應用非常簡單, 只要在 https://openshift.redhat.com/app/login 登記一個帳號, 然後登入後, 選擇 Add Application, 在應用程式類別選擇 Other Types 項下的 Node.js 0.10, 自行選擇可用的 Name Space 與應用程式名稱後, 在 Source Code 的欄位中填入 Ethercalc 的原始碼倉儲: https://github.com/audreyt/ethercalc.git 後, 按下 Create Application, 就可以完成 Ethercalc 網站的建立, 例如: http://ethercalc-2012c1.rhcloud.com/30wcwukfpmep (以 2012c1_mde_tw 帳號控管).","tags":"Project","url":"https://chiamingyen.github.io/kmolab/blog/create-an-online-ethercalc-site.html"},{"title":"2016 Spring CD Task0","text":"這個實習任務的目的, 在讓學員根據分組與電腦教室座位編排的問題, 進行思考, 如何以協同方式或流程, 有效完成任務 學期伊始, 一如往常, 各班學員以每 6 人一組為原則, 在 Cadlab 電腦教室安排固定座位, 但是 2016 Spring 開始, 儘管允許學員自行編組, 但是同組學員卻希望故意錯開座位, 讓所有爾後各組的產品設計解題都能夠儘量透過資訊與通訊系統完成, 而且所有溝通流程與內容都能夠存在產品開發專案中. 首先採用 https://ethercalc.tw/ 讓所有上課學員, 以即時同步模式, 填入分組資料, 若以 2a 班級為例, 分組資料中只填入學員學號, 則可以直接從瀏覽器畫面中複製分組資料, 放入 SciTE 中, 存為 2016_cd_2a_1.txt, 若利用 ethercalc 的 clipboard 格式轉檔, 可以存為 csv 格式, 存為 2016_cd_2a_2.txt, 且從學校開課前學員選課資料, 可得選課學員學號名單, 存為 2016_cd_2a_3.txt. Task0 的任務, 就是以各班協同分組後所取得的這 3 個檔案開始, 依據下列敘述, 完成各班的 Cadlab 電腦教室座位表, 讓每一位學員都能夠知道所被分配的學期固定座位, 並在爾後上課依序入座. 任務描述: 每組以 6 人為原則, 至少 4 人, 至多 7 人 各組學員, 以學號遞增排序後, 排序第1者為組長, 負責代表該組與其他組進行溝通 各組的班級分組序號, 則依據各組組長的學號, 再進行各組比序, 以遞增方式排列, 排序第1者為第1組, 其餘依序定下各組序號組別 Cadlab 電腦教室的配置為每列 9 排, 共有 7 列, 因此若每人一台電腦排座位, 可以容納 63 名學員 固定座位命名方式, 以面對講台的最右邊為第1排, 以最靠近講台者為第1列 一旦各組依照學員學號排序定組序後, 第1組的第1名同學, 從第1排第1列開始固定座位, 接著排第二組的第1位同學, 排在第1排的第2列座位, 然後將第三組的第1位同學, 排在第1排的第3列座位, 依此類推 座位安排中, 第1排排至第七列後, 則接著排在第2排的第1列座位上, 且各組若不及 7 位學員時, 則該座位由下一組的順位同學遞補 完成座位編排後, 必須能夠轉為網頁格式, 放入各組的協同倉儲所對應的 gh-pages 網頁或 OpenShift 網頁中 可能的任務變化: 與上述編排座位的問題類似, 在產品開發過程中, 許多設計參數可能因為特定協同團隊的意見而變更 上述座位編排問題, 可能從學號遞增排序, 改為遞減排序或亂數排序 可能從原先的以排 (column) 為主 (也就是先排第1排, 之後排第2排), 改為以列 (row) 為主 (也就是先排第1列, 之後排第2列) 假如電腦教室的配置更動, 從 9 排 7 列改為其他不同配置時, 整個座位安排流程, 就必須因應改變 換言之, 假如上述問題並非採用電腦運算的方法完成, 而以人工或類比的方式進行, 不僅耗費時間, 容易出錯, 而且一旦相關原則變更, 都將重新勞師動眾一番 技術回顧: 針對上述問題, 若希望利用 Python3 進行解題, 需要運用下列相關函式、方法或模組: with open ... as http://openhome.cc/Gossip/Python/WithAs.html readlines https://docs.python.org/3.4/tutorial/inputoutput.html for ... in range https://docs.python.org/3.4/tutorial/controlflow.html?highlight=loop#for-statements len https://docs.python.org/3.4/library/functions.html?#len append https://docs.python.org/3.4/tutorial/datastructures.html split https://docs.python.org/3.4/library/stdtypes.html#str.split list https://docs.python.org/3.4/library/functions.html#func-list sorted https://docs.python.org/3.4/library/functions.html#sorted filter https://docs.python.org/3.4/library/functions.html#filter None, True, not https://docs.python.org/3.4/c-api/none.html https://docs.python.org/3.4/library/constants.html#True https://docs.python.org/3.4/reference/expressions.html#not str https://docs.python.org/3.4/library/functions.html#func-str print https://docs.python.org/3.4/library/functions.html#print g.es http://leoeditor.com/tutorial-scripting.html zip_longest https://docs.python.org/3.4/library/itertools.html#itertools.zip_longest","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/2016-spring-cd-task0.html"},{"title":"computational thinking and digitally literate","text":"運算思維與數位化教育下的未來 https://www.gov.uk/government/publications/national-curriculum-in-england-computing-programmes-of-study/national-curriculum-in-england-computing-programmes-of-study computational thinking and digitally literate 運算思維與數位化教育 Computing has deep links with mathematics, science and design and technology, and provides insights into both natural and artificial systems. 運算與數學、科學、設計及科技都有很緊密的關聯, 能讓我們充份了解自然或人造的系統. Computing also ensures that pupils become digitally literate – able to use, and express themselves and develop their ideas through, information and communication technology – at a level suitable for the future workplace and as active participants in a digital world. 運算同時確保學習者俱備數位認知, 能夠運用、表達並透過資訊與通訊科技開展理念, 並在未來的數位世界職場中成為積極的參與者. Aims: 運算教育的目標: can understand and apply the fundamental principles and concepts of computer science, including abstraction, logic, algorithms and data representation 能夠了解並應用電腦科學的基本原理與概念, 包括抽象、邏輯, 演算法, 以及數據表達. can analyse problems in computational terms, and have repeated practical experience of writing computer programs in order to solve such problems 能夠透過運算術語分析問題, 並且運用多重的程式編寫實務經驗, 來解決問題. can evaluate and apply information technology, including new or unfamiliar technologies, analytically to solve problems 能夠應用資訊科技, 對全新或原本並不熟悉的科技進行評量, 能夠採解析方法解決各種問題. are responsible, competent, confident and creative users of information and communication technology 成為肯負責、能勝任、具備信心與創意的資訊及通信科技使用者.","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/computational-thinking-and-digitally-literate.html"},{"title":"2016 Spring Web based Content Management","text":"2016 Spring 網際內容管理 W1 2016 Spring 網際內容管理: 可攜套件倉儲: https://github.com/chiamingyen/kmol2016 kmol2016 下載: https://my.pcloud.com/publink/show?code=XZH5J4ZOj9C9aomi5F1DtnuQNIHYLDO7EjX Github 倉儲: https://github.com/2015fallhw/2016springwcm Github Pages 網站: http://2015fallhw.github.io/2016springwcm/ 網際繪圖程式庫 (與 CD 課程共用): https://github.com/2015fallhw/arcidau Github Pages 網站: http://2015fallhw.github.io/arcidau/ 結合 http://reeborg.ca/ 與 https://codemirror.net/ 還有 https://github.com/google/blockly , 我們能否自行打造類似 https://studio.code.org/hoc/2 的網站, 並且逐步建構泛用型網際 2D/3D 機械設計資源中心, 以探索、儲存與開發機械設計相關內容的網站邁進. 參考: https://github.com/josephg/Chipmunk-js https://github.com/viblo/pymunk https://www.youtube.com/user/thang010146/videos (使用 AutoDesk Inventor 建置) 機構介紹 1 (pdf) 機構介紹 2 (pdf) 機構介紹 3 (pdf) 機構介紹 4 (pdf) http://www.algodoo.com/ Linkage http://chiamingyen.github.io/linkage/ 操作步驟: 按下 c 刪除畫面所有內容 利用滑鼠左鍵, 在螢幕點出4個四連桿的4個關鍵點 利用滑鼠左鍵, 點選第一個點 ,令其變為藍色 再以滑鼠左鍵, 點選第1桿件的第二個點, 滑鼠按下後, 先不要放開, 等左手按下 Alt 後, 並讓 Alt 鍵與滑鼠左鍵同時放開, 就可以順利利用第1點與第2點建立一個連桿 利用相同方法 ,建立第2與第3可動桿 以滑鼠左鍵, 選擇第1點, 然後按下 f 鍵, 表示要固定這個點, 此時點的顏色轉為紅色, 並且釋出其對應的自由度 再用相同方法 ,固定第四點 選擇要追蹤的點, 然後按下 t (tracking) 機構的作動則依靠, 選追蹤點, 左手按住 Shift 鍵, 然後移動滑鼠位置, 讓追蹤點隨滑鼠移動, 即可留下特定點的運動軌跡. 歷年課程回顧 2015 Spring 網際內容管理: Wordpress: http://wordpress-2015course.rhcloud.com/?cat=2 CMSimply 網站 Github 倉儲: https://github.com/coursemdetw/2015wcm Gitbook: https://www.gitbook.com/book/coursemde/2015wcm Vimeo 教學影片: https://vimeo.com/tag:2015wcm","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/2016-spring-web-based-content-management.html"},{"title":"2016 Spring Collaborative Product Design Course","text":"2016 Spring 產品設計實習課程 W1 2016 Spring 協同產品設計實習: 可攜套件倉儲: https://github.com/chiamingyen/kmol2016 kmol2016 下載: https://my.pcloud.com/publink/show?code=XZH5J4ZOj9C9aomi5F1DtnuQNIHYLDO7EjX 啟動倉儲 https://github.com/2015fallhw/test , ungit: https://github.com/FredrikNoren/ungit 工具導入 網際繪圖程式庫 (與 WCM 課程共用): https://github.com/2015fallhw/arcidau Github Pages 網站: http://2015fallhw.github.io/arcidau/ Task 1: 如何求出下列圖形中的4個相切點座標? 如何自行利用程式畫出這個 2D 的輪廓圖? (or Solvespace 或 PTC Creo Parametric 或 Onshape 是如何讓使用者運用繪圖工具完成此類, 具有特定尺寸與相關約束條件的產品輪廓圖) 動機 1: 從 http://rattlecad.sourceforge.net/ 可以得知桌面下單機的客製化自行車零組件繪圖工具, 能讓使用者根據自身尺寸, 訂製各零組件, 因此若能透過網路協同, 讓產品使用者、零件設計者、標準零件供應商與零組件製造商, 共同參與某一特定產品的設計與製造, 協同者需要俱備那些條件, 打造那些系統?該如何協同? 解題規劃: 該如何求出相切點的座標?我們擁有那些工具?在近端?在遠端?採用商用套件或自由開放工具?學會之後, 這些工具能否讓我們帶出學校合法使用? 求出各相切點座標後, 該如何進行繪圖?我們擁有那些工具?採用商用套件或自由開放工具?學會之後, 這些工具能否讓我們帶出學校合法使用? 畫出所需要的輪廓圖之後, 該如何以分組協同的方式打造類似 http://rattlecad.sourceforge.net/ 的客製化產品設計工具? 協同倉儲: https://github.com/2015fallhw/2016springcd 協同倉儲對應 Github Pages 網站: http://2015fallhw.github.io/2016springcd/ 技術回顧: Git 的功能? Github Pages 的功能? Python3 的功能? http://jupyter.org/ 的功能? OpenShift 的功能? Html5 與 Canvas 的功能? http://2015fallhw.github.io/arcidau/ 所提供的功能? Vimeo 的功能? https://www.pcloud.com/ 的功能? (用來取代 copy.com) 歷年課程回顧 2015 Spring 協同產品設計實習: Wordpress: http://wordpress-2015course.rhcloud.com/?cat=3 CMSimply: http://cd-cadp.rhcloud.com/ Vimeo 教學影片: https://vimeo.com/tag:2015cd 2014 Spring 協同產品設計實習: Dokuwiki 網站 2a Github 倉儲: https://github.com/coursemdetw/2014cda 2a OpenShift 同步網站: http://2014cda-mdenfu.rhcloud.com/ (以 2014cdaproject@ 帳號負責維護) 2b Github 倉儲: https://github.com/coursemdetw/2014cdb 2b OpenShift 同步網站: http://2014cdb-mdenfu.rhcloud.com/ (以 2014cdaproject@ 帳號負責維護) 同年 C2 Github 倉儲: https://github.com/coursemdetw/2014c2 同年程式語言(二)課程網頁: http://2014c2-mdenfu.rhcloud.com/ (以 2014cdaproject@ 帳號負責維護) Vimeo 教學影片: W1-1 https://vimeo.com/87531218 W1-2 https://vimeo.com/87534543 W2-a1 https://vimeo.com/88125916 W2-b1 https://vimeo.com/88225866 W2-b2 https://vimeo.com/88229349 W2-3 https://vimeo.com/88230051 W3-a1 https://vimeo.com/88719135 W3-a2 https://vimeo.com/88720436 W3-b1 https://vimeo.com/88847174 W3-b2 https://vimeo.com/88855247 W4-a1 https://vimeo.com/89371363 W5-a1 https://vimeo.com/89371363 W5-a2 https://vimeo.com/89980644 W5-a3 https://vimeo.com/89986371 W5-b1 https://vimeo.com/90098081 W6-a1 https://vimeo.com/90607449 W6-a2 https://vimeo.com/90612598 W6-b1 https://vimeo.com/90726318 W6-b2 https://vimeo.com/90731025 W7-b1 https://vimeo.com/91490333 W7-b2 https://vimeo.com/91491493 W11-a1 https://vimeo.com/94104234 Camstudio 與 Zoomit https://vimeo.com/90818335 Video Converter https://vimeo.com/90818467 W12-a1 https://vimeo.com/95069384 W13-a1 https://vimeo.com/95823422 W13-a2 https://vimeo.com/95823554 W13-b1 https://vimeo.com/95946099 W13-b2 https://vimeo.com/95946189 W14-a1 https://vimeo.com/96546108 W14-b1 https://vimeo.com/96671856 2013 Spring 協同產品設計實習: http://blog.kmol.info/indexd65e.html?cat=8 2013 CP: http://cp-2013fall.rhcloud.com/ (以 2013fall@mde.tw 帳號控管) 2012 Spring 協同產品設計實習: http://blog.kmol.info/indexd06b.html?cat=8&paged=3 2011 Spring 協同產品設計實習: http://blog.kmol.info/index8040.html?cat=8&paged=4","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/2016-spring-collaborative-product-design-course.html"},{"title":"Genetic Algorithm in Python","text":"利用 Python 實現基因演算 利用\"Genetic Algorithm in python jupyter\" 查詢, 得到如下的相關連結: https://github.com/DEAP/deap , Deap 1.0.2 Genetic Algorithm notebook Kalman and Bayesian Filters in Python Elements of Evoluationary Algorithms , related Course , Evolutionary Computation with IPython https://github.com/jakevdp/JSAnimation https://github.com/garethflowers/vscode-portable https://github.com/dmahugh/crawlerino http://paraschopra.com/sourcecode/GP/ https://github.com/cpmech/CIVL4250py/tree/master/2015 https://github.com/remiomosowon/pyeasyga https://github.com/yati-sagade/Genetic-Algorithm-Demo 開始: http://lethain.com/genetic-algorithms-cool-name-damn-simple/ , trying to create a list of N numbers that equal X when summed together. Each suggested solution for a genetic algorithm is referred to as an individual. In our current problem, each list of N numbers is an individual. from random import randint def individual ( length , min , max ): 'Create a member of the population.' return [ randint ( min , max ) for x in range ( length ) ] ''' individual(5,0,100) [79, 0, 20, 47, 40] individual(5,0,100) [64, 1, 25, 84, 87] ''' The collection of all individuals is referred to as our population. def population ( count , length , min , max ): \"\"\" Create a number of individuals (i.e. a population). count: the number of individuals in the population length: the number of values per individual min: the min possible value in an individual's list of values max: the max possible value in an individual's list of values \"\"\" return [ individual ( length , min , max ) for x in range ( count ) ] ''' population(3,5,0,100) [[51, 55, 73, 0, 80], [3, 47, 18, 65, 55], [17, 64, 77, 43, 48]] ''' Next we need a way to judge the how effective each solution is; to judge the fitness of each individual. Predictably enough, we call this the fitness function. For our problem, we want the fitness to be a function of the distance between the sum of an individuals numbers and the target number X. We can implement the fitness function as follows: from operator import add def fitness ( individual , target ): \"\"\" Determine the fitness of an individual. Lower is better. individual: the individual to evaluate target: the sum of numbers that individuals are aiming for \"\"\" sum = reduce ( add , individual , 0 ) return abs ( target - sum ) ''' x = individual(5,0,100) fitness(x, 200) 165 ''' Personally, I'd prefer to have a high fitness score correlate to a fit individual rather than the current implementation where a perfectly fit individual has a fitness of 0, and the higher the worse. Ah well, regardless, keep that detail in mind while following this code.http://paraschopra.com/sourcecode/GP/index.php It's also helpful to create a function that will determine a population's average fitness. def grade ( pop , target ): 'Find average fitness for a population.' summed = reduce ( add , ( fitness ( x , target ) for x in pop ), 0 ) return summed / ( len ( pop ) * 1.0 ) ''' x = population(3,5,0,100) target = 200 grade(x, target) 116 ''' Now we just need a way evolve our population; to advance the population from one generation to the next. Evolution This is the secret sauce of genetic algorithms, where secret means fairly obvious, and sauce means sauce. Consider a population of elk which are ruthlessly hunted by a pack of wolves. With each generation the weakest are eaten by the wolves, and then the strongest elk reproduce and have children. Abstract those ideas a bit, and we can implement the evolution mechanism. For each generation we'll take a portion of the best performing individuals as judged by our fitness function. These high-performers will be the parents of the next generation. We'll also randomly select some lesser performing individuals to be parents, because we want to promote genetic diversity. Abandoning the metaphor, one of the dangers of optimization algorithms is getting stuck at a local maximum and consequently being unable to find the real maximum. By including some individuals who are not performing as well, we decrease our likelihood of getting stuck. Breed together parents to repopulate the population to its desired size (if you take the top 20 individuals in a population of 100, then you'd need to create 80 new children via breeding). In our case, breeding is pretty basic: take the first N/2 digits from the father and the last N/2 digits from the mother. father = [ 1 , 2 , 3 , 4 , 5 , 6 ] mother = [ 10 , 20 , 30 , 40 , 50 , 60 ] child = father [: 3 ] + mother [ 3 :] print ( child ) ''' [1,2,3,40,50,60] ''' It's okay to have one parent breed multiple times, but one parent should never be both the father and mother of a child. Merge together the parents and children to constitute the next generation's population. Finally we mutate a small random portion of the population. What this means is to have a probability of randomly modifying each individual. from random import random , randint chance_to_mutate = 0.01 for i in population : if chance_to_mutate > random (): place_to_modify = randint ( 0 , len ( i )) i [ place_to_modify ] = randint ( min ( i ), max ( i )) This--just like taking individuals who are not performing particularly well--is to encourage genetic diversity, i.e. avoid getting stuck at local maxima. Putting it all together, the code to evolve a generation can be implemented like this: def evolve ( pop , target , retain = 0.2 , random_select = 0.05 , mutate = 0.01 ): graded = [ ( fitness ( x , target ), x ) for x in pop ] graded = [ x [ 1 ] for x in sorted ( graded )] retain_length = int ( len ( graded ) * retain ) parents = graded [: retain_length ] # randomly add other individuals to promote genetic diversity for individual in graded [ retain_length :]: if random_select > random (): parents . append ( individual ) # mutate some individuals for individual in parents : if mutate > random (): pos_to_mutate = randint ( 0 , len ( individual ) - 1 ) # this mutation is not ideal, because it # restricts the range of possible values, # but the function is unaware of the min/max # values used to create the individuals, individual [ pos_to_mutate ] = randint ( min ( individual ), max ( individual )) # crossover parents to create children parents_length = len ( parents ) desired_length = len ( pop ) - parents_length children = [] while len ( children ) < desired_length : male = randint ( 0 , parents_length - 1 ) female = randint ( 0 , parents_length - 1 ) if male != female : male = parents [ male ] female = parents [ female ] half = len ( male ) / 2 child = male [: half ] + female [ half :] children . append ( child ) parents . extend ( children ) return parents Now we've written all the pieces of a genetic algorithm, and we just have to try it out and see if it works. Testing It Out Here is a simple way to use the code we've written: target = 371 p_count = 100 i_length = 5 i_min = 0 i_max = 100 p = population ( p_count , i_length , i_min , i_max ) fitness_history = [ grade ( p , target ),] for i in range ( 100 ): p = evolve ( p , target ) fitness_history . append ( grade ( p , target )) for datum in fitness_history : print ( datum ) Running that code, you'll get to watch as generations' fitness gradually (but non-deterministically) approach zero. The output of one of my runs looked like this: With 20% survival (plus an additional 5% of other individuals) and 1% mutation, it only took nine generations to reach a perfect solution. Then the algorithm joyfully runs in circles for as long as you'll let the mutations continue But this is a good feeling right? If it only took us half an hour to solve a problem of this magnitude, imagine what we could do with a day. A genetic algorithm for optimizing your Apache2 configuration file for number of children processes? Easy as pie. There are a nearly endless variety of techniques for and variations of genetic algorithms, but all of them rest on this straight forward foundation. We'll look more at those sometime in the future, but for now you know enough to go out and throw together something interesting. \"\"\" # Example usage from genetic import * target = 371 p_count = 100 i_length = 6 i_min = 0 i_max = 100 p = population(p_count, i_length, i_min, i_max) fitness_history = [grade(p, target),] for i in range(100): p = evolve(p, target) fitness_history.append(grade(p, target)) for datum in fitness_history: print(datum) \"\"\" from random import randint , random from operator import add def individual ( length , min , max ): 'Create a member of the population.' return [ randint ( min , max ) for x in range ( length ) ] def population ( count , length , min , max ): \"\"\" Create a number of individuals (i.e. a population). count: the number of individuals in the population length: the number of values per individual min: the minimum possible value in an individual's list of values max: the maximum possible value in an individual's list of values \"\"\" return [ individual ( length , min , max ) for x in xrange ( count ) ] def fitness ( individual , target ): \"\"\" Determine the fitness of an individual. Higher is better. individual: the individual to evaluate target: the target number individuals are aiming for \"\"\" sum = reduce ( add , individual , 0 ) return abs ( target - sum ) def grade ( pop , target ): 'Find average fitness for a population.' summed = reduce ( add , ( fitness ( x , target ) for x in pop )) return summed / ( len ( pop ) * 1.0 ) def evolve ( pop , target , retain = 0.2 , random_select = 0.05 , mutate = 0.01 ): graded = [ ( fitness ( x , target ), x ) for x in pop ] graded = [ x [ 1 ] for x in sorted ( graded )] retain_length = int ( len ( graded ) * retain ) parents = graded [: retain_length ] # randomly add other individuals to # promote genetic diversity for individual in graded [ retain_length :]: if random_select > random (): parents . append ( individual ) # mutate some individuals for individual in parents : if mutate > random (): pos_to_mutate = randint ( 0 , len ( individual ) - 1 ) # this mutation is not ideal, because it # restricts the range of possible values, # but the function is unaware of the min/max # values used to create the individuals, individual [ pos_to_mutate ] = randint ( min ( individual ), max ( individual )) # crossover parents to create children parents_length = len ( parents ) desired_length = len ( pop ) - parents_length children = [] while len ( children ) < desired_length : male = randint ( 0 , parents_length - 1 ) female = randint ( 0 , parents_length - 1 ) if male != female : male = parents [ male ] female = parents [ female ] half = len ( male ) / 2 child = male [: half ] + female [ half :] children . append ( child ) parents . extend ( children ) return parents 在 Ubuntu 安裝 numpy 與 scipy for python3, 但 scipy 無法運作 sudo apt-get install python3-numpy python3-scipy 必須先安裝下列程式庫 install python development packages and g++ apt-get install -y python3-dev g++ install dependencies for scipy apt-get install -y libblas-dev liblapack-dev gfortran 然後再 sudo -H pip3 install scipy 以下則為 binary coded Genetic Algorithm in Python3: #encoding=utf8 # genetic.py # import random import operator # for Intersect from math import * MAXIMIZE , MINIMIZE = 11 , 22 class Individual : # 染色體先設為 None chromosome = None # 得分也先設為 None score = None # Here the size of var depends on var_number print # var 變數的元素個數取決於 var_number 的個數 (即變數個數) var = [] # 表示適應值變數個數有兩個 var_number = 2 #先將 var 數列中元素都設為 0 for i in range ( var_number ): var . append ( 0 ) # 等位基因表示各基因可選的內容, 這裡表示不是 0 就是 1 alleles = ( 0 , 1 ) # 2**10 = 32*32 = 1024, 表示若用十個 binary 位數來表示整數, 可以表示從 0 到 1023 的數值大小 # 若也用另外 十個 binary 位數來表示小數值, 則也是 0 到 1023 的數值表示能力, # 而再加一個表示正負的代表 binary 位數, 每一個變數需要 21 個 binary numbers # 以下為參數可負數時的編碼考量 #前10為小數,後10為整數,第21則為正負號 #0~9表示小數,10~19表示整數,而指標第20則表示第一數的正號或負號,若為0則表示正,若為1表示負號. #21~30表示第二數的小數部分,31~40則表示第二數的整數部分,第41指標則表示第二數的正號或負號 #42~51表示第三數的小數部分,52~61則表示第二數的整數部分,第62指標則表示第三數的正號或負號 # -1023 ~ 1023 #length = 21*var_number,若接受負數參數,則必須同步修改 20->21 # 因為這裡只接受正的變數值, 所以每一個變數需要 20 個 binary 位數 length = 20 * var_number seperator = '' optimization = MINIMIZE def __init__ ( self , chromosome = None ): self . chromosome = chromosome or self . _makechromosome () self . score = None # set during evaluation ''' bitwise operators (binary left shift): The left operands value is moved left by the number of bits specified by the right operand. x << y Returns x with the bits shifted to the left by y places (and new bits on the right-hand-side are zeros). This is the same as multiplying x by 2**y. ''' # 根據染色體各位元的值轉為 10 進位值 def _getvar ( self , chromosome = None ): # x 起始值設為 0 x = 0 for i in range ( 0 , self . var_number ): # 先根據前 20 個位元值, 透過 binary left shift 轉為 10 進位之後, 再轉為對應小數 for j in range ( i * 20 , i * 20 + 10 ): x += self . chromosome [ j ] << ( j - ( i * 20 )) # 因為前 20 個 binary 數, 負責 10 進位數的小數點後 3 個位數, 只要轉為 10 進位值之後, 若大於 999, 則僅取 999, # 再除以 1000, 可以得到 .999 表示 .999 為最大的小數表示數, 不要因為大於 1000 後若除以 1000 將進位到整數, 會與整數有交互影響 if ( x > 999 ): x = 999 x /= 1000. # 整數部份 0 ~ 1023 的表示範圍則沒有問題, 利用 bitwise 轉換後, 直接取整數值 for j in range ( i * 20 + 10 , i * 20 + 20 ): x += self . chromosome [ j ] << ( j - ( i * 20 + 10 )) self . var [ i ] = x return self . var ''' for -1023 ~ 1023,當設計變數可以接受負值時使用,每一變數使用21個 bit strings #for design variable -1023 ~1023 for i in range(self.var_number): x = 0 for j in range(i*21, i*21+10): x += self.chromosome[j]<<(j-(i*21)) if (x>999): x = 999 x /= 1000. for j in range(i*(21)+10, i*(21)+20): x += self.chromosome[j]<<(j-(i*21+10)) # 各變數範圍第 21 位數若為 1, 則表示該數為負數 if(self.chromosome[i*(21)+20] == 1): self.var[i] = -x else: self.var[i] = x # 讓 x 再設回原值 0 表示內定各變數為正數 x = 0 return self.var ''' # 建立染色體 def _makechromosome ( self ): \"makes a chromosome from randomly selected alleles.\" return [ random . choice ( self . alleles ) for gene in range ( self . length )] # 計算適應值 def evaluate ( self , optimum = None ): \"this method MUST be overridden to evaluate individual fitness score.\" pass # 交配方法 def crossover ( self , other ): \"override this method to use your preferred crossover method.\" return self . _twopoint ( other ) # 突變方法 def mutate ( self , gene ): \"override this method to use your preferred mutation method.\" self . _pick ( gene ) # sample mutation method def _pick ( self , gene ): \"chooses a random allele to replace this gene's allele.\" self . chromosome [ gene ] = random . choice ( self . alleles ) # sample crossover method def _twopoint ( self , other ): \"creates offspring via two-point crossover between mates.\" left , right = self . _pickpivots () def mate ( p0 , p1 ): chromosome = p0 . chromosome [:] # 交配時,以p0的基因為基礎(複製整個 p0 的染色體內容 chromosome [ left : right ] = p1 . chromosome [ left : right ] # 接續上一個 p0 的染色體內容,將索引 left 至 right 的內容,替換成 p1 的基因 child = p0 . __class__ ( chromosome ) child . _repair ( p0 , p1 ) return child return mate ( self , other ), mate ( other , self ) # some crossover helpers ... def _repair ( self , parent1 , parent2 ): \"override this method, if necessary, to fix duplicated genes.\" pass def _pickpivots ( self ): left = random . randrange ( 1 , self . length - 2 ) right = random . randrange ( left , self . length - 1 ) return left , right # # other methods # def __repr__ ( self ): \"returns string representation of self\" ''' return '<%s chromosome=\"%s\" score=%s var=%s>' % \\ (self.__class__.__name__, self.seperator.join(map(str,self.chromosome)), self.score,self._getvar(self.chromosome)) ''' return '< %s score= %s var= %s >' % \\ ( self . __class__ . __name__ , self . score , self . _getvar ( self . chromosome )) # since the __cmp__ special function is gone use the __lt__ in stead # use the expression (a > b) - (a < b) as the equivalent for cmp(a, b) #def __cmp__(self, other): # these are for python 3 def __cmp__ ( self , other ): if self . optimization == MINIMIZE : #return cmp(self.score, other.score) return ( self . score > other . score ) - ( self . score < other . score ) else : # MAXIMIZE #return cmp(other.score, self.score) return ( other . score > self . score ) - ( other . score < self . score ) def __lt__ ( self , other ): return self . __cmp__ ( other ) < 0 def __le__ ( self , other ): return self . __cmp__ ( other ) <= 0 def __gt__ ( self , other ): return self . __cmp__ ( other ) > 0 def __ge__ ( self , other ): return self . __cmp__ ( other ) >= 0 def copy ( self ): twin = self . __class__ ( self . chromosome [:]) twin . score = self . score return twin class Environment ( object ): x = [ 0 ] y = [ 0 ] def __init__ ( self , kind , population = None , size = 100 , maxgenerations = 100 , crossover_rate = 0.90 , mutation_rate = 0.07 , optimum = None ): self . kind = kind self . size = size self . optimum = optimum self . population = population or self . _makepopulation () for individual in self . population : individual . evaluate ( self . optimum ) self . crossover_rate = crossover_rate self . mutation_rate = mutation_rate self . maxgenerations = maxgenerations self . generation = 0 self . report () def _makepopulation ( self ): return [ self . kind () for individual in range ( self . size )] def run ( self ): while not self . _goal (): self . step () def _goal ( self ): return self . generation > self . maxgenerations or \\ self . best . score == self . optimum def step ( self ): # this sort is not working with python 3.0, modification is needed self . population . sort () self . _crossover () self . generation += 1 self . report () self . x . append ( self . generation ) # 設定為只附加所選定範圍的值,這裡只取大於或等於 0 的 score 值 if self . best . score <= 5 : self . y . append ( self . best . score ) else : self . y . append ( 5 ) def _crossover ( self ): next_population = [ self . best . copy ()] while len ( next_population ) < self . size : mate1 = self . _select () if random . random () < self . crossover_rate : mate2 = self . _select () offspring = mate1 . crossover ( mate2 ) else : offspring = [ mate1 . copy ()] for individual in offspring : self . _mutate ( individual ) individual . evaluate ( self . optimum ) next_population . append ( individual ) self . population = next_population [: self . size ] def _select ( self ): \"override this to use your preferred selection method\" return self . _tournament () def _mutate ( self , individual ): for gene in range ( individual . length ): if random . random () < self . mutation_rate : individual . mutate ( gene ) # # sample selection method # def _tournament ( self , size = 8 , choosebest = 0.90 ): competitors = [ random . choice ( self . population ) for i in range ( size )] competitors . sort () if random . random () < choosebest : return competitors [ 0 ] else : return random . choice ( competitors [ 1 :]) def best (): doc = \"individual with best fitness score in population.\" def fget ( self ): return self . population [ 0 ] return locals () best = property ( ** best ()) def report ( self ): ''' print (\"=\"*70) print (\"generation: \", self.generation) print (\"best: \", self.best) ''' g . es ( \"=\" * 70 ) g . es ( \"generation: \" , self . generation ) g . es ( \"best: \" , self . best ) # 以上為 genetic.py 目前將兩者結合在一起 #encoding=utf8 # volume.py - useage example # # the fittest individual will have a chromosome consisting of 40 '1's # # #import genetic class Volume ( Individual ): optimization = MAXIMIZE def evaluate ( self , optimum = None ): SURFACE = 80 # self.score is the fitness value self . _getvar ( self . chromosome ) x = self . var [ 0 ] y = self . var [ 1 ] z = ( SURFACE - x * y ) / ( 2. * ( x + y )) fitness_value = x * y * z self . score = fitness_value def mutate ( self , gene ): self . chromosome [ gene ] = not self . chromosome [ gene ] # bit flip class Intersect ( Individual ): optimization = MINIMIZE def evaluate ( self , optimum = None ): # self.score is the fitness value self . _getvar ( self . chromosome ) t = self . var [ 0 ] deg = pi / 180 theta = self . var [ 1 ] * deg xtarget = 0.75 / 2 ytarget = 0.5 x = t * sqrt ( - 225 * sin ( theta ) ** 2 + 529 ) / 10 - sqrt ( - 225 * sin ( theta ) ** 2 + 529 ) / 92 + 3 * cos ( theta ) / 2 y = ( - 3 * t / 2 + 123 / 92 ) * sin ( theta ) # 適應值 fitness_value = pow ( x - xtarget , 8 ) + pow ( y - ytarget , 8 ) # 指定 t 的範圍, 小於 1 大於 0, 否則給予處罰 if t > 1 : fitness_value += 1000 if t < 0 : fitness_value += 1000 # 指定 theta 的範圍, 小於 2pi 大於 0, 否則給予處罰 if theta > 2 * pi : fitness_value += 1000 if theta < 0 : fitness_value += 1000 self . score = fitness_value def mutate ( self , gene ): self . chromosome [ gene ] = not self . chromosome [ gene ] # bit flip if __name__ == \"__main__\" : #env = Environment(Volume, size=500, maxgenerations=100) env = Environment ( Intersect , size = 500 , maxgenerations = 100 ) env . run () ~~~python","tags":"Python","url":"https://chiamingyen.github.io/kmolab/blog/genetic-algorithm-in-python.html"},{"title":"Leo Editor 安裝","text":"Leo Editor 的執行需要 Python3, PyQt 與 Leo Editor 程式碼 Leo Editor 安裝 Windows: 安裝 Python3: https://www.python.org/downloads/ 安裝 PyQt: https://www.riverbankcomputing.com/software/pyqt/download 取得 Leo Editor 程式碼: https://github.com/leo-editor/leo-editor 啟動程式 (launchLeo.py 檔案): #!Y:\\IDE\\Python33\\python.exe # launchLeo \"\"\" Leo launcher script A minimal script to launch leo. \"\"\" import leo.core.runLeo leo . core . runLeo . run () python.exe launchLeo.py Ubuntu: 先解除舊版的 Leo Editor: sudo pip3 uninstall leo 再安裝最新版 Leo Editor: sudo pip3 install https://github.com/leo-editor/leo-editor/archive/master.zip 啟動: leo& Leo 程式方法 g . es ( 'Hello World!' ) 利用 Ctrl+b 執行 內建變數: c, g 與 p c 是包含程式碼內容的命令變數 (commander) c 命令變數是定義在 leoCommands.py 中的指令類別案例, 透過 c 可以擷取 Leo 的原始碼與所有大綱資料. g 變數則是 Leo 的 leo.core.leoGlobals 模組. c: The commander of the present outline. g: The leo.core.leoGlobals module. p: The presently selected position, c.p. g.es 是 Leo 的列印函式 (echo string). p 則是定義在 leoNodes.py 中表示目前所選擇節點的位置類別所建立的案例. p.v 則是 vnode 物件, vnode 是在 Leo 大綱中包含所有永久資料. vnodes 是定義在 leoNodes.py 中由 vnode 類別所建立的案例. 每一個 vnode 代表所在大綱節點的所有資料. for p in c . all_positions (): print ( ' ' * p . level () + p . h )","tags":"Project","url":"https://chiamingyen.github.io/kmolab/blog/leo-editor-an-zhuang.html"},{"title":"Brython 平面齒輪動態模擬","text":"利用 Brython 模擬平面齒輪旋轉. window.onload=function(){ brython(1); } Bezier 曲線與滑鼠: from browser import window #from javascript import JSConstructor # for version before 3.3.1 #cango = JSConstructor(window.Cango2D) cango = window.Cango2D.new shapedefs = window.shapeDefs #obj2d = JSConstructor(window.Obj2D) obj2d = window.Obj2D.new cgo = cango(\"plotarea\") x1, y1 = 40, 20 cx1, cy1 = 90, 120 x2, y2 = 120, 100 cx2, cy2 = 130, 20 cx3, cy3 = 150, 120 x3, y3 = 180, 60 def dragC1(mousePos): global cx1, cy1 cx1 = mousePos.x cy1 = mousePos.y drawCurve() def dragC2(mousePos): global cx2, cy2 cx2 = mousePos.x cy2 = mousePos.y drawCurve() def dragC3(mousePos): global cx3, cy3 cx3 = mousePos.x cy3 = mousePos.y drawCurve() def drawCurve(): # curve change shape so it must be re-draw each time # draw a quadratic bezier from x1,y2 to x2,y2 qbez = obj2d(['M', x1, y1, 'Q', cx1, cy1, x2, y2], \"PATH\", { \"strokeColor\":'blue'}) cbez = obj2d(['M', x2, y2, 'C', cx2, cy2, cx3, cy3, x3, y3], \"PATH\", { \"strokeColor\":'green'}) # show lines to control point L1 = obj2d(['M', x1, y1, 'L', cx1, cy1, x2, y2], \"PATH\", { \"strokeColor\":\"rgba(0, 0, 0, 0.2)\", \"dashed\":[4]}) # semi-transparent gray L2 = obj2d(['M', x2, y2, 'L', cx2, cy2], \"PATH\", { \"strokeColor\":\"rgba(0, 0, 0, 0.2)\", \"dashed\":[4]}) L3 = obj2d(['M', x3, y3, 'L', cx3, cy3], \"PATH\", { \"strokeColor\":\"rgba(0, 0, 0, 0.2)\", \"dashed\":[4]}) # draw draggable control pointsCangoAnimation-3v01.js c1.transform.reset() c1.transform.translate(cx1, cy1) c2.transform.reset() c2.transform.translate(cx2, cy2) c3.transform.reset() c3.transform.translate(cx3, cy3) grp = cgo.createGroup2D(qbez, cbez, L1, L2, L3, c1, c2, c3) cgo.renderFrame(grp) cgo.clearCanvas(\"lightyellow\") cgo.setWorldCoords(0, 0, 200) # draggable control points c1 = obj2d(shapedefs.circle(4), \"SHAPE\", {\"fillColor\":'red'}) c1.enableDrag(None, dragC1, None) c2 = c1.dup() c2.enableDrag(None, dragC2, None) c3 = c1.dup() c3.enableDrag(None, dragC3, None) drawCurve(); 使用 Cango 畫齒輪輪廓: # 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容 from browser import document as doc # 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換 from browser import window # 針對 Javascript 既有的物件, 則必須透過 JSConstructor 轉換 #from javascript import JSConstructor import math # 主要用來取得畫布大小 canvas = doc[\"gear1\"] # 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx #ctx = canvas.getContext(\"2d\") # 針對類別的轉換, 將 Cango.js 中的 Cango 物件轉為 Python cango 物件 #cango = JSConstructor(window.Cango) cango = window.Cango.new # 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換 shapedefs = window.shapeDefs # 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形 # in CangoAnimation.js #interpolate1 = window.interpolate # Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件 #cobj = JSConstructor(window.Cobj) cobj = window.Cobj.new #creategeartooth = JSConstructor(window.createGearTooth) creategeartooth = window.createGearTooth.new # 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id=\"gear1\" 的 canvas 上 cgo = cango(\"gear1\") ###################################### # 畫正齒輪輪廓 ##################################### # n 為齒數 n = 17 # pa 為壓力角 pa = 25 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth m = 0.8*canvas.width/n # pr 為節圓半徑 pr = n*m/2 # gear Pitch radius # generate gear data = creategeartooth(m, n, pa) # Brython 程式中的 print 會將資料印在 Browser 的 console 區 #print(data) ''' data 印出來為: M 代表 Move to, L 代表 Line to, C 代表 Curve to 參考: https://www.w3.org/TR/SVG11/paths.html 齒輪函式庫: http://cadlab.mde.tw/post/js/gearUtils.js ['M', 213.42546567394663, -26.249132721692735, 'L', 216.4771485764625, -26.59457489332413, 'C', 218.01364355836117, -26.670135871173535, 222.6241377296874, -26.675359459917235, 230.33407980945245, -24.786115738049222, 239.516053270179, -22.484881644156854, 252.57720520079252, -17.521220042103984, 268.1953141424361, -6.908892817203213, 'A', 268.2352941176471, 268.2352941176471, 0, 0, 1, 268.1953141424361, 6.908892817203213, 'C', 252.57720520079252, 17.521220042103984, 239.516053270179, 22.484881644156854, 230.33407980945245, 24.786115738049222, 222.6241377296874, 26.675359459917235, 218.01364355836117, 26.670135871173535, 216.4771485764625, 26.59457489332413, 'L', 213.42546567394663, 26.249132721692735, 'A', 10.588235294117652, 10.588235294117652, 0, 0, 0, 201.7022692356982, 34.938415176795026, 'A', 204.70588235294116, 204.70588235294116, 0, 0, 1, 200.70297598253308, 40.28416192067229, 'A', 10.588235294117652, 10.588235294117652, 0, 0, 0, 208.49560022899982, 52.62158351789785] ''' gearTooth = cobj(data, \"SHAPE\", { \"fillColor\":\"#ddd0dd\", \"border\": True, \"strokeColor\": \"#606060\" }) gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中 gear = gearTooth.dup() # gear 為單一齒的輪廓資料 #cgo.render(gearTooth) # 利用單齒輪廓旋轉, 產生整個正齒輪外形 for i in range(1, n): # 將 gearTooth 中的資料複製到 newTooth newTooth = gearTooth.dup() # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear newTooth.rotate(360*i/n) # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號 gear.appendPath(newTooth, True) # trim move command = True # 建立軸孔 # add axle hole, hr 為 hole radius hr = 0.6*pr # diameter of gear shaft shaft = cobj(shapedefs.circle(hr), \"PATH\") shaft.revWinding() gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path cx = canvas.width/2 cy = canvas.height/2 gear.translate(cx, cy) # render 繪出靜態正齒輪輪廓 cgo.render(gear) ''' def initGear(opts): timeline.nextState.x = opts.cx timeline.nextState.y = opts.cy # 進行動態模擬 cgo.animate(gear, initGear, interpolate1, {\"cx\":canvas.width/2, \"cy\":canvas.height/2, \"rot\":[0, 360], \"duration\": 90000, # 0.666 rpm \"loop\": 'loop'}) ''' 以下為四連桿模擬: #要注意 javascript 轉 python 語法差異 #document.getElementById -> document[] #module Math -> math #Math.PI -> math.pi #abs -> fabs #array 可用 list代替 import math import time from browser import document as doc from browser import timer class Coord(object): def __init__(self,x,y): self.x = x self.y = y def __sub__(self,other): # This allows you to substract vectors return Coord(self.x-other.x,self.y-other.y) def __repr__(self): # Used to get human readable coordinates when printing return \"Coord(%f,%f)\"%(self.x,self.y) def length(self): # Returns the length of the vector return math.sqrt(self.x**2 + self.y**2) def angle(self): # Returns the vector's angle return math.atan2(self.y,self.x) def normalize(coord): return Coord( coord.x/coord.length(), coord.y/coord.length() ) def perpendicular(coord): # Shifts the angle by pi/2 and calculate the coordinates # using the original vector length return Coord( coord.length()*math.cos(coord.angle()+math.pi/2), coord.length()*math.sin(coord.angle()+math.pi/2) ) # 點類別 class Point(object): # 起始方法 def __init__(self, x, y): self.x = x self.y = y # 繪製方法 def drawMe(self, g, r): self.g = g self.r = r self.g.save() self.g.moveTo(self.x,self.y) self.g.beginPath() # 根據 r 半徑繪製一個圓代表點的所在位置 self.g.arc(self.x, self.y, self.r, 0, 2*math.pi, True) self.g.moveTo(self.x,self.y) self.g.lineTo(self.x+self.r, self.y) self.g.moveTo(self.x, self.y) self.g.lineTo(self.x-self.r, self.y) self.g.moveTo(self.x, self.y) self.g.lineTo(self.x, self.y+self.r) self.g.moveTo(self.x, self.y) self.g.lineTo(self.x, self.y-self.r) self.g.restore() self.g.stroke() # 加入 Eq 方法 def Eq(self, pt): self.x = pt.x self.y = pt.y # 加入 setPoint 方法 def setPoint(self, px, py): self.x = px self.y = py # 加上 distance(pt) 方法, 計算點到 pt 的距離 def distance(self, pt): self.pt = pt x = self.x - self.pt.x y = self.y - self.pt.y return math.sqrt(x * x + y * y) # 利用文字標示點的座標位置 def tag(self, g): self.g = g self.g.beginPath() self.g.fillText(\"%d, %d\"%(self.x, self.y),self.x, self.y) self.g.stroke() # Line 類別物件 class Line(object): # 起始方法 def __init__(self, p1, p2): self.p1 = p1 self.p2 = p2 # 直線的第一點, 設為線尾 self.Tail = self.p1 # 直線組成的第二點, 設為線頭 self.Head = self.p2 # 直線的長度屬性 self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2)) # setPP 以指定頭尾座標點來定義直線 def setPP(self, p1, p2): self.p1 = p1 self.p2 = p2 self.Tail = self.p1 self.Head = self.p2 self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2)) # setRT 方法 for Line, 應該已經確定 Tail 點, 然後以 r, t 作為設定 Head 的參考 def setRT(self, r, t): self.r = r self.t = t x = self.r * math.cos(self.t) y = self.r * math.sin(self.t) self.Tail.Eq(self.p1) self.Head.setPoint(self.Tail.x + x,self.Tail.y + y) # getR 方法 for Line def getR(self): # x 分量與 y 分量 x = self.p1.x - self.p2.x y = self.p1.y - self.p2.y return math.sqrt(x * x + y * y) # 根據定義 atan2(y,x), 表示 (x,y) 與 正 x 軸之間的夾角, 介於 pi 與 -pi 間 def getT(self): x = self.p2.x - self.p1.x y = self.p2.y - self.p1.y if (math.fabs(x) < math.pow(10,-100)): if(y < 0.0): return (-math.pi/2) else: return (math.pi/2) else: return math.atan2(y, x) # setTail 方法 for Line def setTail(self, pt): self.pt = pt self.Tail.Eq(pt) self.Head.setPoint(self.pt.x + self.x, self.pt.y + self.y) # getHead 方法 for Line def getHead(self): return self.Head def getTail(self): return self.Tail def drawMe(self, g): self.g = g self.g.beginPath() self.g.moveTo(self.p1.x,self.p1.y) self.g.lineTo(self.p2.x,self.p2.y) self.g.stroke() def test(self): return (\"this is pure test to Inherit\") class Link(Line): def __init__(self, p1, p2): self.p1 = p1 self.p2 = p2 self.length = math.sqrt(math.pow((self.p2.x - self.p1.x), 2) + math.pow((self.p2.y - self.p1.y), 2)) #g context def drawMe(self, g): self.g = g hole = 5 radius = 10 length = self.getR() # alert(length) # 儲存先前的繪圖狀態 self.g.save() self.g.translate(self.p1.x,self.p1.y) #alert(str(self.p1.x)+\",\"+str(self.p1.y)) #self.g.rotate(-((math.pi/2)-self.getT())) self.g.rotate(-math.pi*0.5 + self.getT()) #alert(str(self.getT())) #self.g.rotate(10*math.pi/180) #this.g.rotate(-(Math.PI/2-this.getT())); # 必須配合畫在 y 軸上的 Link, 進行座標轉換, 也可以改為畫在 x 軸上... self.g.beginPath() self.g.moveTo(0,0) self.g.arc(0, 0, hole, 0, 2*math.pi, True) self.g.stroke() self.g.moveTo(0,length) self.g.beginPath() self.g.arc(0,length, hole, 0, 2*math.pi, True) self.g.stroke() self.g.moveTo(0,0) self.g.beginPath() self.g.arc(0,0, radius, 0, math.pi, True) self.g.moveTo(0+radius,0) self.g.lineTo(0+radius,0+length) self.g.stroke() self.g.moveTo(0,0+length) self.g.beginPath() self.g.arc(0, 0+length, radius, math.pi, 0, True) self.g.moveTo(0-radius,0+length) self.g.lineTo(0-radius,0) self.g.stroke() self.g.restore() self.g.beginPath() self.g.fillStyle = \"red\" self.g.font = \"bold 18px sans-serif\" self.g.fillText(\"%d, %d\"%(self.p2.x, self.p2.y),self.p2.x, self.p2.y) self.g.stroke() self.g.restore() class Triangle(object): def __init__(self, p1, p2, p3): self.p1 = p1 self.p2 = p2 self.p3 = p3 def getLenp3(self): p1 = self.p1 ret = p1.distance(self.p2) return ret def getLenp1(self): p2 = self.p2 ret = p2.distance(self.p3) return ret def getLenp2(self): p1 = self.p1 ret = p1.distance(self.p3) return ret # 角度 def getAp1(self): ret = math.acos(((self.getLenp2() * self.getLenp2() + self.getLenp3() * self.getLenp3()) - self.getLenp1() * self.getLenp1()) / (2* self.getLenp2() * self.getLenp3())) return ret # def getAp2(self): ret =math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp3() * self.getLenp3()) - self.getLenp2() * self.getLenp2()) / (2* self.getLenp1() * self.getLenp3())) return ret def getAp3(self): ret = math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp2() * self.getLenp2()) - self.getLenp3() * self.getLenp3()) / (2* self.getLenp1() * self.getLenp2())) return ret def drawMe(self, g): self.g = g r = 5 # 繪出三個頂點 self.p1.drawMe(self.g,r) self.p2.drawMe(self.g,r) self.p3.drawMe(self.g,r) line1 = Line(self.p1,self.p2) line2 = Line(self.p1,self.p3) line3 = Line(self.p2,self.p3) # 繪出三邊線 line1.drawMe(self.g) line2.drawMe(self.g) line3.drawMe(self.g) # ends Triangle def # 透過三個邊長定義三角形 def setSSS(self, lenp3, lenp1, lenp2): self.lenp3 = lenp3 self.lenp1 = lenp1 self.lenp2 = lenp2 self.ap1 = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2* self.lenp2 * self.lenp3)) self.ap2 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2* self.lenp1 * self.lenp3)) self.ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2* self.lenp1 * self.lenp2)) # 透過兩個邊長與夾角定義三角形 def setSAS(self, lenp3, ap2, lenp1): self.lenp3 = lenp3 self.ap2 = ap2 self.lenp1 = lenp1 self.lenp2 = math.sqrt((self.lenp3 * self.lenp3 + self.lenp1 * self.lenp1) - 2* self.lenp3 * self.lenp1 * math.cos(self.ap2)) #等於 SSS(AB, BC, CA) def setSaSS(self, lenp2, lenp3, lenp1): self.lenp2 = lenp2 self.lenp3 = lenp3 self.lenp1 = lenp1 if(self.lenp1 > (self.lenp2 + self.lenp3)): #<CAB 夾角為 180 度, 三點共線且 A 介於 BC 之間 ret = math.pi else : # <CAB 夾角為 0, 三點共線且 A 不在 BC 之間 if((self.lenp1 < (self.lenp2 - self.lenp3)) or (self.lenp1 < (self.lenp3 - self.lenp2))): ret = 0.0 else : # 透過餘絃定理求出夾角 <CAB ret = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2 * self.lenp2 * self.lenp3)) return ret # 取得三角形的三個邊長值 def getSSS(self): temp = [] temp.append( self.getLenp1() ) temp.append( self.getLenp2() ) temp.append( self.getLenp3() ) return temp # 取得三角形的三個角度值 def getAAA(self): temp = [] temp.append( self.getAp1() ) temp.append( self.getAp2() ) temp.append( self.getAp3() ) return temp # 取得三角形的三個角度與三個邊長 def getASASAS(self): temp = [] temp.append(self.getAp1()) temp.append(self.getLenp1()) temp.append(self.getAp2()) temp.append(self.getLenp2()) temp.append(self.getAp3()) temp.append(self.getLenp3()) return temp #2P 2L return mid P def setPPSS(self, p1, p3, lenp1, lenp3): temp = [] self.p1 = p1 self.p3 = p3 self.lenp1 = lenp1 self.lenp3 = lenp3 #bp3 is the angle beside p3 point, cp3 is the angle for line23, p2 is the output line31 = Line(p3, p1) self.lenp2 = line31.getR() #self.lenp2 = self.p3.distance(self.p1) #這裡是求角3 ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2 * self.lenp1 * self.lenp2)) #ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2 * self.lenp1 * self.lenp3)) bp3 = line31.getT() cp3 = bp3 - ap3 temp.append(p3.x + self.lenp1*math.cos(cp3))#p2.x temp.append(p3.y + self.lenp1*math.sin(cp3))#p2.y return temp def tag(g, p): None midpt = Point(0, 0) tippt = Point(0, 0) contour = [] # 執行繪圖流程, 注意 x, y 為 global variables def draw(): global theta, midpt, oldpt context.clearRect(0, 0, canvas.width, canvas.height) line1.drawMe(context) line2.drawMe(context) line3.drawMe(context) #triangle1.drawMe(context) #triangle2.drawMe(context) theta += dx p2.x = p1.x + line1.length*math.cos(theta*degree) p2.y = p1.y - line1.length*math.sin(theta*degree) p3.x, p3.y = triangle2.setPPSS(p2,p4,link2_len,link3_len) # 計算垂直單位向量 a = Coord(p3.x, p3.y) b = Coord(p2.x, p2.y) normal = perpendicular(normalize(a-b)) midpt.x = (p2.x + p3.x)/2 midpt.y = (p2.y + p3.y)/2 tippt.x = midpt.x + 150*normal.x tippt.y = midpt.y + 150*normal.y if theta < 360: contour.append((tippt.x, tippt.y)) context.beginPath() context.moveTo(midpt.x, midpt.y) context.lineTo(tippt.x, tippt.y) # 利用 fillRect 繪製一個長寬各 1 單位的正方形 for i in range(len(contour)): context.fillRect(contour[i][0], contour[i][1], 1, 1) context.stroke() p1.tag(context) # 以上為相關函式物件的定義區 # 全域變數 # 幾何位置輸入變數 x=10 y=10 r=10 # 畫布與繪圖內容 # 其他輸入變數 theta = 0 degree = math.pi/180.0 dx = 2 dy = 4 #set p1.p2.p3.p4 position p1 = Point(150,100) p2 = Point(150,200) p3 = Point(300,300) p4 = Point(350,100) #accord position create link line1 = Link(p1,p2) line2 = Link(p2,p3) line3 = Link(p3,p4) line4 = Link(p1,p4) line5 = Link(p2,p4) link2_len = p2.distance(p3) link3_len = p3.distance(p4) #link2_len = line1.getR() #link3_len = line3.getR() #alert(str(link2_len)+','+str(link3_len)) triangle1 = Triangle(p1,p2,p4) triangle2 = Triangle(p2,p3,p4) # 視窗載入時執行內容 # 繪圖畫布設定 canvas = doc[\"fourbar\"] context = canvas.getContext(\"2d\") # 座標轉換, 移動 canvas.height 並且 y 座標變號, 也就是將原點座標移到畫面左下角 context.translate(0,canvas.height) context.scale(1,-1) #以間隔 10 micro seconds 重複呼叫 draw() #time.set_interval(draw,20) timer.set_interval(draw,10)","tags":"Project","url":"https://chiamingyen.github.io/kmolab/blog/brython-ping-mian-chi-lun-dong-tai-mo-ni.html"},{"title":"機械設計工程師的設計模擬與實作","text":"先利用 Brython 模擬重力啟動機械時鐘所需的齒輪組, 然後在 Onshape 進行零組件設計繪圖, 最後再用 3D 印表機將零件印出並組裝測試. 先以 Brython 畫一個時鐘: window.onload=function(){ brython(1); } # 導入 browser 模組中的 document, 並設為 doc 變數 from browser import document as doc # 導入數學模組 import math # 導入 datetime 模組 import datetime # 導入 browser 中的計時器, 建立動畫用 import browser.timer # 準備繪圖畫布 canvas = doc[\"plotarea\"] ctx = canvas.getContext(\"2d\") # 利用畫布高度計算時鐘半徑 radius = canvas.height / 2 # 座標移到畫布正中心 ctx.translate(radius, radius) # 實際繪圓的半徑縮小 10% radius = radius * 0.90 # 設計繪時鐘的函式 def drawClock(): # 繪鐘表面 drawFace(ctx, radius) # 繪數字 drawNumbers(ctx, radius) # 繪時針分針與秒針 drawTime(ctx, radius) # 設計繪時鐘表面函式 def drawFace(ctx, radius): # 這裡先全部以白色覆蓋表面範圍 ctx.beginPath() ctx.arc(0, 0, radius, 0, 2*math.pi) ctx.fillStyle = 'white' ctx.fill() # 利用漸層色繪製時鐘表面外框 grad = ctx.createRadialGradient(0,0,radius*0.95, 0,0,radius*1.05) grad.addColorStop(0, '#333') grad.addColorStop(0.5, 'white') grad.addColorStop(1, '#333') ctx.strokeStyle = grad ctx.lineWidth = radius*0.1 ctx.stroke() # 至此完成漸層色外框繪圖 # 以下繪製正中心的 10% 半徑小黑點 ctx.beginPath() ctx.arc(0, 0, radius*0.1, 0, 2*math.pi) ctx.fillStyle = '#333' ctx.fill() # 設計繪製數字函式 def drawNumbers(ctx, radius): # 以半徑的比例決定字元大小, 計算符點數後, 轉為整數後, 再轉為字串 ctx.font = str(int(radius*0.15)) + \"px arial\" ctx.textBaseline=\"middle\" ctx.textAlign=\"center\" for num in range(1, 13): ang = num * math.pi / 6 ctx.rotate(ang) ctx.translate(0, -radius*0.85) ctx.rotate(-ang) ctx.fillText(str(num), 0, 0) ctx.rotate(ang) ctx.translate(0, radius*0.85) ctx.rotate(-ang) def drawTime(ctx, radius): now = datetime.datetime.now() # 一小時有 60 分鐘, 有 3600 秒, #一小時的角度單位為 360/12, 且度為 math.pi/180 #所以 hour 的時數必須乘上 360/12, 再乘上 math.pi/180, 等於 math.pi/6 hour = (now.hour%12 + now.minute/60 + now.second/3600)*math.pi/6 drawHand(ctx, hour, radius*0.5, radius*0.07) #一分鐘有 60 秒, 且一分鐘的角度單位為 360/60, 且度為 math.pi/180 #所以分鐘數必須乘上 360/60, 再乘上 math.pi/180, 等於 math.pi/30 minute=(now.minute + now.second/60)*math.pi/30 drawHand(ctx, minute, radius*0.8, radius*0.07) #秒鐘與分鐘相同, 秒鐘數必須乘上 math.pi/30 second=(now.second*math.pi/30) drawHand(ctx, second, radius*0.9, radius*0.02) def drawHand(ctx, pos, length, width): ctx.beginPath() ctx.lineWidth = width ctx.lineCap = \"round\" ctx.moveTo(0,0) ctx.rotate(pos) ctx.lineTo(0, -length) ctx.stroke() ctx.rotate(-pos) # 每 1000 個 milliseconds 呼叫執行一次 drawClock 函式 (也就是每秒執行一次) browser.timer.set_interval(drawClock, 1000) 以下為利用 Brython 畫時鐘的程式碼: <!-- 導入 Brython 函式庫 --> < script type = \"text/javascript\" src = \"http://brython.info/src/brython_dist.js\" ></ script > <!-- window 導入後, 啟動 brython() --> < script > window . onload = function (){ brython ( 1 ); } </ script > <!-- 建立畫布 --> < canvas id = \"plotarea\" width = \"400\" height = \"400\" style = \"background-color:#333\" ></ canvas > <!-- 開始執行 Brython 繪圖 --> < script type = \"text/python3\" > # 導入 browser 模組中的 document , 並設為 doc 變數 from browser import document as doc # 導入數學模組 import math # 導入 datetime 模組 import datetime # 導入 browser 中的計時器 , 建立動畫用 import browser . timer # 準備繪圖畫布 canvas = doc [ \"plotarea\" ] ctx = canvas . getContext ( \"2d\" ) # 利用畫布高度計算時鐘半徑 radius = canvas . height / 2 # 座標移到畫布正中心 ctx . translate ( radius , radius ) # 實際繪圓的半徑縮小 10 % radius = radius * 0.90 # 設計繪時鐘的函式 def drawClock () : # 繪鐘表面 drawFace ( ctx , radius ) # 繪數字 drawNumbers ( ctx , radius ) # 繪時針分針與秒針 drawTime ( ctx , radius ) # 設計繪時鐘表面函式 def drawFace ( ctx , radius ) : # 這裡先全部以白色覆蓋表面範圍 ctx . beginPath () ctx . arc ( 0 , 0 , radius , 0 , 2 * math . pi ) ctx . fillStyle = 'white' ctx . fill () # 利用漸層色繪製時鐘表面外框 grad = ctx . createRadialGradient ( 0 , 0 , radius * 0.95 , 0 , 0 , radius * 1.05 ) grad . addColorStop ( 0 , '#333' ) grad . addColorStop ( 0.5 , 'white' ) grad . addColorStop ( 1 , '#333' ) ctx . strokeStyle = grad ctx . lineWidth = radius * 0.1 ctx . stroke () # 至此完成漸層色外框繪圖 # 以下繪製正中心的 10 % 半徑小黑點 ctx . beginPath () ctx . arc ( 0 , 0 , radius * 0.1 , 0 , 2 * math . pi ) ctx . fillStyle = '#333' ctx . fill () # 設計繪製數字函式 def drawNumbers ( ctx , radius ) : # 以半徑的比例決定字元大小 , 計算符點數後 , 轉為整數後 , 再轉為字串 ctx . font = str ( int ( radius * 0.15 )) + \"px arial\" ctx . textBaseline = \"middle\" ctx . textAlign = \"center\" for num in range ( 1 , 13 ) : ang = num * math . pi / 6 ctx . rotate ( ang ) ctx . translate ( 0 , - radius * 0.85 ) ctx . rotate ( - ang ) ctx . fillText ( str ( num ), 0 , 0 ) ctx . rotate ( ang ) ctx . translate ( 0 , radius * 0.85 ) ctx . rotate ( - ang ) def drawTime ( ctx , radius ) : now = datetime . datetime . now () # 一小時有 60 分鐘 , 有 3600 秒 , # 一小時的角度單位為 360 / 12 , 且度為 math . pi / 180 # 所以 hour 的時數必須乘上 360 / 12 , 再乘上 math . pi / 180 , 等於 math . pi / 6 hour = ( now . hour % 12 + now . minute / 60 + now . second / 3600 ) * math . pi / 6 drawHand ( ctx , hour , radius * 0.5 , radius * 0.07 ) # 一分鐘有 60 秒 , 且一分鐘的角度單位為 360 / 60 , 且度為 math . pi / 180 # 所以分鐘數必須乘上 360 / 60 , 再乘上 math . pi / 180 , 等於 math . pi / 30 minute = ( now . minute + now . second / 60 ) * math . pi / 30 drawHand ( ctx , minute , radius * 0.8 , radius * 0.07 ) # 秒鐘與分鐘相同 , 秒鐘數必須乘上 math . pi / 30 second = ( now . second * math . pi / 30 ) drawHand ( ctx , second , radius * 0.9 , radius * 0.02 ) def drawHand ( ctx , pos , length , width ) : ctx . beginPath () ctx . lineWidth = width ctx . lineCap = \"round\" ctx . moveTo ( 0 , 0 ) ctx . rotate ( pos ) ctx . lineTo ( 0 , - length ) ctx . stroke () ctx . rotate ( - pos ) # 每 1000 個 milliseconds 呼叫執行一次 drawClock 函式 ( 也就是每秒執行一次 ) browser . timer . set_interval ( drawClock , 1000 ) </ script > 在 Jupyter 利用 SVG 繪製正齒輪輪廓: # source: https://gist.github.com/gever/8643175 import math import os from IPython.display import SVG import svgwrite # gear parameters outer_d = 500.0 tooth_ht = 40.0 # addendum + dedendum (aka, top land radius - root circle) tooth_ct = 20 face_pct = 0.2 # how much narrower the face pitch is than the circular thickness axle_d = 50 # derived parameters inner_d = outer_d - tooth_ht # colors important to the laser cutter LC_CUT = svgwrite . rgb ( 255 , 0 , 0 ) LC_SCORE = svgwrite . rgb ( 0 , 0 , 255 ) LC_ETCH = svgwrite . rgb ( 0 , 0 , 0 ) LC_NONE = svgwrite . rgb ( 255 , 255 , 255 ) # derived constants outer_circ = outer_d * math . pi outer_r = outer_d / 2.0 inner_r = outer_r - tooth_ht addendum = tooth_ht / 2.0 addendum_r = outer_r - addendum circular_pitch = ( 2.0 * math . pi ) / tooth_ct circular_thickness = circular_pitch / 2.0 theta_face = circular_thickness * face_pct # bevel pitch delta in radians # clear out the contents of the old file, get ready to make a new one filename = 'gear_ %d .svg' % ( tooth_ct ) if os . access ( filename , os . R_OK ): os . remove ( filename ) # start the drawing dwg = svgwrite . Drawing ( filename , profile = 'tiny' ) group = dwg . g () # generate points that describe the gear profile pts = [] for t in range ( tooth_ct ): theta_1 = circular_pitch * t # begining of tooth and gap theta_ct = theta_1 + circular_thickness # circular thickness (of tooth) theta_2 = circular_pitch * ( t + 1 ) # begining of next tooth pts . append ( ( math . cos ( theta_1 ) * addendum_r , math . sin ( theta_1 ) * addendum_r ) ) # begining of face leading up to top land pts . append ( ( math . cos ( theta_1 + theta_face ) * outer_r , math . sin ( theta_1 + theta_face ) * outer_r ) ) # begining of top land pts . append ( ( math . cos ( theta_ct - theta_face ) * outer_r , math . sin ( theta_ct - theta_face ) * outer_r ) ) # end of top land pts . append ( ( math . cos ( theta_ct ) * addendum_r , math . sin ( theta_ct ) * addendum_r ) ) # end of face coming down from top land pts . append ( ( math . cos ( theta_ct ) * inner_r , math . sin ( theta_ct ) * inner_r ) ) # begining of bottom land pts . append ( ( math . cos ( theta_2 ) * inner_r , math . sin ( theta_2 ) * inner_r ) ) # end of bottom land # mark the first tooth if t == 0 : circle = dwg . circle ( center = pts [ 0 ], r = tooth_ht / 4 , stroke = LC_SCORE , fill = LC_NONE ) group . add ( circle ) group . add ( dwg . polygon ( pts , stroke = LC_CUT , fill = LC_NONE ) ) group . translate ( outer_d , outer_d / 2.0 ) # make a hole for the axle # TODO: calculate the number of steps in axle polygon based on circumference of axle a_pts = [] for i in range ( 50 ): t = i * (( math . pi * 2 ) / 50 ) a_pts . append ( ( math . cos ( t ) * axle_d / 2.0 , math . sin ( t ) * axle_d / 2.0 ) ) group . add ( dwg . polygon ( a_pts , stroke = LC_CUT , fill = LC_NONE ) ) dwg . add ( group ) # dwg.add(dwg.text('Test', insert=(0, 0.2), fill='red')) # dwg.save() # show it SVG ( data = dwg . tostring ()) 利用 Brython 繪製漸開線正齒輪輪廓圖: # 導入 browser 模組中的 document, 並設為 doc 變數 from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx, midy, midx, midy-rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(n): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) # 準備在 id=\"gear1\" 的 canvas 中繪圖 canvas = doc[\"gear1\"] ctx = canvas.getContext(\"2d\") x = (canvas.width)/2 y = (canvas.height)/2 r = 0.8*(canvas.width/2) # 齒數 n = 53 # 壓力角 pa = 20 Spur(ctx).Gear(x, y, r, n, pa, \"blue\") 以下為單一正齒輪輪廓繪圖程式碼: <!-- 建立正齒輪畫布 --> < canvas id = \"gear1\" width = \"400\" height = \"400\" style = \"background-color:#FFF\" ></ canvas > <!-- 開始執行 Brython 繪圖 --> < script type = \"text/python3\" > # 導入 browser 模組中的 document , 並設為 doc 變數 from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math . pi / 180. # 定義 Spur 類別 class Spur ( object ) : def __init__ ( self , ctx ) : self . ctx = ctx def create_line ( self , x1 , y1 , x2 , y2 , width = 3 , fill = \"red\" ) : self . ctx . beginPath () self . ctx . lineWidth = width self . ctx . moveTo ( x1 , y1 ) self . ctx . lineTo ( x2 , y2 ) self . ctx . strokeStyle = fill self . ctx . stroke () # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑 , n 為齒數 # pa 為壓力角 ( deg ) # rot 為旋轉角 ( deg ) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正 , 因為 base circle 與齒根圓大小必須進行判斷 def Gear ( self , midx , midy , rp , n = 20 , pa = 20 , color = \"black\" ) : # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線 , 由圓心到節圓 y 軸頂點畫一直線 self . create_line ( midx , midy , midx , midy - rp ) # 畫出 rp 圓 , 畫圓函式尚未定義 # create_oval ( midx - rp , midy - rp , midx + rp , midy + rp , width = 2 ) # a 為模數 ( 代表公制中齒的大小 ), 模數為節圓直徑 ( 稱為節徑 ) 除以齒數 # 模數也就是齒冠大小 a = 2 * rp / n # d 為齒根大小 , 為模數的 1.157 或 1.25 倍 , 這裡採 1.25 倍 d = 2.5 * rp / n # ra 為齒輪的外圍半徑 ra = rp + a # 畫出 ra 圓 , 畫圓函式尚未定義 # create_oval ( midx - ra , midy - ra , midx + ra , midy + ra , width = 1 ) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb = rp * math . cos ( pa * deg ) # 畫出 rb 圓 ( 基圓 ), 畫圓函式尚未定義 # create_oval ( midx - rb , midy - rb , midx + rb , midy + rb , width = 1 ) # rd 為齒根圓半徑 rd = rp - d # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd # 畫出 rd 圓 ( 齒根圓 ), 畫圓函式尚未定義 # create_oval ( midx - rd , midy - rd , midx + rd , midy + rd , width = 1 ) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd if rd > rb : dr = ( ra - rd ) / imax else : dr = ( ra - rb ) / imax # tan ( pa * deg ) - pa * deg 為漸開線函數 sigma = math . pi / ( 2 * n ) + math . tan ( pa * deg ) - pa * deg for j in range ( n ) : ang =- 2. * j * math . pi / n + sigma ang2 = 2. * j * math . pi / n + sigma lxd = midx + rd * math . sin ( ang2 - 2. * math . pi / n ) lyd = midy - rd * math . cos ( ang2 - 2. * math . pi / n ) for i in range ( imax + 1 ) : # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd if rd > rb : r = rd + i * dr else : r = rb + i * dr theta = math . sqrt (( r * r ) / ( rb * rb ) - 1. ) alpha = theta - math . atan ( theta ) xpt = r * math . sin ( alpha - ang ) ypt = r * math . cos ( alpha - ang ) xd = rd * math . sin ( - ang ) yd = rd * math . cos ( - ang ) # i = 0 時 , 繪線起點由齒根圓上的點 , 作為起點 if ( i == 0 ) : last_x = midx + xd last_y = midy - yd # 由左側齒根圓作為起點 , 除第一點 ( xd , yd ) 齒根圓上的起點外 , 其餘的 ( xpt , ypt ) 則為漸開線上的分段點 self . create_line (( midx + xpt ),( midy - ypt ),( last_x ),( last_y ), fill = color ) # 最後一點 , 則為齒頂圓 if ( i == imax ) : lfx = midx + xpt lfy = midy - ypt last_x = midx + xpt last_y = midy - ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標 , lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self . create_line (( lxd ),( lyd ),( midx + xd ),( midy - yd ), fill = color ) for i in range ( imax + 1 ) : # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd if rd > rb : r = rd + i * dr else : r = rb + i * dr theta = math . sqrt (( r * r ) / ( rb * rb ) - 1. ) alpha = theta - math . atan ( theta ) xpt = r * math . sin ( ang2 - alpha ) ypt = r * math . cos ( ang2 - alpha ) xd = rd * math . sin ( ang2 ) yd = rd * math . cos ( ang2 ) # i = 0 時 , 繪線起點由齒根圓上的點 , 作為起點 if ( i == 0 ) : last_x = midx + xd last_y = midy - yd # 由右側齒根圓作為起點 , 除第一點 ( xd , yd ) 齒根圓上的起點外 , 其餘的 ( xpt , ypt ) 則為漸開線上的分段點 self . create_line (( midx + xpt ),( midy - ypt ),( last_x ),( last_y ), fill = color ) # 最後一點 , 則為齒頂圓 if ( i == imax ) : rfx = midx + xpt rfy = midy - ypt last_x = midx + xpt last_y = midy - ypt # lfx 為齒頂圓上的左側 x 座標 , lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self . create_line ( lfx , lfy , rfx , rfy , fill = color ) # 準備在 id = \"gear1\" 的 canvas 中繪圖 canvas = doc [ \"gear1\" ] ctx = canvas . getContext ( \"2d\" ) x = ( canvas . width ) / 2 y = ( canvas . height ) / 2 r = 0.8 * ( canvas . width / 2 ) # 齒數 n = 53 # 壓力角 pa = 20 Spur ( ctx ). Gear ( x , y , r , n , pa , \"blue\" ) </ script > 以下則繪製三個齒輪囓合圖: # 導入 browser 模組中的 document, 並設為 doc 變數 from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx, midy, midx, midy-rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(n): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) # 準備在 id=\"gear2\" 的 canvas 中繪圖 canvas = doc[\"gear2\"] ctx = canvas.getContext(\"2d\") # 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角 # 壓力角 pa 單位為角度 pa = 20 # 第1齒輪齒數 n_g1 = 17 # 第2齒輪齒數 n_g2 = 11 # 第3齒輪齒數 n_g3 = 13 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 m = (0.8*canvas.width)/(n_g1+n_g2+n_g3) # 根據模數 m, 計算各齒輪的節圓半徑 rp_g1 = m*n_g1/2 rp_g2 = m*n_g2/2 rp_g3 = m*n_g3/2 #單一正齒輪繪圖呼叫格式 Spur(ctx).Gear(x, y, r, n, pa, \"blue\") # 開始繪製囓合齒輪輪廓 # 繪圖第1齒輪的圓心座標, 因為希望繪圖佔去 canvas.width 的 80%, 所以兩邊各預留 10% 距離 x_g1 = canvas.width*0.1+rp_g1 # y 方向繪圖區域上方預留 canvas.height 的 20% y_g1 = canvas.height*0.2+rp_g1 # 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同 x_g2 = x_g1 + rp_g1 + rp_g2 y_g2 = y_g1 # 第3齒輪的圓心座標 x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3 y_g3 = y_g1 # 將第1齒輪順時鐘轉 90 度, 也就是 math.pi/2 # 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖 ctx.save() # translate to the origin of second gear ctx.translate(x_g1, y_g1) # rotate to engage ctx.rotate(math.pi/2) # put it back ctx.translate(-x_g1, -y_g1) # 繪製第一個齒輪輪廓 Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, \"blue\") ctx.restore() # 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合 ctx.save() # translate to the origin of second gear ctx.translate(x_g2, y_g2) # rotate to engage ctx.rotate(-math.pi/2-math.pi/n_g2) # put it back ctx.translate(-x_g2, -y_g2) Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, \"black\") ctx.restore() # 將第3齒輪逆時鐘轉 90 度之後, 再往回轉第2齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合 ctx.save() # translate to the origin of second gear ctx.translate(x_g3, y_g3) # rotate to engage # math.pi+math.pi/n_g2 為第2齒輪從順時鐘轉 90 度之後, 必須配合目前的標記線所作的齒輪 2 轉動角度, 要轉換到齒輪3 的轉動角度 # 必須乘上兩齒輪齒數的比例, 若齒輪2 大, 則齒輪3 會轉動較快 # 第1個 -math.pi/2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度 # -math.pi/n_g3 則是第3齒與第2齒定位線重合後, 必須再逆時鐘多轉一齒的轉角, 以便進行囓合 # (math.pi+math.pi/n_g2)*n_g2/n_g3 則是第2齒原定位線為順時鐘轉動 90 度, # 但是第2齒輪為了與第1齒輪囓合, 已經距離定位線, 多轉了 180 度, 再加上第2齒輪的一齒角度, 因為要帶動第3齒輪定位, # 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角, 因此乘上 n_g2/n_g3 ctx.rotate(-math.pi/2-math.pi/n_g3+(math.pi+math.pi/n_g2)*n_g2/n_g3) # put it back ctx.translate(-x_g3, -y_g3) Spur(ctx).Gear(x_g3, y_g3, rp_g3, n_g3, pa, \"red\") ctx.restore() 以下為3個齒輪囓合繪圖程式碼: <!-- 建立正齒輪畫布 --> < canvas id = \"gear2\" width = \"800\" height = \"400\" style = \"background-color:#FFF\" ></ canvas > <!-- 開始執行 Brython 繪圖 --> < script type = \"text/python3\" > # 導入 browser 模組中的 document , 並設為 doc 變數 from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math . pi / 180. # 定義 Spur 類別 class Spur ( object ) : def __init__ ( self , ctx ) : self . ctx = ctx def create_line ( self , x1 , y1 , x2 , y2 , width = 3 , fill = \"red\" ) : self . ctx . beginPath () self . ctx . lineWidth = width self . ctx . moveTo ( x1 , y1 ) self . ctx . lineTo ( x2 , y2 ) self . ctx . strokeStyle = fill self . ctx . stroke () # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑 , n 為齒數 # pa 為壓力角 ( deg ) # rot 為旋轉角 ( deg ) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正 , 因為 base circle 與齒根圓大小必須進行判斷 def Gear ( self , midx , midy , rp , n = 20 , pa = 20 , color = \"black\" ) : # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線 , 由圓心到節圓 y 軸頂點畫一直線 self . create_line ( midx , midy , midx , midy - rp ) # 畫出 rp 圓 , 畫圓函式尚未定義 # create_oval ( midx - rp , midy - rp , midx + rp , midy + rp , width = 2 ) # a 為模數 ( 代表公制中齒的大小 ), 模數為節圓直徑 ( 稱為節徑 ) 除以齒數 # 模數也就是齒冠大小 a = 2 * rp / n # d 為齒根大小 , 為模數的 1.157 或 1.25 倍 , 這裡採 1.25 倍 d = 2.5 * rp / n # ra 為齒輪的外圍半徑 ra = rp + a # 畫出 ra 圓 , 畫圓函式尚未定義 # create_oval ( midx - ra , midy - ra , midx + ra , midy + ra , width = 1 ) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb = rp * math . cos ( pa * deg ) # 畫出 rb 圓 ( 基圓 ), 畫圓函式尚未定義 # create_oval ( midx - rb , midy - rb , midx + rb , midy + rb , width = 1 ) # rd 為齒根圓半徑 rd = rp - d # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd # 畫出 rd 圓 ( 齒根圓 ), 畫圓函式尚未定義 # create_oval ( midx - rd , midy - rd , midx + rd , midy + rd , width = 1 ) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd if rd > rb : dr = ( ra - rd ) / imax else : dr = ( ra - rb ) / imax # tan ( pa * deg ) - pa * deg 為漸開線函數 sigma = math . pi / ( 2 * n ) + math . tan ( pa * deg ) - pa * deg for j in range ( n ) : ang =- 2. * j * math . pi / n + sigma ang2 = 2. * j * math . pi / n + sigma lxd = midx + rd * math . sin ( ang2 - 2. * math . pi / n ) lyd = midy - rd * math . cos ( ang2 - 2. * math . pi / n ) for i in range ( imax + 1 ) : # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd if rd > rb : r = rd + i * dr else : r = rb + i * dr theta = math . sqrt (( r * r ) / ( rb * rb ) - 1. ) alpha = theta - math . atan ( theta ) xpt = r * math . sin ( alpha - ang ) ypt = r * math . cos ( alpha - ang ) xd = rd * math . sin ( - ang ) 重力啟動機械時鐘所需的齒輪組 , 然後在 Onshape 進行零組件設計繪圖 , 最後再用 3 D 印表機將零件印出並組裝測試 . yd = rd * math . cos ( - ang ) # i = 0 時 , 繪線起點由齒根圓上的點 , 作為起點 if ( i == 0 ) : last_x = midx + xd last_y = midy - yd # 由左側齒根圓作為起點 , 除第一點 ( xd , yd ) 齒根圓上的起點外 , 其餘的 ( xpt , ypt ) 則為漸開線上的分段點 self . create_line (( midx + xpt ),( midy - ypt ),( last_x ),( last_y ), fill = color ) # 最後一點 , 則為齒頂圓 if ( i == imax ) : lfx = midx + xpt lfy = midy - ypt last_x = midx + xpt last_y = midy - ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標 , lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self . create_line (( lxd ),( lyd ),( midx + xd ),( midy - yd ), fill = color ) for i in range ( imax + 1 ) : # 當 rd 大於 rb 時 , 漸開線並非畫至 rb , 而是 rd if rd > rb : r = rd + i * dr else : r = rb + i * dr theta = math . sqrt (( r * r ) / ( rb * rb ) - 1. ) alpha = theta - math . atan ( theta ) xpt = r * math . sin ( ang2 - alpha ) ypt = r * math . cos ( ang2 - alpha ) xd = rd * math . sin ( ang2 ) yd = rd * math . cos ( ang2 ) # i = 0 時 , 繪線起點由齒根圓上的點 , 作為起點 if ( i == 0 ) : last_x = midx + xd last_y = midy - yd # 由右側齒根圓作為起點 , 除第一點 ( xd , yd ) 齒根圓上的起點外 , 其餘的 ( xpt , ypt ) 則為漸開線上的分段點 self . create_line (( midx + xpt ),( midy - ypt ),( last_x ),( last_y ), fill = color ) # 最後一點 , 則為齒頂圓 if ( i == imax ) : rfx = midx + xpt rfy = midy - ypt last_x = midx + xpt last_y = midy - ypt # lfx 為齒頂圓上的左側 x 座標 , lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self . create_line ( lfx , lfy , rfx , rfy , fill = color ) # 準備在 id = \"gear2\" 的 canvas 中繪圖 canvas = doc [ \"gear2\" ] ctx = canvas . getContext ( \"2d\" ) # 模數決定齒的尺寸大小 , 囓合齒輪組必須有相同的模重力啟動機械時鐘所需的齒輪組 , 然後在 Onshape 進行零組件設計繪圖 , 最後再用 3 D 印表機將零件印出並組裝測試 . 數與壓力角 # 壓力角 pa 單位為角度 pa = 20 # 第1齒輪齒數 n_g1 = 17 # 第2齒輪齒數 n_g2 = 11 # 第3齒輪齒數 n_g3 = 13 # m 為模數 , 根據畫布的寬度 , 計算適合的模數大小 m = ( 0.8 * canvas . width ) / ( n_g1 + n_g2 + n_g3 ) # 根據模數 m , 計算各齒輪的節圓半徑 rp_g1 = m * n_g1 / 2 rp_g2 = m * n_g2 / 2 rp_g3 = m * n_g3 / 2 # 單一正齒輪繪圖呼叫格式 Spur ( ctx ). Gear ( x , y , r , n , pa , \"blue\" ) # 開始繪製囓合齒輪輪廓 # 繪圖第1齒輪的圓心座標 , 因為希望繪圖佔去 canvas . width 的 80 % , 所以兩邊各預留 10 % 距離 x_g1 = canvas . width * 0.1 + rp_g1 # y 方向繪圖區域上方預留 canvas . height 的 20 % y_g1 = canvas . height * 0.2 + rp_g1 # 第2齒輪的圓心座標 , 假設排列成水平 , 表示各齒輪圓心 y 座標相同 x_g2 = x_g1 + rp_g1 + rp_g2 y_g2 = y_g1 # 第3齒輪的圓心座標 x_g3 = x_g1 + rp_g1 + 2 * rp_g2 + rp_g3 y_g3 = y_g1 # 將第1齒輪順時鐘轉 90 度 , 也就是 math . pi / 2 # 使用 ctx . save () 與 ctx . restore () 以確保各齒輪以相對座標進行旋轉繪圖 ctx . save () # translate to the origin of second gear ctx . translate ( x_g1 , y_g1 ) # rotate to engage ctx . rotate ( math . pi / 2 ) # put it back ctx . translate ( - x_g1 , - y_g1 ) # 繪製第一個齒輪輪廓 Spur ( ctx ). Gear ( x_g1 , y_g1 , rp_g1 , n_g1 , pa , \"blue\" ) ctx . restore () # 將第2齒輪逆時鐘轉 90 度之後 , 再多轉一齒 , 以便與第1齒輪進行囓合 ctx . save () # translate to the origin of second gear ctx . translate ( x_g2 , y_g2 ) # rotate to engage ctx . rotate ( - math . pi / 2 - math . pi / n_g2 ) # put it back ctx . translate ( - x_g2 , - y_g2 ) Spur ( ctx ). Gear ( x_g2 , y_g2 , rp_g2 , n_g2 , pa , \"black\" ) ctx . restore () # 將第3齒輪逆時鐘轉 90 度之後 , 再往回轉第2齒輪定位帶動轉角 , 然後再逆時鐘多轉一齒 , 以便與第2齒輪進行囓合 ctx . save () # translate to the origin of second gear ctx . translate ( x_g3 , y_g3 ) # rotate to engage # math . pi + math . pi / n_g2 為第2齒輪從順時鐘轉 90 度之後 , 必須配合目前的標記線所作的齒輪 2 轉動角度 , 要轉換到齒輪3 的轉動角度 # 必須乘上兩齒輪齒數的比例 , 若齒輪2 大 , 則齒輪3 會轉動較快 # 第1個 - math . pi / 2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度 # - math . pi / n_g3 則是第3齒與第2齒定位線重合後 , 必須再逆時鐘多轉一齒的轉角 , 以便進行囓合 # ( math . pi + math . pi / n_g2 ) * n_g2 / n_g3 則是第2齒原定位線為順時鐘轉動 90 度 , # 但是第2齒輪為了與第1齒輪囓合 , 已經距離定位線 , 多轉了 180 度 , 再加上第2齒輪的一齒角度 , 因為要帶動第3齒輪定位 , # 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角 , 因此乘上 n_g2 / n_g3 ctx . rotate ( - math . pi / 2 - math . pi / n_g3 + ( math . pi + math . pi / n_g2 ) * n_g2 / n_g3 ) # put it back ctx . translate ( - x_g3 , - y_g3 ) Spur ( ctx ). Gear ( x_g3 , y_g3 , rp_g3 , n_g3 , pa , \"red\" ) ctx . restore () </ script > 參考資料: 3D printed mechanical clock: http://www.thingiverse.com/thing:328569 Mechanical engineering: http://diyhpl.us/~bryan/papers2/wikipedia-mechanical-engineering.pdf Pendulum marble clock: http://www.youtube.com/watch?v=UHBHCsrqYMw Walking animal: http://www.thingiverse.com/thing:1212665 Perseverance: http://www.thingiverse.com/thing:348489 Robotic arm: http://www.thingiverse.com/thing:1015238 Toyota cylinder engine: http://www.thingiverse.com/thing:644933 Gear generator: http://geargenerator.com/ Optimal robot trajectory: https://gist.github.com/pierre-haessig/9808480 Simple GP for aircraft optimization: https://gist.github.com/bqpd/6845968","tags":"Project","url":"https://chiamingyen.github.io/kmolab/blog/ji-jie-she-ji-gong-cheng-shi-de-she-ji-mo-ni-yu-shi-zuo.html"},{"title":"Brython and Amber languages","text":"看到 Brython 與 Amber 等利用 Javascript 實作的網際程式系統, 就應該不難理解, 即便 Javascript 程式終究無可避免, 但是 Python 與 Smalltalk 的魅力依舊讓人難以忘懷. Brython: https://github.com/brython-dev/brython 讓程式師可以直接在 html 網頁中以 Python3 的語法編寫程式, 然後轉為 Javascript 在網頁上運行, 而相同的原理, Amber: https://github.com/amber-smalltalk/amber 則更進一步, 以 Amber 寫 Amber, 讓程式師可以在網頁上寫 Smalltalk 語法, 然後轉成網頁上能夠運行的程式片斷. 學 Python3 的資源很多, 但是想學 Smailtalk, 也有不少的免費資源: http://seaside.gemtalksystems.com/tutorial/chapter08.pdf https://ccrma.stanford.edu/workshops/cm2007/topics/smalltalk/ArtAndScienceOfSmalltalk.pdf http://sdmeta.gforge.inria.fr/FreeBooks/WithStyle/SmalltalkWithStyle.pdf http://live.exept.de/doc/books/JoyOfST/JoyOfST.pdf https://www.gnu.org/software/smalltalk/manual/html_node/","tags":"Project","url":"https://chiamingyen.github.io/kmolab/blog/brython-and-amber-languages.html"},{"title":"近端 Jupyterhub 電腦主機設定","text":"利用4台 HP 小型電腦練習近端伺服主機的設定與操作, 這裡安裝設定 Jupyterhub. http://101.mde.tw 就是其中的一台 HP 小型伺服主機 . Jupyterhub 安裝 sudo apt-get install npm nodejs-legacy sudo npm install -g configurable-http-proxy sudo pip3 install jupyterhub sudo pip3 install IPython 以 SSL 啟動 : 先建立 key 與 certificate: sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout jupyterhub.key -out jupyterhub.crt jupyterhub --ip 10.0.1.2 --port 443 --ssl-key jupyterhub.key --ssl-cert jupyterhub.cert 或不指定 IP jupyterhub --port 9443 --ssl-key my_ssl.key --ssl-cert my_ssl.cert 之後則可以 https://jupyterIP:9443 連線 jupyter_config.py 設定檔 # jupyterhub_config.py # jupyterhub -f /path/to/jupyterhub_config.py c = get_config () import os pjoin = os . path . join runtime_dir = os . path . join ( '/srv/jupyterhub' ) ssl_dir = pjoin ( runtime_dir , 'ssl' ) if not os . path . exists ( ssl_dir ): os . makedirs ( ssl_dir ) # https on :9443 c . JupyterHub . port = 9443 c . JupyterHub . ssl_key = pjoin ( ssl_dir , 'nginx.key' ) c . JupyterHub . ssl_cert = pjoin ( ssl_dir , 'nginx.crt' ) # put the JupyterHub cookie secret and state db # in /var/run/jupyterhub c . JupyterHub . cookie_secret_file = pjoin ( runtime_dir , 'cookie_secret' ) c . JupyterHub . db_url = pjoin ( runtime_dir , 'jupyterhub.sqlite' ) # or `--db=/path/to/jupyterhub.sqlite` on the command-line # put the log file in /var/log c . JupyterHub . log_file = '/var/log/jupyterhub.log' # use GitHub OAuthenticator for local users ''' c.JupyterHub.authenticator_class = 'oauthenticator.LocalGitHubOAuthenticator' c.GitHubOAuthenticator.oauth_callback_url = os.environ['OAUTH_CALLBACK_URL'] # create system users that don't exist yet c.LocalAuthenticator.create_system_users = True ''' # specify users and admin c . Authenticator . whitelist = { 'user1' , 'user2' } c . Authenticator . admin_users = { 'user1' , 'user2' } # start single-user notebook servers in ~/assignments, # with ~/assignments/Welcome.ipynb as the default landing page # this config could also be put in # /etc/ipython/ipython_notebook_config.py #c.Spawner.notebook_dir = '~/tmp' #c.Spawner.args = ['--NotebookApp.default_url=/notebooks/Welcome.ipynb'] 將 Jupyterhub 設為開機啟動 將下列檔案存成 /etc/init.d/jupyterhub #! /bin/sh ### BEGIN INIT INFO # Provides: jupyterhub # Required-Start: $remote_fs $syslog # Required-Stop: $remote_fs $syslog # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: Start jupyterhub # Description: This file should be used to construct $ sudo chmod +x /etc/init.d/jupyterhub # Create a default config to /etc/jupyterhub/jupyterhub_config.py $ sudo jupyterhub --generate-config -f /etc/jupyterhub/jupyterhub_config.py # Start jupyterhub $ sudo service jupyterhub start # Stop jupyterhub $ sudo service jupyterhub stop # Start jupyterhub on boot $ sudo update-rc.d jupyterhub defaults # Or use rcconf to manage services http://manpages.ubuntu.com/manpages/natty/man8/rcconf.8.html $ sudo rcconfscripts to be # placed in /etc/init.d. ### END INIT INFO # Author: Alisue <lambdalisue@hashnote.net> # # Please remove the \"Author\" lines above and replace them # with your own name if you copy and modify this script. # Do NOT \"set -e\" # PATH should only include /usr/* if it runs after the mountnfs.sh script PATH = /sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin DESC = \"Multi-user server for Jupyter notebooks\" NAME = jupyterhub DAEMON = /usr/local/bin/jupyterhub DAEMON_ARGS = \"--config=/etc/jupyterhub/jupyterhub_config.py\" PIDFILE = /var/run/ $NAME .pid SCRIPTNAME = /etc/init.d/ $NAME # Exit if the package is not installed [ -x \" $DAEMON \" ] || exit 0 # Read configuration variable file if it is present [ -r /etc/default/ $NAME ] && . /etc/default/ $NAME # Load the VERBOSE setting and other rcS variables . /lib/init/vars.sh # Define LSB log_* functions. # Depend on lsb-base (>= 3.2-14) to ensure that this file is present # and status_of_proc is working. . /lib/lsb/init-functions # # Function that starts the daemon/service # do_start () { # Return # 0 if daemon has been started # 1 if daemon was already running # 2 if daemon could not be started start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \\ || return 1 start-stop-daemon --start --background --make-pidfile --quiet --pidfile $PIDFILE --exec $DAEMON -- \\ $DAEMON_ARGS \\ || return 2 # Add code here, if necessary, that waits for the process to be ready # to handle requests from services started subsequently which depend # on this one. As a last resort, sleep for some time. } # # Function that stops the daemon/service # do_stop () { # Return # 0 if daemon has been stopped # 1 if daemon was already stopped # 2 if daemon could not be stopped # other if a failure occurred start-stop-daemon --stop --quiet --retry = TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME RETVAL = \" $? \" [ \" $RETVAL \" = 2 ] && return 2 # Wait for children to finish too if this is a daemon that forks # and if the daemon is only ever run from this initscript. # If the above conditions are not satisfied then add some other code # that waits for the process to drop all resources that could be # needed by services started subsequently. A last resort is to # sleep for some time. start-stop-daemon --stop --quiet --oknodo --retry = 0 /30/KILL/5 --exec $DAEMON [ \" $? \" = 2 ] && return 2 # Many daemons don't delete their pidfiles when they exit. rm -f $PIDFILE return \" $RETVAL \" } # # Function that sends a SIGHUP to the daemon/service # do_reload () { # # If the daemon can reload its configuration without # restarting (for example, when it is sent a SIGHUP), # then implement that here. # start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME return 0 } case \" $1 \" in start ) [ \" $VERBOSE \" ! = no ] && log_daemon_msg \"Starting $DESC \" \" $NAME \" do_start case \" $? \" in 0 | 1 ) [ \" $VERBOSE \" ! = no ] && log_end_msg 0 ;; 2 ) [ \" $VERBOSE \" ! = no ] && log_end_msg 1 ;; esac ;; stop ) [ \" $VERBOSE \" ! = no ] && log_daemon_msg \"Stopping $DESC \" \" $NAME \" do_stop case \" $? \" in 0 | 1 ) [ \" $VERBOSE \" ! = no ] && log_end_msg 0 ;; 2 ) [ \" $VERBOSE \" ! = no ] && log_end_msg 1 ;; esac ;; status ) status_of_proc \" $DAEMON \" \" $NAME \" && exit 0 || exit $? ;; #reload|force-reload) # # If do_reload() is not implemented then leave this commented out # and leave 'force-reload' as an alias for 'restart'. # #log_daemon_msg \"Reloading $DESC\" \"$NAME\" #do_reload #log_end_msg $? #;; restart | force-reload ) # # If the \"reload\" option is implemented then remove the # 'force-reload' alias # log_daemon_msg \"Restarting $DESC \" \" $NAME \" do_stop case \" $? \" in 0 | 1 ) do_start case \" $? \" in 0 ) log_end_msg 0 ;; 1 ) log_end_msg 1 ;; # Old process is still running * ) log_end_msg 1 ;; # Failed to start esac ;; * ) # Failed to stop log_end_msg 1 ;; esac ;; * ) #echo \"Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}\" >&2 echo \"Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}\" > & 2 exit 3 ;; esac : 接著執行下列設定, 讓電腦開機時就能啟動 jupyterhub 服務. $ sudo chmod +x /etc/init.d/jupyterhub # Create a default config to /etc/jupyterhub/jupyterhub_config.py $ sudo jupyterhub --generate-config -f /etc/jupyterhub/jupyterhub_config.py # Start jupyterhub $ sudo service jupyterhub start # Stop jupyterhub $ sudo service jupyterhub stop # Start jupyterhub on boot $ sudo update-rc.d jupyterhub defaults # Or use rcconf to manage services http://manpages.ubuntu.com/manpages/natty/man8/rcconf.8.html $ sudo rcconf","tags":"Ubuntu","url":"https://chiamingyen.github.io/kmolab/blog/jin-duan-jupyterhub-dian-nao-zhu-ji-she-ding.html"},{"title":"Custom domain for Github pages","text":"如何設定 Github pages 網頁符號名稱綁定 這裡要舉的例子為 http://cadlab.mde.tw 網站的網址設定. Github pages 是一種靜態頁面網站的服務系統, 使用者可以自選網站綁定的符號名稱, 例如: https://github.com/cad-lab/blog 是一個已經將 default branch 設為 gh-pages 分支的倉儲, 這個網站可以透過 http://cad-lab.github.io/blog/ 呼叫. 但是目前已經透過設定將網址綁定到 http://cadlab.mde.tw , 想要完成這樣的設定, 步驟如下: 使用者擁有 domain name, 且可以透過 DNS 設定管理, 將網站與網址綁定, 在這裡網址 domain name 為 mde.tw 在 https://github.com/cad-lab/blog 倉儲中的根目錄, 增加一個檔案名稱為 CNAME, 且內容為 cadlab.mde.tw 的 檔案 登入到 https://github.com/cad-lab/blog 倉儲, 利用 Settings->Branches, 將 Default branch 設為 gh-pages 分支 (原先內定 Default branch 為 Master) 接著到 DNS 伺服器設定, 將 cad-lab.github.io 網址以 CNAME 類別, 設為與 cadlab.mde.tw 網址綁定, 這裡必須注意的是, Github 會自行將 cad-lab.github.io/blog 跳轉到 cadlab.mde.tw 完成設定後, Github 就會將 http://cadlab.mde.tw 的連結呼叫與設定 default 分支的 gh-pages http://cad-lab.github.io/blog 進行跳轉, 也就是當使用者以瀏覽器連到 http://cadlab.mde.tw 時, 其實資料來自 http://cad-lab.github.io/blog 由於 http://cadlab.mde.tw 網站採用 Pelican 靜態網誌系統進行轉檔, 因此原先 SITEURL 設為 SITEURL = 'http://cad-lab.github.io/blog/post' 必須配合改為 SITEURL = 'http://cadlab.mde.tw/post'","tags":"cadlab","url":"https://chiamingyen.github.io/kmolab/blog/custom-domain-for-github-pages.html"},{"title":"2015 Fall Final Schedule","text":"2015 Fall 學期成績評分時程規劃 最後資料改版期限: 2016.01.20 (星期三) 24:00 評分流程: 從各班個人連結頁面中 ( 2a , 2b , 1a , 1b ), 進入各學員在各班倉儲中對應的 個人 gh-pages 網頁 從上述頁面右下方的 Blogroll 中 最下方 連結 (名稱為\"學號 個人網頁\"), 進入學員個人單獨的 gh-pages 網頁 根據上述兩個頁面中的資料, 配合各課程的講授內容, 依據 投影片 , 操作影片 以及頁面上的其他 相關檔案資料 評分. 從各班的協同網頁中, 各組所公佈的分組報告中的 投影片 , 操作影片 以及頁面上的其他 相關檔案資料 評分. cadp 課程另外將參酌學員所完成的 Solvespace 零件檔案 , Creo Parametric 零組件檔案 , Onshape 零組件檔案評分. 2015 Fall 電腦輔助設計實習課程甲班: cadpa 倉儲: https://github.com/2015fallhw/2015fallcadpa cadpa 網頁: http://2015fallhw.github.io/2015fallcadpa 個人連結: https://github.com/2015fallhw/2015fallcadpa/wiki 2015 Fall 電腦輔助設計實習課程乙班: cadpb 倉儲: https://github.com/2015fallhw/2015fallcadpb cadpb 網頁: http://2015fallhw.github.io/2015fallcadpb 個人連結: https://github.com/2015fallhw/2015fallcadpb/wiki 2015 Fall 計算機程式課程甲班: cpa 倉儲: https://github.com/2015fallhw/2015fallcpa cpa 網頁: http://2015fallhw.github.io/2015fallcpa 個人連結: https://github.com/2015fallhw/2015fallcpa/wiki 2015 Fall 計算機程式課程乙班: cpb 倉儲: https://github.com/2015fallhw/2015fallcpb cpb 網頁: http://2015fallhw.github.io/2015fallcpb 個人連結: https://github.com/2015fallhw/2015fallcpb/wiki","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/2015-fall-final-schedule.html"},{"title":"2015 Fall CP part 2","text":"2015 Fall 計算機程式課程內容 part2 2015 Fall 計算機程式課程倉儲分別為 https://github.com/2015fallhw/2015fallcpa 與 https://github.com/2015fallhw/2015fallcpb 2015 Fall CP 課程 part2 影片摘要: CP W12 介紹從 fix.bat 的搭建到猜顏色遊戲程式的編寫 2015fallcp_b_w12_1 from 虎尾科大機械設計工程 on Vimeo . CP W15 介紹近端系統的建立與啟動, Python3 指令整理, 猜數字與猜顏色遊戲的流程圖, Brython 網頁繪圖 2015cp_w15_b1 from 虎尾科大機械設計工程 on Vimeo . CP W17 說明如何使用 Python 函式, 以及如何進行 Brython 網頁動態繪圖 2015fallcpa_w17 from 虎尾科大機械設計工程 on Vimeo . 2015fallcp_w17b from 虎尾科大機械設計工程 on Vimeo .","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/2015-fall-cp-part-2.html"},{"title":"2015 Fall CP part 1","text":"2015 Fall 計算機程式課程內容 part1 2015 Fall 計算機程式課程倉儲分別為 https://github.com/2015fallhw/2015fallcpa 與 https://github.com/2015fallhw/2015fallcpb 2015 Fall CP 課程 part1 影片摘要: CP W2 2015 Fall 計算機程式可攜環境介紹 2015cp_w2_1 from 虎尾科大機械設計工程 on Vimeo . 說明如何利用 python -m http.server 分享近端檔案 2015cp_w2_2 from 虎尾科大機械設計工程 on Vimeo . 介紹如何利用 fix.bat 修補 C 槽既有的可攜程式系統, 說明 SciTE 如何執行 Python3 程式, 如何利用 gh-pages 分支網頁繳交作業 2015cp_w2_3 from 虎尾科大機械設計工程 on Vimeo . 介紹如何從可攜系統的修補與啟動, 到如何利用 Github Pages 的網頁來繳交各週作業 2015cp_b_w4 from 虎尾科大機械設計工程 on Vimeo . 2015 Fall 課程工作與環境介紹 2015Fall 使用環境與工具介紹 from 虎尾科大機械設計工程 on Vimeo . 英文打字的指法練習介紹, 說明 Github 倉儲的建立使用與刪除. Github 倉儲建立, 使用與刪除 from 虎尾科大機械設計工程 on Vimeo . 介紹 Github 倉儲分支的建立與使用 Github 倉儲分支建立與使用 from 虎尾科大機械設計工程 on Vimeo . CP W3 隨身程式系統的應用再提醒 (fix.zip), Leo Editor, Pelican, Markdown 模組的安裝設定與啟動, notebook.py 中編碼的設定 2015fall_cp_w3_1 from 虎尾科大機械設計工程 on Vimeo . 2015cp_w3_b1 from 虎尾科大機械設計工程 on Vimeo . 2015cp_w3_b3 from 虎尾科大機械設計工程 on Vimeo . 2015cp_w3_b2 from 虎尾科大機械設計工程 on Vimeo . 說明工程師的工作分類, 工程與科學的相輔相成, 解釋何以人文是工程師的養份, 了解科學在探究自然現況, 工程則需面對自然挑戰, 解決人文想像與需求 2015fall_cp_w3_2 from 虎尾科大機械設計工程 on Vimeo . 說明如何利用 Github 建立倉儲, 起始倉儲, git clone 倉儲, 建立分支, 切換 gh-pages 分支, 提交 gh-pages 分支版本, 推送分支版本 2015fall_cp_w3_3 from 虎尾科大機械設計工程 on Vimeo . 說明 Python 程式執行模式, 可以採互動式執行, SciTE 環境下執行, Jupyter 網頁 noteook 環境下執行, Brython 瀏覽器中執行等 2015fall_cp_w3_4 from 虎尾科大機械設計工程 on Vimeo . CP W5 說明計算機程式作為電腦輔助與協同產品設計系列課程的先導課程, 必須在學習 Python3 程式語法的同時, 架構一個可以永續改進使用的系統 2015cp_w5_1 from 虎尾科大機械設計工程 on Vimeo . fix.zip 內容的細步流程介紹, 從 markdown 透過 Pelican 指令的執行, 轉換為放上 Github Pages 網頁的 html 檔案資料, liquid_tags 延伸程式的應用 2015cp_w5_2 from 虎尾科大機械設計工程 on Vimeo . CP W6 介紹英文教學影片的字幕所在位置, 說明如利用 VLC 在近端播放教學影片 2015cp_w6_a_1 from 虎尾科大機械設計工程 on Vimeo . 說明如何將各學員的作業整合到全班協同倉儲, 自行新增為全班倉儲的協同者 2015cp_w6_a_2 from 虎尾科大機械設計工程 on Vimeo . 2015cp_w6_b_4 from 虎尾科大機械設計工程 on Vimeo . 示範如何修正內含 git 衝突標示的 Leo Editor 檔案 2015cp_w6_a_3 from 虎尾科大機械設計工程 on Vimeo . CP W7 介紹如何建立有效率的機械設計工程師可攜程式環境 (Anaconda Python based), 學習計算機程式的概念, 認識程式設計與機械設計工程師角色間的關係 2015_cp_w7_a_1 from 虎尾科大機械設計工程 on Vimeo . 說明近端與 Jupyter 環境的 Python 程式執行, print 與 for 迴圈應用 2015_cp_w7_a_2 from 虎尾科大機械設計工程 on Vimeo . 說明如何將計算機程式的內容放到 gh-pages 網頁 2015_cp_w7_a_3 from 虎尾科大機械設計工程 on Vimeo . 說明如何利用 git reset -- hard 版本編號, 回復舊版本資料 2015fall_cp_w7_b1 from 虎尾科大機械設計工程 on Vimeo . 說明如何修補被弄亂的全班倉儲 2015fall_cp_w7_b1 from 虎尾科大機械設計工程 on Vimeo .","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/2015-fall-cp-part-1.html"},{"title":"2015 Fall CADP part 2","text":"2015 Fall 電腦輔助設計實習課程內容 part2 電腦輔助設計實習課程倉儲分別為: https://github.com/2015fallhw/2015fallcadpb 與 https://github.com/2015fallhw/2015fallcadpa 2015 Fall CADP 課程 part2 影片摘要: CADP W10 利用電腦解決機械設計工程師所面臨的各種問題 電腦輔助設計主要探討工程師該如何利用電腦解決所面臨的各種問題, 這些問題存在於人的各種活動當中, 而人的活動可以從3個不同的軸向來加以探討, 也就是: 人文的軸向, 其中包括與人類思想層面有關的各種活動, 也就是文學, 宗教, 音樂與藝術等活動. 科學的軸向, 其中牽涉到人所處的自然環境, 科學家主要在利用系統方法與工具, 探究存在自然界的各種原理原則, 而工程師在解決問題時, 必須面對自然界的各項挑戰, 依據各種已知的科學方法, 從人文的角度出發, 創造各種產品與服務, 來改善人的生存環境, 提升人的生活價值. 產品與服務的軸向, 此一軸向的活動, 即是工程師以人文想像層面的內容作為養份, 面對自然環境, 以科學認知及方法, 創造各種產品與服務的項目. 電腦在工程解題所扮演的角色: 提升資訊的傳輸效能, 利用網路, Git (2005 之後), Github (2008 之後) 讓數位資訊的傳輸更有效能. 強化文字、視覺與口語的溝通效率, 以隨選或即時媒體, 讓協同成員互通想法, 闡述設計, 激發創意. 簡化數據與資料的收集與儲存, 搜索引擎與資料庫的搭配使用. 支援各種設計與運算分析所需要的軟硬體配備, CAD, CAE, 虛擬實境, 擴增實境, 平行運算等技術的支援. 支援各種層面的製造規劃與管理, CAM, Computer Aided Process Planning 等. 2015cadp_w10_1 from 虎尾科大機械設計工程 on Vimeo . 介紹可攜程式系統的搭建流程與細節 首先下載與操作系統對應的 Miniconda (使用 Python3) 利用 conda install pip 利用 pip install pelican Markdown 安裝 pelican 與 Markdown 模組 可以利用 pip uninstall leo 移除先前所安裝的 Leo Editor 模組 利用 conda install pyqt (由 conda 自行選擇可以與既有系統相容的 pyqt 版本) 2015cadp_w10_2 from 虎尾科大機械設計工程 on Vimeo . CADP W11 fix.zip 修補流程再介紹, 說明電腦輔助機械設計的目標 將隨身碟中的資料, 複製到電腦硬碟, 然後再利用 start.bat 啟動硬碟上的可攜程式系統. 2015fallcadpw11_1 from 虎尾科大機械設計工程 on Vimeo . 啟動存放在全班倉儲網頁中的分組報告 2015fallcadpw11_2 from 虎尾科大機械設計工程 on Vimeo . CADP W12 fix.bat 的詳細介紹, Leo Editor 的近端 pip install 應用 2015cadpb_w12_1 from 虎尾科大機械設計工程 on Vimeo . 利用各自 user 目錄下的 Leo Editor 檔案, 發表位於全班 gh-pages 網頁的分組報告, 以電腦輔助方法管理 reveal.js 投影片中的學員學號註記, 介紹網頁式正齒輪齒面寬輔助設計, 說明正齒輪囓合繪製與組合的靜態繪圖與動態繪圖原理 2015cadpb_w12_2 from 虎尾科大機械設計工程 on Vimeo . CADP W13 fix.bat 環境修補複習 cadpaw13_1 from 虎尾科大機械設計工程 on Vimeo . 說明如何利用各學員 user/學號 目錄下的 .leo 檔案發表分組報告, 介紹如何利用 Github pages 展示零組件的 .stl 檔案 cadpaw13_2 from 虎尾科大機械設計工程 on Vimeo . CADP W14 介紹Creo Parametric 零件轉檔方法, gh-pages 網頁上的零件展示, Binary 與 ASCII STL 檔案格式介紹 2015cadp_w14_1 from 虎尾科大機械設計工程 on Vimeo . Onshape 介紹, 開始利用 OnShape 繪製 Nutcracker 零組件 2015cadp_w14_2 from 虎尾科大機械設計工程 on Vimeo . CADP W15 說明如何利用 Onshape, 以雲端協同方式繪製 Nutcracker 零件, 組立 Nutcracker 零件 2015cadp_w15_a1 from 虎尾科大機械設計工程 on Vimeo . CADP W16 介紹 Nutcracker 在 Onshape 環境中如何進行組立, 進行各種 Onshape 組立約束條件的細部特性討論 2015fall_cadp_b_w16 from 虎尾科大機械設計工程 on Vimeo . 說明如何利用 Solvespace 分析 Nutcraker 機構的 Piston 滑動行程極限 2015fallcadp_a_w16_1 from 虎尾科大機械設計工程 on Vimeo . CADP W17 Nutcracker 機構滑動 Piston 零件的滑動行程範圍分析, 說明如何以 Solvespace 圖解法, 以 Sympy 符號及數值分析推導機構邊界直線方程式, 或採基因演算法進行分析 2015fall_cadpb_w17 from 虎尾科大機械設計工程 on Vimeo . 2015fallcadpa_w17 from 虎尾科大機械設計工程 on Vimeo .","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/2015-fall-cadp-part-2.html"},{"title":"2015 Fall CADP part 1","text":"2015 Fall 電腦輔助設計實習課程內容 part1 電腦輔助設計實習課程倉儲分別為: https://github.com/2015fallhw/2015fallcadpb 與 https://github.com/2015fallhw/2015fallcadpa 2015 Fall CADP 課程 part1 影片摘要: CADP W2 介紹可攜程式環境的下載與使用 此一系統包括 Python3 程式環境, Leo Editor, Jupyter, 而每週作業則利用 reveal.js 製作網頁式投影片, 利用 Pelican 產生靜態網頁, 並且讓各學員可以在個人倉儲 gh-pages 與全班倉儲 gh-pages 網頁上來呈現各階段所完成的作業內容. 2015fallcadp_w2_1 from 虎尾科大機械設計工程 on Vimeo . 利用電腦輔助方法, 善用 USB 客製化資料與 C 槽的既有隨身系統, 設法修改 C 槽啟動的 start.bat 批次檔案, 建立符合需求的可攜程式環境. 2015cadp_w2_2 from 虎尾科大機械設計工程 on Vimeo . 介紹 reveal.js 網頁式投影片的使用方法, 介紹 Github pages 倉儲分支 gh-pages 的用法. 2015cadp_w2_3 from 虎尾科大機械設計工程 on Vimeo . 複習倉儲分支之間的切換方法 (git checkout master 或 git checkout gh-pages) 2015cadp_w2_6 from 虎尾科大機械設計工程 on Vimeo . Github 倉儲中 Leo Editor 5.1 版 @clean 節點指令與 reveal.js 網頁式投影片的用法. 2015cadp_w2_reveal from 虎尾科大機械設計工程 on Vimeo . 甲班 CADP W2 可攜程式系統的建立與使用 2015cadpa_1 from 虎尾科大機械設計工程 on Vimeo . avi 影片轉 flv 格式, 以可攜式 VLC 觀看 flv 影片, 利用 python -m http.server 執行近端檔案分享 2015cp_w2_2 from 虎尾科大機械設計工程 on Vimeo . git push origin gh-pages 系列指令的應用 2015cadpa_3 from 虎尾科大機械設計工程 on Vimeo . CADP W3 Pelican 靜態網頁系統建立與分組協同, Solvespace 零件繪圖 2015_cadpa_w3_1 from 虎尾科大機械設計工程 on Vimeo . git rm 的使用, 以及 git 提交, 訊息註記與推送設定 2015_cadpa_w3_2 from 虎尾科大機械設計工程 on Vimeo . Solvespace 零件電腦輔助繪圖 2015_cadpa_w3_3 from 虎尾科大機械設計工程 on Vimeo . CADP W4 根據 What Engineers Do? 電子文件, 說明科學與工程, 自然與人文間的關係 2015fall_cadp_w4_1 from 虎尾科大機械設計工程 on Vimeo . CADP W5 從 2008 年舊資料的回顧, 說明在地化與國際化的整合, 培養有專長, 能就業, 說明文化與教育對工程師的重要影響, 以及追求卓越的本意 2015cadp_w5_1 from 虎尾科大機械設計工程 on Vimeo . zoomit.exe 在錄製電腦輔助設計說明流程上的應用, Leo Editor 與 Pelican 的使用 2015cadp_w5_1 from 虎尾科大機械設計工程 on Vimeo . 電腦輔助設計系列課程的標準執行流程, 可攜, 永續與體貼的電腦輔助設計方法 2015cadp_w5_2 from 虎尾科大機械設計工程 on Vimeo . Creo2 primer 電子書的網頁化處理 2015cadp_w5_3 from 虎尾科大機械設計工程 on Vimeo . CADP W6 啟動可攜系統, Waht Engineers Do? 與 Creo 2 Parametric Primer 資料摘要, Creo Parametric 零件繪製與組立, 開始建立全班協同 gh-pages 網頁, 自行新增為倉儲協同者, 從 git clone 開始參與全班資料協同 2015cadp_a_w6_1 from 虎尾科大機械設計工程 on Vimeo . CADP W7 學員自行新增為全班協同倉儲的協同者, 示範如何參與網頁協同資料管理 2015fall_cadp_w7_1 from 虎尾科大機械設計工程 on Vimeo . start.bat 內容的修改, 設法透過 Jupyter 執行網頁式設計分析或協同網頁資料編輯 2015fall_cadp_w7_2 from 虎尾科大機械設計工程 on Vimeo . 期中報告內容說明, Creo 2 Parametric Primer 電子書閱讀與零件繪製與零件組操作練習 2015cadp_w7_a1 from 虎尾科大機械設計工程 on Vimeo .","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/2015-fall-cadp-part-1.html"},{"title":"Kmolab 4032 projects","text":"KMOL Lab 4032 專題初步研究方向 Github 倉儲: https://github.com/2015fallproject 403231 40323123 40323130 40323131 40323143 研究動機: 3D 印表機進行零件列印時需要時間, 假如能夠有一個網路排程機制, 可以在線上接受使用者上傳的零件檔案後, 進行批次的零件列印, 並且能夠讓使用者直接在線上追蹤觀測印表機列印情形, 將可有效提升零件列印效能. 研究標的: 一個網路排程系統, 提供使用者利用 Google 帳號登入後, 能夠上傳零件檔案, 直接在線上模擬列印規劃, 計算列印所需時間 一個 3D 印表機的網路控制系統, 能夠與上述網路排程系統結合, 接受使用者的批次列印工作 一個 3D 印表機的列印平台上載與下載 (loading and unloading) 機構, 可以配合印表機的多列印工作, 上下物料與列印完成之零件 case1: 網際 3D 印表機相關多媒體內容管理系統建置 (參考用) Implementation of a Web-based 3D Printer Related Multimedia Content Management System case2: 網際 3D 印表機批次列印管理系統案例研究 (參考用) Case Study of a Web-based 3D Batch Printing Management System 工作項目 列印一個縮小比例, 可以作動的 NutCracker 機構. 參與 kmolab 的協同網誌發表後, 每一成員每週至少必須發表一篇相關資料. 在 17.103 機器上配置 Gogs: https://gogs.io/ 與 Jupyterhub: https://github.com/jupyter/jupyterhub , 讓所有成員都能連線使用. 參考資料 http://octoprint.org/ https://github.com/AstroPrint/AstroBox https://github.com/donovan6000/M3D-Fio https://github.com/Kozea/WeasyPrint 403232 研究動機: Jupyter, Creo Parametric, Onshape 的整合應用 研究標的: Jupyter 平面機構合成 (基因演算法) Creo Parametric Pro/Web.Link 在客製化自行車設計與分析上的應用 Flask 網際程式與 Onshape 系統整合, 建立一套客製化自行車設計系統 工作項目 在 17.102 機器上配置 Gogs: https://gogs.io/ 與 Jupyterhub: https://github.com/jupyter/jupyterhub , 讓所有成員都能連線使用. 參與 kmolab 的協同網誌發表後, 每一成員每週至少必須發表一篇相關資料. 利用 Jupyterhub, 研究基因演算法在機構合成上的應用, 包括 Sympy 與 Deap 的應用. 參考資料 https://github.com/DEAP/deap https://github.com/l-liciniuslucullus/TSP-GA https://www.simscale.com http://superpowers-html5.com/ 操作系統 http://www.ubuntu.com/ http://www.debian.org/ http://www.linuxmint.com/ http://distrowatch.com/","tags":"project","url":"https://chiamingyen.github.io/kmolab/blog/kmolab-4032-projects.html"},{"title":"2015 Fall CADP W16","text":"根據 Nutcracker 機構 的尺寸規格, 請設法算出 Piston 零件的有效運動範圍. 計算 Piston 不發生干涉的有效行程, 可採如下方法: 實際利用 Onshape 中的組立, 移動 piston 零件, 靠目測概略決定 piston 的有效行程. (目測法, 只能得到大概的行程範圍) 利用 Solvespace 繪製 2D 約束圖, 然後利用約束點在線或圓上的方式, 以圖解法解出有效行程, 如下圖一, 圖二與圖三所示. (圖解法, 利用 Solvespace 既有的約束條件設定完成計算) 利用 Jupyter 與 Python3 的 sympy 模組, 先進行符號式推導, 然後再利用數值分析解出 piston 的有效行程, 機構各點標示如下圖四所示, 計算出 的 theta 轉角為 105.7, 如下圖五所示. (以自行編寫的 sympy 程式解題, 透過 Jupyterhub 可以有效進行協同設計運算) 除了上述的目測, 圖解與符號式結合數值分析法之外, 也可以採用 基因演算法解題 , 計算出的 theta 轉角為 105.7, 如下圖六所示. (利用演化法解題, 可以在單機運算, 也可以在 Jupyterhub 平台 上進行運算) 圖一: 利用 Solvespace 中的繪圖約束條件找出右邊的極限點距離 Onshape Piston 組立原點 0.5 圖二: 利用 Solvespace 中的繪圖約束條件找出左邊的極限點距離 Onshape Piston 組立原點 2.23 圖三: 當 piston 位於左邊極限點時, AB 轉角為 105.37 度 圖四: Jupyter 計算分析時機構各點標示圖 圖五: 利用 Jupyter 符號式結合數值分析法所得結果 圖六: 利用基因演算解題, 所得到的結果, 當 piston 位於左邊極限點時, AB 轉角為 105.7 度 若採用 deap 與 numpy 解題 (AB 轉角極限為 105.71 度): # 這裡採用 numpy 與 deap 模組解題, 使用 Genetic Algorithm 模式 # 解的問題為 Nutcracker 左邊 connect 轉角極限 import random import array from deap import base from deap import creator from deap import tools import numpy # for evalIntersect 函式中的 sqrt, sin, cos, pi from math import * # 1/4 最小化題目 type of problem creator.create(\"FitnessMin\", base.Fitness, weights=(-1.0,)) creator.create(\"Individual\", array.array, typecode='d', \\ fitness=creator.FitnessMin) # 2/4 initilization # 兩個變數題目 NDIM = 2 toolbox = base.Toolbox() toolbox.register(\"attr_float\", random.uniform, 0, 5) toolbox.register(\"individual\", tools.initRepeat, creator.Individual, toolbox.attr_float, NDIM) toolbox.register(\"population\", tools.initRepeat, list, toolbox.individual) # 3/4 選擇 operator step3/4 toolbox.register(\"select\", tools.selRandom, k=3) # 也可以採用下列設定 #toolbox.register(\"mate\", tools.cxTwoPoint) #toolbox.register(\"mutate\", tools.mutGaussian, mu=0, sigma=1, indpb=0.1) #toolbox.register(\"select\", tools.selTournament, tournsize=3, k=3) def evalIntersect(individual): t = individual[0] deg = pi/180 theta = individual[1]*deg xtarget = 0.75/2 ytarget = 0.5 x = t*sqrt(-225*sin(theta)**2 + 529)/10 - sqrt(-225*sin(theta)**2 \\ + 529)/92 + 3*cos(theta)/2 y = (-3*t/2 + 123/92)*sin(theta) # 適應值 fitness_value = pow(x-xtarget, 8)+pow(y-ytarget, 8) # 指定 t 的範圍, 小於 1 大於 0, 否則給予處罰 if t > 1: fitness_value += 1000 if t < 0: fitness_value += 1000 # 指定 theta 的範圍, 小於 2pi 大於 0, 否則給予處罰 if theta > 2*pi: fitness_value += 1000 if theta < 0: fitness_value += 1000 return fitness_value, toolbox.register(\"evaluate\", evalIntersect) # 以上到 evaluate 為止, 為定義 operators # 4/4 以下則為 Algorithms def main(): # Differential evolution parameters CR = 0.25 F = 1 MU = 300 NGEN = 200 pop = toolbox.population(n=MU); hof = tools.HallOfFame(1) stats = tools.Statistics(lambda ind: ind.fitness.values) stats.register(\"avg\", numpy.mean) stats.register(\"std\", numpy.std) stats.register(\"min\", numpy.min) stats.register(\"max\", numpy.max) # Evaluate the individuals fitnesses = toolbox.map(toolbox.evaluate, pop) for ind, fit in zip(pop, fitnesses): ind.fitness.values = fit for g in range(1, NGEN): for k, agent in enumerate(pop): a,b,c = toolbox.select(pop) y = toolbox.clone(agent) index = random.randrange(NDIM) for i, value in enumerate(agent): if i == index or random.random() < CR: y[i] = a[i] + F*(b[i]-c[i]) y.fitness.values = toolbox.evaluate(y) if y.fitness > agent.fitness: pop[k] = y hof.update(pop) print(\"Best individual is \", hof[0], hof[0].fitness.values[0]) if __name__ == \"__main__\": main() 上述課程資料與 Wordpress 網頁 上的資料內容相同, Ｗordpress 網站屬於動態的網誌, 而 http://chiamingyen.github.io/kmolab/ 則是靜態網誌系統, 採用靜態網誌的優點如下: 比較安全 比較不會過時 部署成本比較低 可在各種平台上使用 各階段改版資料均有紀錄 以下為參考用的 GA 解 Nutcracker 題目的程式碼: #encoding=utf8 # genetic.py # import random import operator # for Intersect from math import * MAXIMIZE, MINIMIZE = 11, 22 class Individual: chromosome = None score = None # Here the size of var depends on var_number var = [] var_number = 2 for i in range(var_number): var.append(0) alleles = (0,1) # 以下為參數可負數時的編碼考量 #前10為小數,後10為整數,第21則為正負號 #0~9表示小數,10~19表示整數,而指標第20則表示第一數的正號或負號,若為0則表示正,若為1表示負號. #21~30表示第二數的小數部分,31~40則表示第二數的整數部分,第41指標則表示第二數的正號或負號 #42~51表示第三數的小數部分,52~61則表示第二數的整數部分,第62指標則表示第三數的正號或負號 # -1023 ~ 1023 #length = 21*var_number,若接受負數參數,則必須同步修改 20->21 length = 20*var_number seperator = '' optimization = MINIMIZE def __init__(self, chromosome=None): self.chromosome = chromosome or self._makechromosome() self.score = None # set during evaluation def _getvar(self,chromosome=None): x = 0 for i in range(0,self.var_number): for j in range(i*20,i*20+10): x +=self.chromosome[j]<<(j-(i*20)) if (x>999): x=999 x/=1000. for j in range(i*20+10,i*20+20): x +=self.chromosome[j]<<(j-(i*20+10)) self.var[i] = x return self.var ''' for -1023 ~ 1023,當設計變數可以接受負值時使用,每一變數使用21個 bit strings #for design variable -1023 ~1023 for i in range(self.var_number): x = 0 for j in range(i*21,i*21+10): x +=self.chromosome[j]<<(j-(i*21)) if (x>999): x=999 x/=1000. for j in range(i*(21)+10,i*(21)+20): x +=self.chromosome[j]<<(j-(i*21+10)) if(self.chromosome[i*(21)+20] == 1): self.var[i] = -x else: self.var[i] = x x = 0 return self.var ''' def _makechromosome(self): \"makes a chromosome from randomly selected alleles.\" return [random.choice(self.alleles) for gene in range(self.length)] def evaluate(self, optimum=None): \"this method MUST be overridden to evaluate individual fitness score.\" pass def crossover(self, other): \"override this method to use your preferred crossover method.\" return self._twopoint(other) def mutate(self, gene): \"override this method to use your preferred mutation method.\" self._pick(gene) # sample mutation method def _pick(self, gene): \"chooses a random allele to replace this gene's allele.\" self.chromosome[gene] = random.choice(self.alleles) # sample crossover method def _twopoint(self, other): \"creates offspring via two-point crossover between mates.\" left, right = self._pickpivots() def mate(p0, p1): chromosome = p0.chromosome[:] # 交配時,以p0的基因為基礎(複製整個 p0 的染色體內容 chromosome[left:right] = p1.chromosome[left:right] # 接續上一個 p0 的染色體內容,將索引 left 至 right 的內容,替換成 p1 的基因 #child = p1.__class__(chromosome) 這是原先的程式,但是應該子代要指向 p0 的內容才對 child = p0.__class__(chromosome) child._repair(p0, p1) return child return mate(self, other), mate(other, self) # some crossover helpers ... def _repair(self, parent1, parent2): \"override this method, if necessary, to fix duplicated genes.\" pass def _pickpivots(self): left = random.randrange(1, self.length-2) right = random.randrange(left, self.length-1) return left, right # # other methods # def __repr__(self): \"returns string representation of self\" ''' return '<%s chromosome=\"%s\" score=%s var=%s>' % \\ (self.__class__.__name__, self.seperator.join(map(str,self.chromosome)), self.score,self._getvar(self.chromosome)) ''' return '<%s score=%s var=%s>' % \\ (self.__class__.__name__,self.score,self._getvar(self.chromosome)) # since the __cmp__ special function is gone use the __lt__ in stead # use the expression (a > b) - (a < b) as the equivalent for cmp(a, b) #def __cmp__(self, other): # these are for python 3 def __cmp__(self, other): if self.optimization == MINIMIZE: #return cmp(self.score, other.score) return (self.score > other.score) - (self.score < other.score) else: # MAXIMIZE #return cmp(other.score, self.score) return (other.score > self.score) - (other.score < self.score) def __lt__(self, other): return self.__cmp__(other) < 0 def __le__(self, other): return self.__cmp__(other) <= 0 def __gt__(self, other): return self.__cmp__(other) > 0 def __ge__(self, other): return self.__cmp__(other) >= 0 def copy(self): twin = self.__class__(self.chromosome[:]) twin.score = self.score return twin class Environment(object): x = [0] y = [0] def __init__(self, kind, population=None, size=100, maxgenerations=100, crossover_rate=0.90, mutation_rate=0.07, optimum=None): self.kind = kind self.size = size self.optimum = optimum self.population = population or self._makepopulation() for individual in self.population: individual.evaluate(self.optimum) self.crossover_rate = crossover_rate self.mutation_rate = mutation_rate self.maxgenerations = maxgenerations self.generation = 0 self.report() def _makepopulation(self): return [self.kind() for individual in range(self.size)] def run(self): while not self._goal(): self.step() def _goal(self): return self.generation > self.maxgenerations or \\ self.best.score == self.optimum def step(self): # this sort is not working with python 3.0, modification is needed self.population.sort() self._crossover() self.generation += 1 self.report() self.x.append(self.generation) # 設定為只附加所選定範圍的值,這裡只取大於或等於 0 的 score 值 if self.best.score <=5: self.y.append(self.best.score) else: self.y.append(5) def _crossover(self): next_population = [self.best.copy()] while len(next_population) < self.size: mate1 = self._select() if random.random() < self.crossover_rate: mate2 = self._select() offspring = mate1.crossover(mate2) else: offspring = [mate1.copy()] for individual in offspring: self._mutate(individual) individual.evaluate(self.optimum) next_population.append(individual) self.population = next_population[:self.size] def _select(self): \"override this to use your preferred selection method\" return self._tournament() def _mutate(self, individual): for gene in range(individual.length): if random.random() < self.mutation_rate: individual.mutate(gene) # # sample selection method # def _tournament(self, size=8, choosebest=0.90): competitors = [random.choice(self.population) for i in range(size)] competitors.sort() if random.random() < choosebest: return competitors[0] else: return random.choice(competitors[1:]) def best(): doc = \"individual with best fitness score in population.\" def fget(self): return self.population[0] return locals() best = property(**best()) def report(self): print (\"=\"*70) print (\"generation: \", self.generation) print (\"best: \", self.best) # 以上為 genetic.py 目前將兩者結合在一起 #encoding=utf8 # volume.py - useage example # # the fittest individual will have a chromosome consisting of 40 '1's # # #import genetic #此一加總函式在 volume 最大化中,並未使用 def sum(seq): def add(x,y): return x+y return reduce(add, seq, 0) class Volume(Individual): optimization = MAXIMIZE def evaluate(self, optimum=None): SURFACE = 80 # self.score is the fitness value self._getvar(self.chromosome) x = self.var[0] y = self.var[1] z=(SURFACE - x*y)/(2.*(x+y)) fitness_value = x*y*z self.score = fitness_value def mutate(self, gene): self.chromosome[gene] = not self.chromosome[gene] # bit flip class Intersect(Individual): optimization = MINIMIZE def evaluate(self, optimum=None): # self.score is the fitness value self._getvar(self.chromosome) t = self.var[0] deg = pi/180 theta = self.var[1]*deg xtarget = 0.75/2 ytarget = 0.5 x = t*sqrt(-225*sin(theta)**2 + 529)/10 - sqrt(-225*sin(theta)**2 + 529)/92 + 3*cos(theta)/2 y = (-3*t/2 + 123/92)*sin(theta) # 適應值 fitness_value = pow(x-xtarget, 8)+pow(y-ytarget, 8) # 指定 t 的範圍, 小於 1 大於 0, 否則給予處罰 if t > 1: fitness_value += 1000 if t < 0: fitness_value += 1000 # 指定 theta 的範圍, 小於 2pi 大於 0, 否則給予處罰 if theta > 2*pi: fitness_value += 1000 if theta < 0: fitness_value += 1000 self.score = fitness_value def mutate(self, gene): self.chromosome[gene] = not self.chromosome[gene] # bit flip if __name__ == \"__main__\": #env = Environment(Volume, size=500, maxgenerations=100) env = Environment(Intersect, size=500, maxgenerations=100) env.run()","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/2015-fall-cadp-w16.html"},{"title":"Alumni interaction","text":"主動尋找校友互動 如何尋找校友? 如何互動？ 如何延續價值? 先建立自己的領英網頁 在 https://www.linkedin.com/ 登錄帳號後, 填入個人相關專業資料, 之後將會不定期收到機器寄出的 cold mail, 一般而言, 可以無需理會這些 cold mail, 暫且不管這些電子郵件看起來像是人或機器寫的, 你都必須知道, 建立領英帳號的目的, 是要利用它, 而不是被它利用, 所以絕對要對這些網路上的冷信件, 保持冷靜, 儘量不要回應, 可以直接刪除. 先建立自己的 about.me 網頁 在 https://about.me/ 建立帳號的態度, 應該要與領英一樣, 用它而不要被利用. 意思就是說, 只要在上面提供並更新與個人相關的專業資料, 並在申請學校或找工作的時候發揮其用處, 其他時候, 就該讓它晾在那裡, 不要多費心或浪費時間. 先每天早睡早起, 持續運動 主要的目的在時時刻刻保持覺照, 讓自己每天都精神飽滿, 可以應付課業或工作所需. 找虎尾及雲林縣附近的校友, 一起參加活動 每年都有慢跑活動, 可以找幾個身邊的好朋友, 每年參加, 並且利用網誌紀錄訓練與參賽的過程, 自然就會碰到許多志同道合的朋友與系友. 藉由各屆校友的資料整理, 利用網路進行互動 利用各種機會, 向過去的校友或系友請益, 這些前輩已經浸入社會多年, 擁有各式寶貴的經驗, 假如他們願意花一點時間與後進分享, 那就真是太棒了!","tags":"Alumni","url":"https://chiamingyen.github.io/kmolab/blog/alumni-interaction.html"},{"title":"2016 CAD Lab","text":"2016 電腦輔助設計室規劃 CADLab 靜態網誌: http://cadlab.mde.tw CADLab 動態網誌: http://wordpress-cadlab.rhcloud.com CMSimply 網站: http://cmsimply-cadlab.rhcloud.com/ 採購電腦規格與開機磁區規劃 intel Core i7 電腦 63+4 台 - 四台電腦將充作 IPV4/IPV6 相容的 Squid 代理伺服器 防寫保護卡 - 打算使用目前既有的硬碟防寫卡 開機磁區 第1磁區: 64位元 Windows 10 (一般必須安裝的套件) 第2磁區: 64位元 Windows 10 (以無需安裝的綠色套件為主) 第3磁區: Ubuntu Server 加上 ubuntu-desktop 介面 舊電腦分配 淘汰下來的舊電腦分配與應用 網路設置 (以下設置為舊資料, 僅供參考) 目前電腦輔助設計室採 DHCP 換成 140.130.17.82 後連到學校主幹, 理論上設負載平衡的代理主機可以共享網路頻寬, 擷取網路資料的速度會比較快. 代理主機(理論上使用 140.130.17.3 作為 dns server, proxy 採 proxy.mde.nfu.edu.tw 速度最快): proxy.mde.nfu.edu.tw:3128 或 proxy.mde.tw: 3128 或 proxy.kmol.info:3128 問題在於 DNS 伺服器是否可以正確執行任務, 將代理主機符號名稱換成多台 Proxy 的 IP? 學校的 DNS 伺服器: 140.130.1.2 與 140.130.1.20 系上的 DNS 伺服器: 140.130.17.3 中華電信的 DNS 伺服器: 168.95.1.1 DNS 設定優先順序: 系上優先, 再來是學校, 最後才是中華電信. 查驗 DNS 是否正常運作: nslookup 更換 dns server 為 168.95.1.1 server 168.95.1.1 網路設定步驟: 優先使用代理主機\"自動偵測設定\", 系統將會透過 Web Proxy Auto-Discovery Protocol 自動搜尋可用的代理主機, 若連線不正常則進行以下手動設置. 目前的 DNS 伺服器設為哪一台?是否可以正常工作, 可以使用的 DNS 伺服器: 140.130.17.3, 140.130.1.2, 140.130.1.20 與 168.95.1.1 首先設為 140.130.17.3, 利用 nslookup 指令測試是否正常運作, 若不正常則依序改設其他 DNS 伺服器. 此設定的目的在確定可以透過 DNS 伺服器正確將 proxy.mde.tw 轉換為一系列的伺服器群組 IP 若 DNS 伺服器設定與運作正常, 則可以將代理主機設為 proxy.mde.tw:3128 假如 DNS 完全無法運作, 那麼 proxy.mde.tw:3128 由下列 IP 協同分擔運作, 使用者可以自行選擇任何一台作為 Proxy, 埠號都是 3128: IPV6: 2001:288:6004:17::2 2001:288:6004:17::4 2001:288:6004:17::9 2001:288:6004:17::17 2001:288:6004:17::22 2001:288:6004:17::23 IPV4: 140.130.17.2 140.130.17.4 140.130.17.9 140.130.17.17 140.130.17.22 140.130.17.23 假如要查驗目前網路連線情形, 可以檢視 系上即時網路連線圖 以上為 CAD Lab 透過 IPV4 協定使用 DHCP 與 NAT 的模式下, 有關代理主機的設定流程. 若 CAD LAb 所有電腦透過純 IPV6 協定上網, 則必須設定 DNS 與 Proxy 才能讓瀏覽器連網. 優先設系上的 DNS 伺服器: 2001:288:6004:17::3 若系上 DNS 伺服器反應不正常則設學校的 DNS 伺服器: 2001:288:6004:1::2 (另外一台應為: 2001:288:6004:1::20) 若系上與學校 DSN 伺服器反應不正常, 則設中華電信 DNS 伺服器: 2001:b000:168::1 與 2001:b000:168::2 proxy server 設為: proxy.mde.tw:3128","tags":"CADlab","url":"https://chiamingyen.github.io/kmolab/blog/2016-cad-lab.html"},{"title":"2016 WCM course","text":"2016 Spring 網際內容管理課程規劃 github pages 上的靜態網頁系統 Github pages, Leo Editor 與 Pelican site builder html 與 Javascript (Brython based) Python3 的動態網頁 (Flask 與 SQLite based) OpenShift Web Console: https://www.openshift.com 與近端 Flask: http://flask.pocoo.org based 網站程式開發 參考資料 https://github.com/embik/bloks https://github.com/peterhudec/authomatic https://github.com/sigmavirus24/github3.py","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/2016-wcm-course.html"},{"title":"2016 CD course","text":"2016 Spring 協同產品設計實習課程規劃 MCAD 套件 Mechanical Computer Aided Design (MCAD) 套件將使用: Onshape: https://www.onshape.com/ Solvespace: http://solvespace.com/index.pl PTC Creo Parametric: http://www.ptc.com/cad/creo/parametric rattleCAD: http://rattlecad.sourceforge.net/ 零組件繪圖與設計 將以自行車設計與 3D 模型組裝作為主題 標準零件庫 http://www.mcmaster.com/ http://www.bolts-library.org/ https://b2b.partcommunity.com/community/ https://grabcad.com/library/tag/bicycle 客製化設計 https://github.com/vallettea/Bicycle http://www.atom3dp.com/ 參考資料 https://github.com/smoqadam/PyFladesk-rss-reader Planar Linkage Analysis: http://chiamingyen.github.io/kmolab_data/files/planar_linkage_analysis.pdf Fourbar Synthesis: http://chiamingyen.github.io/kmolab_data/files/fourbar_synthesis.pdf Spur Gear Design: http://chiamingyen.github.io/kmolab_data/files/spurGears.pdf Spur Gear in Creo Parametric: http://chiamingyen.github.io/kmolab_data/files/creo_spurgear.7z Design of Spur and Helical Gears Transmissions: https://github.com/efirvida/python-gearbox 自行車控制設計: https://plot.ly/ipython-notebooks/bicycle-control-design/ Architecture of Collaboration: http://chiamingyen.github.io/kmolab_data/files/architecture_of_collaboration.pdf https://github.com/Pomax/bezierjs http://bicycledesign.net/ https://en.wikipedia.org/wiki/List_of_bicycle_parts Bicycle Parts (自行車零件): Chains (鏈條): Crank (曲柄): Frame (車架): Front Derailleur (前變速器): Handle Bar (車把): Hub (花鼓): Lever (桿): Rear Derailleur (後變速器): Rear Hub and Casette (後輪花鼓與飛輪組): Seat (座墊): Wheel (車輪): Bicycle 自行車 Tire 輪胎 Rim 輪圈 Saddle 坐墊 Seat post 座桿 Seat post clamp 座桿束子 Rear brake 後剎車 Front brake 前剎車 Seat stay 後上叉 Chain stay 後下叉 Seat tube 座管 Top tube 上管 Down tube 下管 Freewheel / cassette Sprockets 飛輪 Rear Ends/Dropouts 後叉端 Derailleur Cable 變速導線 Rear Derailleur 後變速器 Chain 鏈條 Pedal 腳踏 Front Derailleur 前變速器 軸 axle 滾珠軸承 ball bearing 車鈴 bicycle ball 車架 bicycle frame Rear suspension 後避震 Chainwheel&cranks 大齒盤及曲柄 Valve 汽門嘴 Spoke (輪圈)幅條 Spoke Nipple (幅條)接頭 Front fork end 前叉端 Hubs 花鼓 Quick release 快拆桿 Front fork 前叉 Brake cable 剎車導線 Front crown 前叉肩蓋 Brake cable housing 剎車導線 Brake lever 剎車握把 Bar end 小手把（副把手） Grip/tape 握把套 Head tube 頭管 Handlebar 車把 Derailleur lever 變速桿 Stem 豎管 Head parts 車頭碗組 Kickstand 停車柱 Chain cover 鏈蓋 Head Light 前燈 Back mirror 後照鏡 Reflector 反光片 Luggage Carrier 貨架","tags":"Courses","url":"https://chiamingyen.github.io/kmolab/blog/2016-cd-course.html"},{"title":"About 17.101 server","text":"Ubuntu 伺服器 設定 介紹 17.101 機器的設定與使用 ubuntu-desktop 這一台 HP 伺服器, 原本安裝 Ubuntu Server 操作系統, 然後再加裝 desktop gui 介面相關套件: sudo apt-get install ubuntu-desktop nginx 與 uwsgi 之後因為卸除 Python3 相關的所有套件, 導致單機桌面無法登入, 所有介面操作, 只能透過網路, 以 X Windows 連線. 目前 17.101 總計啟動 IPV4 與 IPV6 網路設定. /etc/network/interfaces 設定檔案: auto lo iface lo inet loopback auto em1 iface em1 inet static address 140.130.17.101 netmask 255.255.255.0 network 140.130.17.0 broadcast 140.130.17.255 gateway 140.130.17.254 dns-nameservers 140.130.1.2 168.95.1.1 dns-search mde.nfu.edu.tw iface em1 inet6 static address 2001:288:6004:17::101 netmask 64 gateway 2001:288:6004:17::254 dns-nameservers 2001:288:6004:1::2 2001:b000:168::1 17.101 還安裝了 Nginx 與 uwsgi, 分別在 port 80 與 88 執行 CMSimply, 並在 https://140.130.17.101:9443 安裝 Jupyterhub, 只是 IPv6 模式下的 Jupyterhub 還無法使用. squid proxy 伺服器 利用 sudo apt-get install squid, 安裝 squid proxy server. 設定檔案位於 /etc/squid3/squid.conf 每次修改設定檔案後, 利用 sudo service squid3 restart, 重新啟動. 參考的設定檔案: acl cad_lab src 140.130.17.0/24 acl cad_lab src 2001:288:6004:17::/64 acl SSL_ports port 443 acl Safe_ports port 80 # http acl Safe_ports port 88 #acl Safe_ports port 21 # ftp acl SSL_ports port 8443 acl Safe_ports port 8443 acl SSL_ports port 9443 acl Safe_ports port 9443 acl SSL_ports port 22 acl Safe_ports port 22 acl Safe_ports port 443 # https acl Safe_ports port 1025-65535 # unregistered ports acl Safe_ports port 280 # http-mgmt acl Safe_ports port 488 # gss-http acl Safe_ports port 591 # filemaker acl Safe_ports port 777 # multiling http acl CONNECT method CONNECT # Deny requests to certain unsafe ports http_access deny !Safe_ports # Deny CONNECT to other than secure SSL ports http_access deny CONNECT !SSL_ports http_access allow cad_lab http_access deny all # Only allow cachemgr access from localhost http_access allow localhost manager http_access deny manager #http_access allow localnet http_access allow localhost # And finally deny all other access to this proxy http_access deny all # Squid normally listens to port 3128 http_port 3128 #cache_dir ufs /var/spool/squid3 100 16 256 icp_port 3130 icp_access allow all cache_dir ufs /var/spool/squid3 2000 16 256 cache_peer 140.130.17.2 sibling 3128 3130 cache_peer 140.130.17.4 sibling 3128 3130 cache_peer 140.130.17.9 sibling 3128 3130 cache_peer 140.130.17.22 sibling 3128 3130 cache_peer 140.130.17.23 sibling 3128 3130 # # Add any of your own refresh_pattern entries above these. # refresh_pattern &#94;ftp: 1440 20% 10080 refresh_pattern &#94;gopher: 1440 0% 1440 refresh_pattern -i (/cgi-bin/|\\?) 0 0% 0 refresh_pattern (Release|Packages(.gz)*)$ 0 20% 2880 refresh_pattern . 0 20% 4320 當 Ubuntu 在純 IPV6 環境時, 希望使用 IVP6 Git proxy 設定時, 可以利用: git config --global http.proxy http://[IPV6 位址]:埠號 例如: git config -- global http.proxy http://[2001:168:168::168]:3128 至於 python pip3 在純 IPV6 環境下, 也必須設定 proxy 才能正確運作: ~.pip/pip.conf 內容 [global] proxy = http://your.proxy.domain.name:3128 假如要解除 git proxy 設定: git config --global --unset http.proxy git config --global --unset https.proxy","tags":"Ubuntu","url":"https://chiamingyen.github.io/kmolab/blog/about-17101-server.html"},{"title":"Pelican setup","text":"Pelican 靜態網頁系統架構與設定 近端與遠端設定上的考量 本網站系統採用 Pelican 將一系列 .md 檔案轉換成靜態網頁, Github 倉儲位於 https://github.com/chiamingyen/kmolab/tree/gh-pages , 由於考量到近端與遠端 Disqus 與 Tipue search 在設定上的差異, 因此透過 Leo Editor 設置了近端與遠端等兩套配置. 以下將簡要說明此兩套配置設定的差異, 首先是 Leo Editor 執行 pelican 轉檔指令按鈕的差異: 遠端按鈕: import os os . system ( \"pelican content -o blog -s publishconf.py\" ) g . es ( \"admin pelican 執行完畢\" ) 表示所有 .md 檔案位於 content 目錄下, 而輸出的 html 檔案則位於 blog 目錄下, 所採用的設定檔案為 publishconf.py , 其中兩端的共同設定則透過 Python 的模組導入 pelicanconf.py 檔案. 至於近端的按鈕則為: import os os . system ( \"pelican content -o blog -s local_publishconf.py\" ) g . es ( \"admin pelican 近端執行完畢\" ) 與遠端按鈕的差別在於, 採用了 local_publishconf.py 設定檔案. 若再仔細觀查遠端設定 publishconf.py 與近端設定 pelicanconf.py , 就會發現遠端使用的 SITEURL 為絕對路徑, 其中放入網站的符號名稱網址, 而近端的 SITEURL 則採用相對目錄. 其次, 兩端的 THEME 設定也分別使用不同目錄下的 theme 檔案, 主要原因在於 Tipue search 的遠端網站搜尋建議採用 json 模式 (網站關鍵字放在 tipuesearch_content.json), 而近端則建議使用 static 模式 (網站關鍵字放在 tipuesearch_content.js), 儘管經過測試, 其實在遠端採用 static 模式也可以正確查詢, 但在此仍然遵循 Tipue search 的建議, 分成近端與遠端兩種不同設定得方式產生靜態網頁. 至於 DISQUS_SITENAME 的設定, 在近端無需啟動, 但在遠端時, 一般會建議採用絕對網址的設定, 比較不會出錯, 因此, 即使在實際測試中, 有時相對路徑的設定, 一旦放到遠端 gh-pages 有時仍會正確產生對應的 Disqus 表單, 但是本站仍然不厭其煩, 將近端與遠端的設定方別開來, 或許在未來 Tipue search 或 Disque 版本更新之後, 比較不會出錯. 網站多媒體檔案考量 本網站目前將圖檔存在 copy dot com, 而影片檔案則存在 Vimeo, 雖然目前 copy dot com 提供一個帳號可以有 15 GB 的免費資料儲存空間, 但是這樣的服務能夠持續多久, 實在不可預期, 因此一旦 copy dot com 公告要停止免費帳號服務, 本網站各文章連結的圖檔將會失效, 因此目前的規劃如下: 將圖檔放在 copy dot com 的原因是在最小化 gh-pages 倉儲的容量, 若協同者需要 git clone 資料, 可以節省許多時間 為了保險起見, 本網站仍需定期利用程式, 抓下本網站的所有圖檔, 並且以異地備份與多系統儲存的方式暫存, 一旦 copy dot com 公告即將停止服務, 就必須透過轉檔程式, 處理本網站的所有 .md 檔案, 將 copy dot com 的圖檔連結改為相對 images 目錄連結或其他相關連結, 以延續本網站系統的內容與功能 由於影片檔案較大, 我們只好希望 Vimeo 可以一直存活下去, 或者將相同的影片檔案存一份到 Youtube, 當作備份 上述所謂的網站圖擋下載程式: # 配合 pelican site, 將上傳到 copy dot com 的圖檔, 逐一下載到 images 目錄 # 主要的考量在於若 copy.com 不再提供服務, 近端或替代遠端的網頁必須要能夠修改後持續運作 # 除了下載必要的圖檔外, 還需要逐一修改所有 .md 檔案, 將 https://copy dot com 字串換成 images 目錄名稱 from urllib.request import urlopen from urllib.parse import urlsplit # 利用 bs4 解讀 html 內容 from bs4 import BeautifulSoup import os urlList = [] # 以遞迴方式搜尋圖檔的 url # level 0 為根 URL def downloadImages ( url , level ): print ( url ) global urlList # 避免納入重複的 URL if url in urlList : return urlList . append ( url ) try : urlContent = urlopen ( url ) . read () except : return soup = BeautifulSoup ( urlContent ) # 利用 bs4 搜尋 img 標註後, 檢查是否位於 copy dot com, 若是則下載該圖檔 imgTags = soup . findAll ( 'img' ) for imgTag in imgTags : imgUrl = imgTag [ 'src' ] try : # 記得將 dot 改為 . if \"copy dot com\" not in imgUrl : continue else : imgData = urlopen ( imgUrl ) . read () fileName = os . path . basename ( urlsplit ( imgUrl )[ 2 ]) output = open ( \"images/\" + fileName , 'wb' ) output . write ( imgData ) output . close () except : pass # 若頁面有 anchor 標註則納入進行遞迴搜尋 if level > 0 : linkTags = soup . findAll ( 'a' ) if len ( linkTags ) > 0 : for linkTag in linkTags : try : linkUrl = linkTag [ 'href' ] downloadImages ( linkUrl , level - 1 ) except : pass # 若執行目錄下無 images 目錄則在此建立 images 目錄 if not os . path . exists ( \"images\" ): os . makedirs ( \"images\" ) # 執行遞迴圖檔搜尋與下載 downloadImages ( 'http://cadlab.mde.tw/' , 1 ) 至於要配合 images 目錄運作的轉檔程式與設定: # 這個程式將原先寫在各 .md 檔案中的 copy dot com 圖檔的連結內容, 全部換成 images/ import os replacement = \"\"\"images/\"\"\" for dname , dirs , files in os . walk ( \"cadlab\" ): for fname in files : if \".md\" in fname : if \"page\" in dname : # 因為 page 目錄下的圖檔連結, 需要多跳兩層才能擷取 images 目錄中的圖檔 replacement = \"../../\" + replacement fpath = os . path . join ( dname , fname ) with open ( fpath , 'rt' ) as f : s = f . read () # 以下記得要將 dot 改為 . s = s . replace ( \"https://copy dot com/\" , replacement ) with open ( fpath , \"w\" ) as f : f . write ( s ) 為了與上述兩個程式運作配合, 還需要增加一個 pelican 的設定項目: STATIC_PATHS = ['images'] 此一設定的配合, 需要將第1個下載網站所有存到 images 的圖檔目錄, 複製到 content 目錄下, 也就是與所有 .md 檔案放在一起, 然後經過這個靜態路徑的設定, pelican 就會在轉檔時, 將此目錄複製到 blog 目錄下, 這時無論是在之後的近端或遠端, 所有經過 pelican 轉出的 html 檔案, 都可以順利連結到所有對應的圖檔. Pelican templae 設定 假如使用 https://github.com/DandyDev/pelican-bootstrap3 template, 則可將 Set SHOW_ARTICLE_AUTHOR 設為 True, 就可以在每篇文章中顯示作者. SHOW_ARTICLE_CATEGORY 則用來顯示類別. SHOW_DATE_MODIFIED 則可顯示文章修改的日期.","tags":"Python","url":"https://chiamingyen.github.io/kmolab/blog/pelican-setup.html"},{"title":"Kmolab initialized","text":"KMOL Lab 啟用 Github pages 靜態網頁 二十一世紀是電腦網路與人工智慧充分整合的世代, Kmolab 一直以來對於人才的培育, 始終強調必須充份了解電腦的基本運作, 實際應用網路架構提升設計效能, 並且採用演化分析方法來發揮電腦的高速運算能力. 然而這些理念的落實, 必須從電腦的操作系統安裝設定開始, 進而納入 IPV4 與 IPV6 網路協定架構整合, 並且每一成員都有能力運用近端、 廣域主機與雲端主機上的各項軟硬體資源, 將知識管理與最佳化應用的精神納入產品的設計開發, 才能真正融入知識經濟與國際協同的趨勢. 首先以安裝設定 Ubuntu Server 開始. 安裝 Ubuntu Server 基本系統安裝 從 https://wiki.ubuntu.com/LTS , 可以了解各 Ubuntu 版次的產品生命週期, 就現在這個時間點來說, Ubuntu 14.04 的生命週期最長, 因此選擇安裝 14.04 的 Server 版本. 步驟一, 就是從 http://www.ubuntu.com/download/server 下載 Ubuntu Server 14.04 版本的 iso 檔案, 然後燒錄到 DVD 光碟上, 然後用此光碟開機執行安裝. 假如電腦並沒有 DVD 光碟機, 而只有早期的 CD Rom 光碟機, 可以下載 https://help.ubuntu.com/community/Installation/MinimalCD , 然後燒錄到 CD 片, 並且將網路線接上電腦的網路插槽, Ubuntu 就會透過網路線取得大部分的安裝資料, 順利完成安裝, 唯一必須注意的則是, 若此電腦位於內部網路, 通常必須要設定 proxy Server 才能順利從外部電腦取回安裝所需的資料. 步驟二, 一旦電腦接受 Ubuntu 14.04 的光碟開機之後, 隨後的安裝必須設定網路連線與管理者帳號密碼, 並且通常直接選擇安裝 OpenSSL 套件, 以便讓電腦可以透過 ssh 進行連線. 步驟三, IPV4 與與 IPV6 網路設定, /etc/network/interfaces 檔案內容: # This file describes the network interfaces available on your system # and how to activate them. For more information, see interfaces(5). # The loopback network interface auto lo iface lo inet loopback # The primary network interface auto eth0 iface eth0 inet static address 140.130.17.17 netmask 255.255.255.0 network 140.130.17.0 broadcast 140.130.17.255 gateway 140.130.17.254 # dns-* options are implemented by the resolvconf package, if installed dns-nameservers 140.130.1.2 140.130.17.3 168.95.1.1 dns-search mde.nfu.edu.tw # The IPv6 based entries for the primary network interface iface eth0 inet6 static address 2001:288:6004:17::17 netmask 64 gateway 2001:288:6004:17::254 dns-nameservers 2001:288:6004:1::2 2001:b000:168::1 # for internal ip setup auto eth1 iface eth1 inet dhcp 步驟四, 利用 sudo apt-get update 與 sudo apt-get upgrade 更新並升級上一改版後可能已經釋出的版本更新. 步驟五, 利用 sudo apt-get install ubuntu-desktop, 安裝 ubuntu-desktop, 主要目的在讓初學者可以利用 desktop 所提供的互動介面進行操作, 而非僅透過 command shell 執行操作. 步驟六, 利用 sudo apt-get install gcin, 安裝 gcin, 切換語系, 讓使用者可以利用各種輸入法輸入中文 (安裝後 ctrl+alt+6 可以切換成詞音輸入法). 步驟七, 安裝 pip3, PyQt 與 Leo Editor. sudo apt-get install python3-pip sudo apt-get install python3-pyqt4 sudo pip3 install https://github.com/leo-editor/leo-editor/archive/master.zip 上述三項模組安裝完成後, 以 leo& 開啟 Leo Editor. 步驟八, 利用 sudo apt-get install git, 安裝 git client 工具. 步驟九, 安裝 Wine, 可以直接在 Ubuntu 環境中, 執行部份的 Windows 程式. sudo add-apt-repository ppa:ubuntu-wine/ppa sudo apt-get update sudo apt-get install wine1.7 步驟十, 利用 sudo apt-get install squid, 安裝 squid proxy server. 設定檔案位於 /etc/squid3/squid.conf 每次修改設定檔案後, 利用 sudo service squid3 restart, 重新啟動. squid3 參考設定: acl cad_lab src 140.130.17.0/24 acl cad_lab src 2001:288:6004:17::/64 acl SSL_ports port 443 acl Safe_ports port 80 # http acl Safe_ports port 88 #acl Safe_ports port 21 # ftp acl SSL_ports port 8443 acl Safe_ports port 8443 acl SSL_ports port 9443 acl Safe_ports port 9443 acl SSL_ports port 22 acl Safe_ports port 22 acl Safe_ports port 443 # https acl Safe_ports port 1025-65535 # unregistered ports acl Safe_ports port 280 # http-mgmt acl Safe_ports port 488 # gss-http acl Safe_ports port 591 # filemaker acl Safe_ports port 777 # multiling http acl CONNECT method CONNECT # Deny requests to certain unsafe ports http_access deny !Safe_ports # Deny CONNECT to other than secure SSL ports http_access deny CONNECT !SSL_ports http_access allow cad_lab http_access deny all # Only allow cachemgr access from localhost http_access allow localhost manager http_access deny manager #http_access allow localnet http_access allow localhost # And finally deny all other access to this proxy http_access deny all # Squid normally listens to port 3128 http_port 3128 #cache_dir ufs /var/spool/squid3 100 16 256 icp_port 3130 icp_access allow all cache_dir ufs /var/spool/squid3 2000 16 256 cache_peer 140.130.17.2 sibling 3128 3130 cache_peer 140.130.17.4 sibling 3128 3130 cache_peer 140.130.17.9 sibling 3128 3130 cache_peer 140.130.17.22 sibling 3128 3130 cache_peer 140.130.17.23 sibling 3128 3130 # # Add any of your own refresh_pattern entries above these. # refresh_pattern &#94;ftp: 1440 20% 10080 refresh_pattern &#94;gopher: 1440 0% 1440 refresh_pattern -i (/cgi-bin/|\\?) 0 0% 0 refresh_pattern (Release|Packages(.gz)*)$ 0 20% 2880 refresh_pattern . 0 20% 4320 新增其他管理者與一般用戶帳號 新增一般用戶 (假設新帳號為 username): sudo adduser username 過程中會先詢問允許執行 sudo 指令的帳號對應密碼, 然後再輸入兩次 username 的對應密碼 將一般用戶轉為管理者用戶: sudo visudo 將 username 納為可以執行 sudo 的帳號 其中以上下鍵將游標移到管理者帳號設定區, 根據 %admin 行所提示的格式輸入, 先將要轉為管理者的 username 帳號放在第1區, 接著輸入允許執行 sudo 的權限, 之後再利用 Ctrl+o 存檔, 存檔後該用戶即可生效成為系統的管理者. 安裝 nginx sudo apt-get update sudo apt-get install nginx 在 Ubuntu 安裝 nginx 後: nginx 安裝在: /etc/nginx nginx 設定檔案: /etc/nginx/nginx.conf 網站根目錄: /usr/share/nginx/html 內建的設定檔案: /etc/nginx/sites-available/default 安裝 Leo Editor 安裝 pip3 sudo apt-get install python3-pip 安裝 pyqt4 sudo apt–get install python3–pyqt4 選擇 Leo Editor 版本程式進行安裝 sudo pip3 install https://github.com/leo-editor/leo-editor/archive/broke-abbrev.zip 執行 Leo Editor leo& 安裝 CMSimply sudo pip3 install cherrypy git clone cmsimply 原始碼後, 可以利用 python3 application 在 127.0.0.7:8080 執行 安裝 google-chrome sudo apt-get install libxss1 libappindicator1 libindicator7 wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb sudo dpkg -i google-chrome*.deb 手動安裝 PyQt4 先安裝 sip sudo wget http://sourceforge.net/projects/pyqt/files/sip/sip-4.16.9/sip-4.16.9.tar.gz sudo tar -xvf sip-4.16.9.tar.gz cd sip-4.16.9 sudo python3 configure.py sudo make sudo make install 再安裝 PyQt4 sudo wget http://downloads.sourceforge.net/project/pyqt/PyQt4/PyQt-4.11.4/PyQt-x11-gpl-4.11.4.tar.gz sudo tar -xvf PyQt-x11-gpl-4.11.4.tar.gz cd PyQt-x11-gpl-4.11.4 sudo python3 configure.py sudo make sudo make install 手動安裝 Python 3.4.3 註: 在 Ubuntu 1503382 錯誤尚未解決之前, 必須手動移除 Python3, 然後手動安裝 Python 3.4.3 以及 pip3 之後, 才能安裝 uwsgi 模組. 安裝 Python 之前, 先安裝 sqlite3 與 libsqlite3-dev (否則 Python 無法建立 sqlite3 模組) sudo apt-get install sqlite3 libsqlite3-dev 再安裝 Python 3.4.3 sudo apt-get install libssl-dev openssl cd /opt sudo wget python.org/ftp/python/3.4.3/Python-3.4.3.tgz sudo tar -xzvf Python-3.4.3.tgz cd Python-3.4.3 sudo ./configure sudo make sudo make install python3 安裝 pip3 sudo wget https://pypi.python.org/packages/source/p/pip/pip-7.1.2.tar.gz sudo tar -xvf pip-7.1.2.tar.gz cd pip-7.1.2 sudo python3 setup.py install 安裝 uwsgi sudo pip3 install uwsgi 移除 nginx 只保留舊的設定檔案, 其餘移除 sudo apt-get remove nginx nginx-common 將所有與 nginx 有關的資料, 全數移除 sudo apt-get purge nginx nginx-common 移除用不到的相依套件 sudo apt-get autoremove 設定 nginx 與 uwsgi sudo apt-get install nginx 內定 nginx 安裝目錄: /etc/nginx nginx 設定檔案: /etc/nginx/nginx.conf 網站根目錄: /usr/share/nginx/html 內建的設定檔案: /etc/nginx/sites-available/default 與 nginx 結合的 default 設定檔: server { listen 80 default_server ; listen [ :: ] : 80 default_server ipv6only = on ; listen 443 ssl ; location /static { alias /home/yen/cmsimply/wsgi/static/ ; } location / { include uwsgi_params ; uwsgi_pass 127.0.0.1:8080 ; } server_name localhost ; # ssl on ; ssl_certificate / etc / nginx / ssl / nginx . crt ; ssl_certificate_key / etc / nginx / ssl / nginx . key ; ssl_session_timeout 5m ; ssl_protocols SSLv3 TLSv1 TLSv1 . 1 TLSv1 . 2 ; ssl_ciphers \"HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES\" ; ssl_prefer_server_ciphers on ; try_files $ uri $ uri / = 404 ; } uwsgi_params 檔案: uwsgi_param QUERY_STRING $query_string; uwsgi_param REQUEST_METHOD $request_method; uwsgi_param CONTENT_TYPE $content_type; uwsgi_param CONTENT_LENGTH $content_length; uwsgi_param REQUEST_URI $request_uri; uwsgi_param PATH_INFO $document_uri; uwsgi_param DOCUMENT_ROOT $document_root; uwsgi_param SERVER_PROTOCOL $server_protocol; uwsgi_param REMOTE_ADDR $remote_addr; uwsgi_param REMOTE_PORT $remote_port; uwsgi_param SERVER_ADDR $server_addr; uwsgi_param SERVER_PORT $server_port; uwsgi_param SERVER_NAME $server_name; 位於 /etc/init 下的 uwsgi.conf 檔案設定: description \"uwsgi for cmsimply\" start on runlevel [2345] stop on runlevel [06] respawn exec uwsgi --master --processes 4 --die-on-term --socket :8080 --chdir /home/yen/cmsimply/wsgi --wsgi-file /home/yen/cmsimply/wsgi/application 在 Python wsgi cherrypy 程式中的啟動: application = cherrypy.Application(root, config = application_conf) 重新啟動 nginx: sudo service nginx restart 重新啟動 uwsgi: sudo service uwsgi restart uwsgi 啟動多個 Python 程式 利用 nginx 與 uwsgi 啟動多個 Python 應用程式: 必須採用 uwsgi Emperor 啟動模式設定: /etc/init/uwsgi.conf 檔案內容: # Emperor uwsgi script description \"uwsgi Emperor\" start on runlevel [2345] stop on runlevel [06] respawn # 以下為以 user id yen 與 user group yen 執行單一 Python 應用程式的 Upstart 設定 # exec uwsgi --master --processes 4 --die-on-term --uid yen --gid yen --socket :8080 --chdir /home/yen/cmsimply/wsgi --wsgi-file /home/yen/cmsimply/wsgi/application # 以下為以 yen:yen 執行多個 Python 應用程式的設定, uwsgi --emperor 會進入 /home/yen/uwsgi_ini 目錄執行所有的 .ini 應用程式設定 exec uwsgi --uid yen --gid yen --emperor /home/yen/uwsgi_ini /home/yen/uwsgi_ini 目錄中有 uwsgi.ini 與 uwsgi2.ini 設定檔, 分別用來啟動 /home/yen/cmsimply/wsgi/application 與 /home/yen/cmsimply2/wsgi/application uwsgi.ini 內容: [uwsgi] socket = :8080 processes = 4 master = true chdir = /home/yen/cmsimply/wsgi wsgi-file = /home/yen/cmsimply/wsgi/application uwsgi2.ini 內容: [uwsgi] socket = :8081 processes = 4 master = true chdir = /home/yen/cmsimply2/wsgi wsgi-file = /home/yen/cmsimply2/wsgi/application nginx 位於 sites-enabled 目錄下的 default 設定檔: server { listen 80 default_server ; listen [ :: ] : 80 default_server ipv6only = on ; listen 443 ssl ; listen [ :: ] : 443 ssl ipv6only = on ; location /static { alias /home/yen/cmsimply/wsgi/static/ ; } location / { include uwsgi_params ; uwsgi_pass 127.0.0.1:8080 ; } server_name localhost ; # ssl on ; ssl_certificate / etc / nginx / ssl / nginx . crt ; ssl_certificate_key / etc / nginx / ssl / nginx . key ; ssl_session_timeout 5m ; ssl_protocols SSLv3 TLSv1 TLSv1 . 1 TLSv1 . 2 ; ssl_ciphers \"HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES\" ; ssl_prefer_server_ciphers on ; try_files $ uri $ uri / = 404 ; } server { listen 88 default_server ; listen [ :: ] : 88 default_server ipv6only = on ; listen 8443 ssl ; listen [ :: ] : 8443 ssl ipv6only = on ; location /static { alias /home/yen/cmsimply2/wsgi/static/ ; } location / { include uwsgi_params ; uwsgi_pass 127.0.0.1:8081 ; } server_name localhost ; # ssl on ; ssl_certificate / etc / nginx / ssl / nginx . crt ; ssl_certificate_key / etc / nginx / ssl / nginx . key ; ssl_session_timeout 5m ; ssl_protocols SSLv3 TLSv1 TLSv1 . 1 TLSv1 . 2 ; ssl_ciphers \"HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES\" ; ssl_prefer_server_ciphers on ; try_files $ uri $ uri / = 404 ; } 重新啟動 nginx: sudo service nginx restart 重新啟動 uwsgi: sudo service uwsgi restart 按照上述設定完成的測試用主機: /home/yen/cmsimply 程式執行: IPV6 網址: http://[2001:288:6004:17::101] https://[2001:288:6004:17::101] IPV4 網址: http://140.130.17.101 https://140.130.17.101 /home/yen/cmsimply2 程式執行: IPV6 網址: http://[2001:288:6004:17::101]:88 https://[2001:288:6004:17::101]:8443 http://140.130.17.101:88 https://140.130.17.101:8443 純 IPV6 ssh 從只有 IPV6 網址的電腦要 ssh 到另一台 IPV6 電腦: ssh -6 帳號@IPV6 位址 例如: ssh -6 account@2001:288:6004:1::1 安裝 Jupyterhub sudo apt-get install npm nodejs-legacy sudo npm install -g configurable-http-proxy sudo pip3 install jupyterhub sudo pip3 install IPython sudo pip3 install \"ipython[notebook]\" 以 SSL 啟動 : 先建立 key 與 certificate: sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout jupyterhub.key -out jupyterhub.crt jupyterhub –ip 10.0.1.2 –port 443 –ssl-key jupyterhub.key –ssl-cert jupyterhub.cert 或不指定 IP jupyterhub –port 9443 –ssl-key my_ssl.key –ssl-cert my_ssl.cert 之後則可以 https://jupyterIP:9443 連線 putty 與 x windows SSH 設定 X11 ->X11 forwarding 勾選 Enable X11 forwarding X display location: 填入 localhost:0 若在 Windows 環境, 希望能夠將其他電腦上的 X window 畫面顯示在近端, 必須先啟動 xming for Windows http://sourceforge.net/projects/xming/ github 倉儲協同流程 每一位成員在倉儲 users 目錄下各自擁有一個維護資料的 user.leo 檔案 每位成員可以利用 git clone 方式, 將遠端現有的資料倉儲放入近端硬碟中 在 content 目錄下, 以用戶名稱+日期的方式建立 .md 檔案, 若在近端測試, 可以利用 local-pelican 按鈕產生靜態網頁 若在推送過程發現遠端有新的版本資料, 則必須透過 git pull origin gh-pages 的方式拉下資料後, 嘗試進行自動合併. 若無共同編輯的 .md 檔案, 則通常可以利用 gh-pages-pelican 按鈕建立遠端使用的靜態文件檔. 若各內容檢查無誤, 則可以推送到遠端. Openshift 網站 隨身裝置啟動後的 home/.ssh/id_rsa 中的 OpenSSH 私鑰與 OpenShift 帳號上 settings 中的公鑰對應, 如此方具備在近端複製程式碼的權限. 安裝 Beautifulsoup4 由於 kmolab 靜態網誌中的 tipue_search plugin 需要 bs4, 因此必須透過 sudo apt-get install python3-bs4 安裝.","tags":"project","url":"https://chiamingyen.github.io/kmolab/blog/kmolab-initialized.html"},{"title":"Kmolab user 文章套稿","text":"這裡可以放入文章的摘要內容 文章標題 這裡開始文章內容 文章內放入超文件的連結: http://chiamingyen.github.io/kmolab 文章子標題 文章內放入圖片: 引入程式碼 import math # Pythagoras Theorem def hypotenuse ( side1 , side2 ): return math . sqrt ( math . pow ( side1 , 2 ) + math . pow ( side2 , 2 )) side1 = 3 side2 = 4 h = hypotenuse ( side1 , side2 ) print ( a right triangle with side1 = \", side1, \" and side2 = \", side2, \" the hypotenuse is : \", h)","tags":"project","url":"https://chiamingyen.github.io/kmolab/blog/kmolab-user-wen-zhang-tao-gao.html"},{"title":"Mechanical Designer and IPV6","text":"機械設計工程師該如何執行 IPV6 網路設定 隨著 IPV6 協定的逐步推展, 機械設計工程師只需要理解網路發展趨勢, 並逐步在未來幾年內將日常工作導向 IPV4 與 IPV6 共存的環境中, 期開發能夠同時支援雙協定的各式機電光資生 (機械、電子電機、光電、資訊、生物) 與人文科技整合軟硬體, 以下便是在中華電信光世代環境下, 使用雙協定並存的相關設定步驟: 以下資料引用自 http://2014fall.kmol.info/?id=410 , 說明在台灣的中華電信用戶該如何申請並設定 IPV6 連線環境. 情境說明: 當中華電信的 ADSL 用戶升級成為 ADSL2 (光世代) 時, 負責實體進入用戶家中執行設定的工作人員會自帶一個\"用戶帳號@wifi.hinet.net\" 的撥接帳號, 而通常工作人員並不會告知用戶此一帳號的密碼(照理說用戶可以在安裝時向工作人員詢問此一 @wifi.hinet.net 帳號的對應密碼), 另外用戶在申請早期與特定家用電話號碼附掛的網路線時, 會從中華電信取到一個\"用戶帳號\"與密碼, 而此一帳號密碼可以附加成為\"用戶帳號@hinet.net\" 或 \"用戶帳號@ip.hinet.net\" 進行 Modem (這裡以 ZyXEL VDSL2 P883 為例) 的撥接, 若使用者完成 IPV6 試用申請後, 利用 @hinet.net 或 @ip.hinet.net 帳號撥接後, 若用戶為非固接光世代用戶, 就可以同時從中華電信的 DHCP 伺服器取得 IPV4 與 IPV6 等兩種協定的位址. 結論就是： 每一個中華電信用戶總共有兩組可以透過 Modem (這裡以 ZyXEL VDSL2 P883 為例) 撥接進入中華電信的 DHCP 取得 IP 位址的帳號, 其中一組為升級安裝時, 工作人員帶過來的 \"用戶帳號@wifi.hinet.net\", 而另外一組則是 \"用戶帳號@hinet.net\" 或 \"用戶帳號@ip.hinet.net\" 因為筆者並未取得 \"用戶帳號@wifi.hinet.net\" 的對應密碼, 因此無法測試這兩組帳號是否撥接後可以得到相同的效果, 但是\"用戶帳號@hinet.net\" 在完成 IPV6 試用申請後 ,完成撥接即可以取得 IPV4 與 IPV6 等兩組 IP 位址. 設定 IPV4 與 IPV6 dual stack 之前: 利用 ZyXEL P883 執行撥號, 先設定 P883 為 192.168.1.1, 啟動 DHCP Server, 並且從 192.168.1.101 開始, 100 組的 IPV4 IP 提供給實體連線與 Wifi 連線使用, 以\"用戶帳號@wifi.hinet.net\" 及密碼撥接後, P883 即可發揮作用, 其中若連線電腦只有四台以內, 則可以透過實體網路線, 連接到 P883 機器後面的 Hub (集線器), 雖然這4個孔的 Hub 可以方便使用, 但是速度只有到 100M (意思就是若家裡的兩台電腦是透過 P883 內建的4個 Hub 連接, 那麼區網內的網路瓶頸就是 100M, 假如想要讓兩台電腦透過 1000M 以上的速度彼此連線, 就必須將這兩台電腦先接到一個 1000M 以上的 Hub, 再接到 P883 內建的 Hub Port). 由於在 ZyXEL P883 的設定介面中找不到 IPV6 支援的任何畫面 (在隨後的第2階段設定中, 可以知道不需要將 P883 轉到 DHCPIPV6, 機器後面的集線埠, 連線到 Windows 7 以上或 Ubuntu 14.04 都可以自行利用 PPPoE 獨立再撥號連接, 這裡所使用的 ZyXEL 軔體版本為 P883S4_TR069_20141110), 所以若以 P883 執行撥接 (利用 @wifi.hinet.net 帳號)後, 再將電腦接到 P883 的 Hub, 將無法正確透過 IPV6 協定連接到 WAN, 因此以下的 IPV6 dual stack 設定前, 必須在撥接密碼欄中輸入錯誤的密碼, 讓 P883 無法完成撥接, 而且 DHCP Server 必須關閉, 然後由連接在 P883 後 Hub 上的 Ubuntu (以 14.04 LTS 為例) 電腦執行 PPP 的撥接. Ubuntu (以 14.04 LTS 為例) 與中華電信 IPV6 環境使用 完成 IPV6 使用申請, 並接到已經設定完成的通知. 如上所述, 關閉 P883 @wifi.hinet.net 的撥接 (給錯誤密碼並存檔即可), 並且關閉 P883 DHCP Server 運作. 使用下列的 /etc/ppp/options 設定檔案 以 sudo pppoeconf 執行設定, 主要步驟在輸入\"用戶帳號@hinet.net\" 與對應密碼, 其餘一律採用內建設定, 設定結束後, 會自動修改 /etc/network/interfaces 中的內容如下(詳細的 Windows 7 與 Ubuntu 設定步驟請參考: http://www.ipv6.hinet.net/form/HiNet_IPv6_connect-setting.pdf ). /etc/ppp/options 檔案內容: # /etc/ppp/options # asyncmap 0 crtscts +ipv6 ipv6cp-use-ipaddr # ------ 經過 sudo pppoeconf 修改後的 /etc/network/interfaces 檔案內容: # The loopback network interface auto lo iface lo inet loopback auto dsl-provider iface dsl-provider inet ppp pre-up /sbin/ifconfig p10p1 up # line maintained by pppoeconf provider dsl-provider auto p10p1 iface p10p1 inet manual 其中的 p10p1 為網路卡的代號 (一般為 eth0 或 eth1), 而手動撥接的指令為 sudo pon dsl-provider (關閉的指令為 sudo poff) 經過上述設定與電腦撥接之後的 ifconfig 呈現結果: lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:64 errors:0 dropped:0 overruns:0 frame:0 TX packets:64 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:4880 (16.8 KB) TX bytes:4880 (16.8 KB) p10p1 Link encap:Ethernet HWaddr aa:bb:cc:dd:ee:ff inet6 addr: fe80::d685:64ff:feba:59b/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:15665 errors:0 dropped:158 overruns:0 frame:0 TX packets:13324 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:16816888 (16.8 MB) TX bytes:16816888 (16.8 MB) Interrupt:18 ppp0 Link encap:Point-to-Point Protocol inet addr:168.168.168.168 P-t-P:168.168.168.254 Mask:255.255.255.255 UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1492 Metric:1 RX packets:2060 errors:0 dropped:0 overruns:0 frame:0 TX packets:1548 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:3 RX bytes:1681688 (1.68 MB) TX bytes:168168 (168.168 KB) ppp1 Link encap:Point-to-Point Protocol inet addr:168.168.168.18 P-t-P:168.168.168.254 Mask:255.255.255.255 inet6 addr: 2001:1688:1688:1688:1688:1688:1688:1688/64 Scope:Global inet6 addr: fe80::918:2ec2:7e3:a107/10 Scope:Link inet6 addr: 2001:1688:1688:1688:1688:1688:1168:1168/64 Scope:Global UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1492 Metric:1 RX packets:12547 errors:0 dropped:0 overruns:0 frame:0 TX packets:11592 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:3 RX bytes:18354307 (18.3 MB) TX bytes:1398413 (1.3 MB) 第2階段設定 有了上述的測試設定後(其實主要目的在取得正確的 /etc/ppp/options 設定內容, 因為在 Ubuntu 14.04 LTS 中利用 http://www.ipv6.hinet.net/form/HiNet_IPv6_connect-setting.pdf 執行設定所得到的 /etc/ppp/options 無法正確完成 Modem 撥接), 採用\"用戶帳號@hinet.net\" 進行 PPPoE 撥號的連線, 非固接的光世代連線, 已經可以同時支援 IPV4 與 IPV6 協定, 但是因為 P883 的 DHCP 與 PPPoE 都沒有啟用, 所有 WiFi 的功能就無法使用, 因此弄清楚 Windows 7 操作系統與 Ubuntu 14.04 的 PPPoE 撥號設定後, 嘗試再將 P883 機器中的 DHCP Server 與 PPPoE 撥號啟用後, 再分別利用連接到 P883 集線器的 Windows7 與 Ubuntu 14.04 各自執行 PPPoE 的撥號 (因為中華電信的非固接光世代可以同時支援 8 台 PPPoE 的撥號連線). 首先看 Ubuntu 14.04 中的 /etc/network/interfaces 檔案內容: # The loopback network interface auto lo iface lo inet loopback # for sudo pon dsl-provider auto dsl-provider iface dsl-provider inet ppp pre-up /sbin/ifconfig p10p1 up # line maintained by pppoeconf provider dsl-provider auto p10p1 iface p10p1 inet dhcp 透過上述設定, Ubuntu 會在開機的階段, 先以 PPPoE 撥號, 然後再向 P883 以 dhcp 取得網卡對應的 IPV4 位址, 重新開機後的 ifconfig 檔案內容為: lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:133 errors:0 dropped:0 overruns:0 frame:0 TX packets:133 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:9729 (9.7 KB) TX bytes:9729 (9.7 KB) p10p1 Link encap:Ethernet HWaddr aa:bb:cc:dd:ee:ff inet addr:192.168.1.106 Bcast:192.168.1.255 Mask:255.255.255.0 inet6 addr: fe80::d685:64ff:feba:59b/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:8484 errors:0 dropped:0 overruns:0 frame:0 TX packets:8165 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:2904256 (2.9 MB) TX bytes:1086876 (1.0 MB) Interrupt:18 ppp0 Link encap:Point-to-Point Protocol inet addr:168.168.168.168 P-t-P:168.168.168.254 Mask:255.255.255.255 inet6 addr: 2001:1168:1168:1168:1168:1168:1168:1168/64 Scope:Global inet6 addr: fe80::d95f:df3:bd89:1e47/10 Scope:Link inet6 addr: 2001:1168:1168:1168:1168:1168:1168:a849/64 Scope:Global UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1492 Metric:1 RX packets:7610 errors:0 dropped:0 overruns:0 frame:0 TX packets:7460 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:3 RX bytes:2612710 (2.6 MB) TX bytes:827230 (827.2 KB) 設定至此, 已經在既有的 ZyXel P883 IPV4 架構下 (一台 Windows 7 + 一台 Ubuntu 14.04 + 多台 Wifi 裝置), 順利申請中華電信的 IPV6 試用, 完成機房設定後, 自行在 P883 連線之後, 分別在 Windows 7 與 Ubuntu 14.04 以 PPPoE 進行數據機撥號連線, 達到 IPV4 與 IPV6 共存並用的環境, 當使用者希望透過瀏覽器連接到特定 IPV6 網址的網站時, 可以使用 http://[IPV6 網址] 進行連線. 最後, 為什麼在這個時段要進入 IPV6 環境? 隨著 IPV4 網址的消耗殆盡, 有些主機或裝置未來只會有 IPV6 位址, 若不透過 IPV6 協定, 無法連接這些主機或裝置. IPV6 是一條不得不轉進的道路, 愈早涉入, 愈能對於具有未來性的各項軟硬體需求, 作最好的準備. 當許多客戶被迫使用 IPV6 環境後, 有些條件較 IPV4 安全, 但是在點對點的連線下, 可能產生更大的安全危害, 愈早因應, 愈可能降低損害. 目前階段使用 IPV4/IPV6 並存, 可能產生的問題: 連接純 IPV4 的網站, 可能速度反而會較慢 (例如: OpenShift 上的網站, 或 Amazon 平台上的網站). 連接支援 IPV6 的網站, 可能速度會較快 (例如: Youtube 或各項 Google 所提供的服務) 因為讓 double stack 支援的 IPV4 直接曝露在 WAN 上, 若沒有強而有效的防火牆保護, 或者沒有定期更新系統安全修補, 可能會比較容易受到駭客攻擊或利用.","tags":"Ubuntu","url":"https://chiamingyen.github.io/kmolab/blog/mechanical-designer-and-ipv6.html"}]};